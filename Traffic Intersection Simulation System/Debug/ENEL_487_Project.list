
ENEL_487_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006398  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036c  080064a8  080064a8  000164a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006814  08006814  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08006814  08006814  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006814  08006814  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006814  08006814  00016814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006818  08006818  00016818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800681c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b34  200001e4  08006a00  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d18  08006a00  00021d18  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001761d  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d4f  00000000  00000000  0003782a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012f0  00000000  00000000  0003a580  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a8  00000000  00000000  0003b870  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003778  00000000  00000000  0003ca18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f75c  00000000  00000000  00040190  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000940e9  00000000  00000000  0004f8ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e39d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000545c  00000000  00000000  000e3a50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006490 	.word	0x08006490

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08006490 	.word	0x08006490

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000178:	f000 fed6 	bl	8000f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017c:	f000 f8be 	bl	80002fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000180:	f000 f970 	bl	8000464 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000184:	f000 f8f6 	bl	8000374 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000188:	f000 f942 	bl	8000410 <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800018c:	2201      	movs	r2, #1
 800018e:	2140      	movs	r1, #64	; 0x40
 8000190:	4843      	ldr	r0, [pc, #268]	; (80002a0 <main+0x12c>)
 8000192:	f001 f957 	bl	8001444 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000196:	2201      	movs	r2, #1
 8000198:	2180      	movs	r1, #128	; 0x80
 800019a:	4841      	ldr	r0, [pc, #260]	; (80002a0 <main+0x12c>)
 800019c:	f001 f952 	bl	8001444 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80001a0:	2201      	movs	r2, #1
 80001a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001a6:	483e      	ldr	r0, [pc, #248]	; (80002a0 <main+0x12c>)
 80001a8:	f001 f94c 	bl	8001444 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80001ac:	2201      	movs	r2, #1
 80001ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001b2:	483b      	ldr	r0, [pc, #236]	; (80002a0 <main+0x12c>)
 80001b4:	f001 f946 	bl	8001444 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80001b8:	2201      	movs	r2, #1
 80001ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001be:	4839      	ldr	r0, [pc, #228]	; (80002a4 <main+0x130>)
 80001c0:	f001 f940 	bl	8001444 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80001c4:	2201      	movs	r2, #1
 80001c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ca:	4836      	ldr	r0, [pc, #216]	; (80002a4 <main+0x130>)
 80001cc:	f001 f93a 	bl	8001444 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80001d0:	2201      	movs	r2, #1
 80001d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001d6:	4833      	ldr	r0, [pc, #204]	; (80002a4 <main+0x130>)
 80001d8:	f001 f934 	bl	8001444 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80001dc:	2201      	movs	r2, #1
 80001de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001e2:	4830      	ldr	r0, [pc, #192]	; (80002a4 <main+0x130>)
 80001e4:	f001 f92e 	bl	8001444 <HAL_GPIO_WritePin>

      strcpy (cli_buffer_TX, "\x1b[2J");
 80001e8:	4b2f      	ldr	r3, [pc, #188]	; (80002a8 <main+0x134>)
 80001ea:	4a30      	ldr	r2, [pc, #192]	; (80002ac <main+0x138>)
 80001ec:	6810      	ldr	r0, [r2, #0]
 80001ee:	6018      	str	r0, [r3, #0]
 80001f0:	7912      	ldrb	r2, [r2, #4]
 80001f2:	711a      	strb	r2, [r3, #4]
      print_string_block("\x1b[2J");
 80001f4:	482d      	ldr	r0, [pc, #180]	; (80002ac <main+0x138>)
 80001f6:	f000 f98b 	bl	8000510 <print_string_block>
      print_string_block(CLEAR);
 80001fa:	482c      	ldr	r0, [pc, #176]	; (80002ac <main+0x138>)
 80001fc:	f000 f988 	bl	8000510 <print_string_block>
      HAL_Delay(500);
 8000200:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000204:	f000 fec2 	bl	8000f8c <HAL_Delay>
      HAL_Delay(2000);
 8000208:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800020c:	f000 febe 	bl	8000f8c <HAL_Delay>
      print_string_block(CLEAR);
 8000210:	4826      	ldr	r0, [pc, #152]	; (80002ac <main+0x138>)
 8000212:	f000 f97d 	bl	8000510 <print_string_block>
      print_string_block(RC(5,1));
 8000216:	4826      	ldr	r0, [pc, #152]	; (80002b0 <main+0x13c>)
 8000218:	f000 f97a 	bl	8000510 <print_string_block>
      print_string_block(ROLL_TO_BOTTOM(5));
 800021c:	4825      	ldr	r0, [pc, #148]	; (80002b4 <main+0x140>)
 800021e:	f000 f977 	bl	8000510 <print_string_block>
      print_string_block(RC(5,1));
 8000222:	4823      	ldr	r0, [pc, #140]	; (80002b0 <main+0x13c>)
 8000224:	f000 f974 	bl	8000510 <print_string_block>
      print_string_block(ENTER_CMD);
 8000228:	4b23      	ldr	r3, [pc, #140]	; (80002b8 <main+0x144>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4618      	mov	r0, r3
 800022e:	f000 f96f 	bl	8000510 <print_string_block>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000232:	f002 fc13 	bl	8002a5c <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer01 */
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 8000236:	4b21      	ldr	r3, [pc, #132]	; (80002bc <main+0x148>)
 8000238:	2200      	movs	r2, #0
 800023a:	2101      	movs	r1, #1
 800023c:	4820      	ldr	r0, [pc, #128]	; (80002c0 <main+0x14c>)
 800023e:	f002 fd61 	bl	8002d04 <osTimerNew>
 8000242:	4602      	mov	r2, r0
 8000244:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <main+0x150>)
 8000246:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CLI_Queue */
  CLI_QueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &CLI_Queue_attributes);
 8000248:	4a1f      	ldr	r2, [pc, #124]	; (80002c8 <main+0x154>)
 800024a:	2102      	movs	r1, #2
 800024c:	2001      	movs	r0, #1
 800024e:	f002 fddd 	bl	8002e0c <osMessageQueueNew>
 8000252:	4602      	mov	r2, r0
 8000254:	4b1d      	ldr	r3, [pc, #116]	; (80002cc <main+0x158>)
 8000256:	601a      	str	r2, [r3, #0]

  /* creation of Status_Queue */
  Status_QueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &Status_Queue_attributes);
 8000258:	4a1d      	ldr	r2, [pc, #116]	; (80002d0 <main+0x15c>)
 800025a:	2102      	movs	r1, #2
 800025c:	2001      	movs	r0, #1
 800025e:	f002 fdd5 	bl	8002e0c <osMessageQueueNew>
 8000262:	4602      	mov	r2, r0
 8000264:	4b1b      	ldr	r3, [pc, #108]	; (80002d4 <main+0x160>)
 8000266:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of cliTask */
  cliTaskHandle = osThreadNew(startcliTask, NULL, &cliTask_attributes);
 8000268:	4a1b      	ldr	r2, [pc, #108]	; (80002d8 <main+0x164>)
 800026a:	2100      	movs	r1, #0
 800026c:	481b      	ldr	r0, [pc, #108]	; (80002dc <main+0x168>)
 800026e:	f002 fc5b 	bl	8002b28 <osThreadNew>
 8000272:	4602      	mov	r2, r0
 8000274:	4b1a      	ldr	r3, [pc, #104]	; (80002e0 <main+0x16c>)
 8000276:	601a      	str	r2, [r3, #0]

  /* creation of statusUpdate */
  statusUpdateHandle = osThreadNew(updateTask, NULL, &statusUpdate_attributes);
 8000278:	4a1a      	ldr	r2, [pc, #104]	; (80002e4 <main+0x170>)
 800027a:	2100      	movs	r1, #0
 800027c:	481a      	ldr	r0, [pc, #104]	; (80002e8 <main+0x174>)
 800027e:	f002 fc53 	bl	8002b28 <osThreadNew>
 8000282:	4602      	mov	r2, r0
 8000284:	4b19      	ldr	r3, [pc, #100]	; (80002ec <main+0x178>)
 8000286:	601a      	str	r2, [r3, #0]

  /* creation of stateController */
  stateControllerHandle = osThreadNew(controllerTask, NULL, &stateController_attributes);
 8000288:	4a19      	ldr	r2, [pc, #100]	; (80002f0 <main+0x17c>)
 800028a:	2100      	movs	r1, #0
 800028c:	4819      	ldr	r0, [pc, #100]	; (80002f4 <main+0x180>)
 800028e:	f002 fc4b 	bl	8002b28 <osThreadNew>
 8000292:	4602      	mov	r2, r0
 8000294:	4b18      	ldr	r3, [pc, #96]	; (80002f8 <main+0x184>)
 8000296:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000298:	f002 fc12 	bl	8002ac0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800029c:	e7fe      	b.n	800029c <main+0x128>
 800029e:	bf00      	nop
 80002a0:	40010800 	.word	0x40010800
 80002a4:	40010c00 	.word	0x40010c00
 80002a8:	20001c04 	.word	0x20001c04
 80002ac:	0800652c 	.word	0x0800652c
 80002b0:	08006534 	.word	0x08006534
 80002b4:	0800653c 	.word	0x0800653c
 80002b8:	20000000 	.word	0x20000000
 80002bc:	080066ac 	.word	0x080066ac
 80002c0:	08000bfd 	.word	0x08000bfd
 80002c4:	20001c3c 	.word	0x20001c3c
 80002c8:	0800667c 	.word	0x0800667c
 80002cc:	20001bb4 	.word	0x20001bb4
 80002d0:	08006694 	.word	0x08006694
 80002d4:	20001bbc 	.word	0x20001bbc
 80002d8:	08006610 	.word	0x08006610
 80002dc:	080005f9 	.word	0x080005f9
 80002e0:	20001b7c 	.word	0x20001b7c
 80002e4:	08006634 	.word	0x08006634
 80002e8:	080007fd 	.word	0x080007fd
 80002ec:	20001c38 	.word	0x20001c38
 80002f0:	08006658 	.word	0x08006658
 80002f4:	08000885 	.word	0x08000885
 80002f8:	20001c00 	.word	0x20001c00

080002fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b090      	sub	sp, #64	; 0x40
 8000300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000302:	f107 0318 	add.w	r3, r7, #24
 8000306:	2228      	movs	r2, #40	; 0x28
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f005 fbe7 	bl	8005ade <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
 800031c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800031e:	2302      	movs	r3, #2
 8000320:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000322:	2301      	movs	r3, #1
 8000324:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000326:	2310      	movs	r3, #16
 8000328:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800032a:	2300      	movs	r3, #0
 800032c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032e:	f107 0318 	add.w	r3, r7, #24
 8000332:	4618      	mov	r0, r3
 8000334:	f001 f8b8 	bl	80014a8 <HAL_RCC_OscConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800033e:	f000 fc79 	bl	8000c34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000342:	230f      	movs	r3, #15
 8000344:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000346:	2300      	movs	r3, #0
 8000348:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f001 fb24 	bl	80019a8 <HAL_RCC_ClockConfig>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000366:	f000 fc65 	bl	8000c34 <Error_Handler>
  }
}
 800036a:	bf00      	nop
 800036c:	3740      	adds	r7, #64	; 0x40
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
	...

08000374 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b086      	sub	sp, #24
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800037a:	f107 0308 	add.w	r3, r7, #8
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000388:	463b      	mov	r3, r7
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000390:	4b1e      	ldr	r3, [pc, #120]	; (800040c <MX_TIM2_Init+0x98>)
 8000392:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000396:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4000-1;
 8000398:	4b1c      	ldr	r3, [pc, #112]	; (800040c <MX_TIM2_Init+0x98>)
 800039a:	f640 729f 	movw	r2, #3999	; 0xf9f
 800039e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a0:	4b1a      	ldr	r3, [pc, #104]	; (800040c <MX_TIM2_Init+0x98>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80003a6:	4b19      	ldr	r3, [pc, #100]	; (800040c <MX_TIM2_Init+0x98>)
 80003a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80003ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ae:	4b17      	ldr	r3, [pc, #92]	; (800040c <MX_TIM2_Init+0x98>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003b4:	4b15      	ldr	r3, [pc, #84]	; (800040c <MX_TIM2_Init+0x98>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003ba:	4814      	ldr	r0, [pc, #80]	; (800040c <MX_TIM2_Init+0x98>)
 80003bc:	f001 fcc0 	bl	8001d40 <HAL_TIM_Base_Init>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80003c6:	f000 fc35 	bl	8000c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003d0:	f107 0308 	add.w	r3, r7, #8
 80003d4:	4619      	mov	r1, r3
 80003d6:	480d      	ldr	r0, [pc, #52]	; (800040c <MX_TIM2_Init+0x98>)
 80003d8:	f001 fea6 	bl	8002128 <HAL_TIM_ConfigClockSource>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80003e2:	f000 fc27 	bl	8000c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003e6:	2300      	movs	r3, #0
 80003e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ea:	2300      	movs	r3, #0
 80003ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003ee:	463b      	mov	r3, r7
 80003f0:	4619      	mov	r1, r3
 80003f2:	4806      	ldr	r0, [pc, #24]	; (800040c <MX_TIM2_Init+0x98>)
 80003f4:	f002 f86c 	bl	80024d0 <HAL_TIMEx_MasterConfigSynchronization>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80003fe:	f000 fc19 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000402:	bf00      	nop
 8000404:	3718      	adds	r7, #24
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20001c40 	.word	0x20001c40

08000410 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000414:	4b11      	ldr	r3, [pc, #68]	; (800045c <MX_USART3_UART_Init+0x4c>)
 8000416:	4a12      	ldr	r2, [pc, #72]	; (8000460 <MX_USART3_UART_Init+0x50>)
 8000418:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800041a:	4b10      	ldr	r3, [pc, #64]	; (800045c <MX_USART3_UART_Init+0x4c>)
 800041c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000420:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000422:	4b0e      	ldr	r3, [pc, #56]	; (800045c <MX_USART3_UART_Init+0x4c>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <MX_USART3_UART_Init+0x4c>)
 800042a:	2200      	movs	r2, #0
 800042c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800042e:	4b0b      	ldr	r3, [pc, #44]	; (800045c <MX_USART3_UART_Init+0x4c>)
 8000430:	2200      	movs	r2, #0
 8000432:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000434:	4b09      	ldr	r3, [pc, #36]	; (800045c <MX_USART3_UART_Init+0x4c>)
 8000436:	220c      	movs	r2, #12
 8000438:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800043a:	4b08      	ldr	r3, [pc, #32]	; (800045c <MX_USART3_UART_Init+0x4c>)
 800043c:	2200      	movs	r2, #0
 800043e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000440:	4b06      	ldr	r3, [pc, #24]	; (800045c <MX_USART3_UART_Init+0x4c>)
 8000442:	2200      	movs	r2, #0
 8000444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000446:	4805      	ldr	r0, [pc, #20]	; (800045c <MX_USART3_UART_Init+0x4c>)
 8000448:	f002 f8b2 	bl	80025b0 <HAL_UART_Init>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000452:	f000 fbef 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	20001bc0 	.word	0x20001bc0
 8000460:	40004800 	.word	0x40004800

08000464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046a:	f107 0308 	add.w	r3, r7, #8
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000478:	4b22      	ldr	r3, [pc, #136]	; (8000504 <MX_GPIO_Init+0xa0>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a21      	ldr	r2, [pc, #132]	; (8000504 <MX_GPIO_Init+0xa0>)
 800047e:	f043 0304 	orr.w	r3, r3, #4
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b1f      	ldr	r3, [pc, #124]	; (8000504 <MX_GPIO_Init+0xa0>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0304 	and.w	r3, r3, #4
 800048c:	607b      	str	r3, [r7, #4]
 800048e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000490:	4b1c      	ldr	r3, [pc, #112]	; (8000504 <MX_GPIO_Init+0xa0>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a1b      	ldr	r2, [pc, #108]	; (8000504 <MX_GPIO_Init+0xa0>)
 8000496:	f043 0308 	orr.w	r3, r3, #8
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b19      	ldr	r3, [pc, #100]	; (8000504 <MX_GPIO_Init+0xa0>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0308 	and.w	r3, r3, #8
 80004a4:	603b      	str	r3, [r7, #0]
 80004a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80004ae:	4816      	ldr	r0, [pc, #88]	; (8000508 <MX_GPIO_Init+0xa4>)
 80004b0:	f000 ffc8 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80004ba:	4814      	ldr	r0, [pc, #80]	; (800050c <MX_GPIO_Init+0xa8>)
 80004bc:	f000 ffc2 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80004c0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80004c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c6:	2301      	movs	r3, #1
 80004c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ca:	2300      	movs	r3, #0
 80004cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ce:	2302      	movs	r3, #2
 80004d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d2:	f107 0308 	add.w	r3, r7, #8
 80004d6:	4619      	mov	r1, r3
 80004d8:	480b      	ldr	r0, [pc, #44]	; (8000508 <MX_GPIO_Init+0xa4>)
 80004da:	f000 fe59 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80004de:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80004e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e4:	2301      	movs	r3, #1
 80004e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ec:	2302      	movs	r3, #2
 80004ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f0:	f107 0308 	add.w	r3, r7, #8
 80004f4:	4619      	mov	r1, r3
 80004f6:	4805      	ldr	r0, [pc, #20]	; (800050c <MX_GPIO_Init+0xa8>)
 80004f8:	f000 fe4a 	bl	8001190 <HAL_GPIO_Init>

}
 80004fc:	bf00      	nop
 80004fe:	3718      	adds	r7, #24
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40021000 	.word	0x40021000
 8000508:	40010800 	.word	0x40010800
 800050c:	40010c00 	.word	0x40010c00

08000510 <print_string_block>:
		Error_Handler();
	}
}

void print_string_block(const char* text)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
    int i=0;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
    HAL_StatusTypeDef status_a;

    while(huart3.gState == HAL_UART_STATE_BUSY_TX){}
 800051c:	bf00      	nop
 800051e:	4b16      	ldr	r3, [pc, #88]	; (8000578 <print_string_block+0x68>)
 8000520:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000524:	b2db      	uxtb	r3, r3
 8000526:	2b21      	cmp	r3, #33	; 0x21
 8000528:	d0f9      	beq.n	800051e <print_string_block+0xe>

	for (const char* p = text; *p; ++p)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	613b      	str	r3, [r7, #16]
 800052e:	e00c      	b.n	800054a <print_string_block+0x3a>
	{
    	cli_buffer_TX[i] = *p;
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	7819      	ldrb	r1, [r3, #0]
 8000534:	4a11      	ldr	r2, [pc, #68]	; (800057c <print_string_block+0x6c>)
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	4413      	add	r3, r2
 800053a:	460a      	mov	r2, r1
 800053c:	701a      	strb	r2, [r3, #0]
    	i++;
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	3301      	adds	r3, #1
 8000542:	617b      	str	r3, [r7, #20]
	for (const char* p = text; *p; ++p)
 8000544:	693b      	ldr	r3, [r7, #16]
 8000546:	3301      	adds	r3, #1
 8000548:	613b      	str	r3, [r7, #16]
 800054a:	693b      	ldr	r3, [r7, #16]
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d1ee      	bne.n	8000530 <print_string_block+0x20>
    }

	status_a = HAL_UART_Transmit(&huart3, cli_buffer_TX, i, 1000);
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	b29a      	uxth	r2, r3
 8000556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055a:	4908      	ldr	r1, [pc, #32]	; (800057c <print_string_block+0x6c>)
 800055c:	4806      	ldr	r0, [pc, #24]	; (8000578 <print_string_block+0x68>)
 800055e:	f002 f874 	bl	800264a <HAL_UART_Transmit>
 8000562:	4603      	mov	r3, r0
 8000564:	73fb      	strb	r3, [r7, #15]

	if (status_a != HAL_OK)
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <print_string_block+0x60>
	{
		Error_Handler();
 800056c:	f000 fb62 	bl	8000c34 <Error_Handler>
	}
}
 8000570:	bf00      	nop
 8000572:	3718      	adds	r7, #24
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20001bc0 	.word	0x20001bc0
 800057c:	20001c04 	.word	0x20001c04

08000580 <byte_send>:

void byte_send (char msgChar)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
    while(huart3.gState == HAL_UART_STATE_BUSY_TX){}
 800058a:	bf00      	nop
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <byte_send+0x30>)
 800058e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000592:	b2db      	uxtb	r3, r3
 8000594:	2b21      	cmp	r3, #33	; 0x21
 8000596:	d0f9      	beq.n	800058c <byte_send+0xc>
	HAL_UART_Transmit(&huart3, &msgChar, 1,1000);
 8000598:	1df9      	adds	r1, r7, #7
 800059a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059e:	2201      	movs	r2, #1
 80005a0:	4803      	ldr	r0, [pc, #12]	; (80005b0 <byte_send+0x30>)
 80005a2:	f002 f852 	bl	800264a <HAL_UART_Transmit>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20001bc0 	.word	0x20001bc0

080005b4 <line_return>:

_Bool line_return (cli_buffer_RX, cli_char_RX)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	  char enter_char = '\r';
 80005be:	230d      	movs	r3, #13
 80005c0:	73bb      	strb	r3, [r7, #14]
	  char text_1;
	  _Bool update = false;
 80005c2:	2300      	movs	r3, #0
 80005c4:	73fb      	strb	r3, [r7, #15]

	  byte_send(cli_char_RX);
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff ffd8 	bl	8000580 <byte_send>
	  text_1 = (char)cli_char_RX;
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	737b      	strb	r3, [r7, #13]

	  if(text_1 != enter_char)
 80005d4:	7b7a      	ldrb	r2, [r7, #13]
 80005d6:	7bbb      	ldrb	r3, [r7, #14]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d001      	beq.n	80005e0 <line_return+0x2c>
	  {
		  update = false;
 80005dc:	2300      	movs	r3, #0
 80005de:	73fb      	strb	r3, [r7, #15]
	  }

	  if(text_1 == enter_char)
 80005e0:	7b7a      	ldrb	r2, [r7, #13]
 80005e2:	7bbb      	ldrb	r3, [r7, #14]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d101      	bne.n	80005ec <line_return+0x38>
	  {
		  update = true;
 80005e8:	2301      	movs	r3, #1
 80005ea:	73fb      	strb	r3, [r7, #15]
	  }

	 return update;
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <startcliTask>:
  * @retval None
  */
/* USER CODE END Header_startcliTask */

void startcliTask(void *argument)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08c      	sub	sp, #48	; 0x30
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint16_t update_text =1000;
 8000600:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000604:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t value = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t accl_factor[5];

	char failsafe_mode[] = "fsmode";
 800060a:	4a73      	ldr	r2, [pc, #460]	; (80007d8 <startcliTask+0x1e0>)
 800060c:	f107 0318 	add.w	r3, r7, #24
 8000610:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000614:	6018      	str	r0, [r3, #0]
 8000616:	3304      	adds	r3, #4
 8000618:	8019      	strh	r1, [r3, #0]
 800061a:	3302      	adds	r3, #2
 800061c:	0c0a      	lsrs	r2, r1, #16
 800061e:	701a      	strb	r2, [r3, #0]
	char static_mode[] = "scmode";
 8000620:	4a6e      	ldr	r2, [pc, #440]	; (80007dc <startcliTask+0x1e4>)
 8000622:	f107 0310 	add.w	r3, r7, #16
 8000626:	e892 0003 	ldmia.w	r2, {r0, r1}
 800062a:	6018      	str	r0, [r3, #0]
 800062c:	3304      	adds	r3, #4
 800062e:	8019      	strh	r1, [r3, #0]
 8000630:	3302      	adds	r3, #2
 8000632:	0c0a      	lsrs	r2, r1, #16
 8000634:	701a      	strb	r2, [r3, #0]
	char help[] = "?";
 8000636:	233f      	movs	r3, #63	; 0x3f
 8000638:	81bb      	strh	r3, [r7, #12]
	char space = ' ';
 800063a:	2320      	movs	r3, #32
 800063c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

  /* Infinite loop */
	while(1)
	{
	 if ((HAL_UART_Receive ( &huart3, &cli_char_RX, 1, 10) == HAL_OK))
 8000640:	230a      	movs	r3, #10
 8000642:	2201      	movs	r2, #1
 8000644:	4966      	ldr	r1, [pc, #408]	; (80007e0 <startcliTask+0x1e8>)
 8000646:	4867      	ldr	r0, [pc, #412]	; (80007e4 <startcliTask+0x1ec>)
 8000648:	f002 f891 	bl	800276e <HAL_UART_Receive>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	f040 80be 	bne.w	80007d0 <startcliTask+0x1d8>
	 {
		line_complete =  line_return (cli_buffer_RX, cli_char_RX);
 8000654:	4b62      	ldr	r3, [pc, #392]	; (80007e0 <startcliTask+0x1e8>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	4619      	mov	r1, r3
 800065a:	4863      	ldr	r0, [pc, #396]	; (80007e8 <startcliTask+0x1f0>)
 800065c:	f7ff ffaa 	bl	80005b4 <line_return>
 8000660:	4603      	mov	r3, r0
 8000662:	461a      	mov	r2, r3
 8000664:	4b61      	ldr	r3, [pc, #388]	; (80007ec <startcliTask+0x1f4>)
 8000666:	701a      	strb	r2, [r3, #0]

		if(!line_complete)
 8000668:	4b60      	ldr	r3, [pc, #384]	; (80007ec <startcliTask+0x1f4>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	f083 0301 	eor.w	r3, r3, #1
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b00      	cmp	r3, #0
 8000674:	d007      	beq.n	8000686 <startcliTask+0x8e>
		{
			cli_buffer_RX[strlen((char*) cli_buffer_RX)] = cli_char_RX;
 8000676:	485c      	ldr	r0, [pc, #368]	; (80007e8 <startcliTask+0x1f0>)
 8000678:	f7ff fd74 	bl	8000164 <strlen>
 800067c:	4602      	mov	r2, r0
 800067e:	4b58      	ldr	r3, [pc, #352]	; (80007e0 <startcliTask+0x1e8>)
 8000680:	7819      	ldrb	r1, [r3, #0]
 8000682:	4b59      	ldr	r3, [pc, #356]	; (80007e8 <startcliTask+0x1f0>)
 8000684:	5499      	strb	r1, [r3, r2]
		}

		if(line_complete)
 8000686:	4b59      	ldr	r3, [pc, #356]	; (80007ec <startcliTask+0x1f4>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	f000 80a0 	beq.w	80007d0 <startcliTask+0x1d8>
		{
			if((strcmp((char*)cli_buffer_RX, (char*)failsafe_mode)) == 0)
 8000690:	f107 0318 	add.w	r3, r7, #24
 8000694:	4619      	mov	r1, r3
 8000696:	4854      	ldr	r0, [pc, #336]	; (80007e8 <startcliTask+0x1f0>)
 8000698:	f7ff fd5a 	bl	8000150 <strcmp>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d103      	bne.n	80006aa <startcliTask+0xb2>
			{
				update_text = 1111;
 80006a2:	f240 4357 	movw	r3, #1111	; 0x457
 80006a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80006a8:	e071      	b.n	800078e <startcliTask+0x196>
			}

			else if((strcmp((char*)cli_buffer_RX, (char*)static_mode)) == 0)
 80006aa:	f107 0310 	add.w	r3, r7, #16
 80006ae:	4619      	mov	r1, r3
 80006b0:	484d      	ldr	r0, [pc, #308]	; (80007e8 <startcliTask+0x1f0>)
 80006b2:	f7ff fd4d 	bl	8000150 <strcmp>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d103      	bne.n	80006c4 <startcliTask+0xcc>
			{
				update_text = 2222;
 80006bc:	f640 03ae 	movw	r3, #2222	; 0x8ae
 80006c0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80006c2:	e064      	b.n	800078e <startcliTask+0x196>
			}

			else if((strcmp((char*)cli_buffer_RX, (char*)help)) == 0)
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	4619      	mov	r1, r3
 80006ca:	4847      	ldr	r0, [pc, #284]	; (80007e8 <startcliTask+0x1f0>)
 80006cc:	f7ff fd40 	bl	8000150 <strcmp>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d103      	bne.n	80006de <startcliTask+0xe6>
			{
				update_text = 4444;
 80006d6:	f241 135c 	movw	r3, #4444	; 0x115c
 80006da:	84fb      	strh	r3, [r7, #38]	; 0x26
 80006dc:	e057      	b.n	800078e <startcliTask+0x196>
			}

			else if(cli_buffer_RX[0] == 'a' && cli_buffer_RX[1] == 't' && cli_buffer_RX[2] == 'm' && cli_buffer_RX[3] == 'o' && cli_buffer_RX[4] == 'd' && cli_buffer_RX[5] == 'e')
 80006de:	4b42      	ldr	r3, [pc, #264]	; (80007e8 <startcliTask+0x1f0>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b61      	cmp	r3, #97	; 0x61
 80006e4:	d14f      	bne.n	8000786 <startcliTask+0x18e>
 80006e6:	4b40      	ldr	r3, [pc, #256]	; (80007e8 <startcliTask+0x1f0>)
 80006e8:	785b      	ldrb	r3, [r3, #1]
 80006ea:	2b74      	cmp	r3, #116	; 0x74
 80006ec:	d14b      	bne.n	8000786 <startcliTask+0x18e>
 80006ee:	4b3e      	ldr	r3, [pc, #248]	; (80007e8 <startcliTask+0x1f0>)
 80006f0:	789b      	ldrb	r3, [r3, #2]
 80006f2:	2b6d      	cmp	r3, #109	; 0x6d
 80006f4:	d147      	bne.n	8000786 <startcliTask+0x18e>
 80006f6:	4b3c      	ldr	r3, [pc, #240]	; (80007e8 <startcliTask+0x1f0>)
 80006f8:	78db      	ldrb	r3, [r3, #3]
 80006fa:	2b6f      	cmp	r3, #111	; 0x6f
 80006fc:	d143      	bne.n	8000786 <startcliTask+0x18e>
 80006fe:	4b3a      	ldr	r3, [pc, #232]	; (80007e8 <startcliTask+0x1f0>)
 8000700:	791b      	ldrb	r3, [r3, #4]
 8000702:	2b64      	cmp	r3, #100	; 0x64
 8000704:	d13f      	bne.n	8000786 <startcliTask+0x18e>
 8000706:	4b38      	ldr	r3, [pc, #224]	; (80007e8 <startcliTask+0x1f0>)
 8000708:	795b      	ldrb	r3, [r3, #5]
 800070a:	2b65      	cmp	r3, #101	; 0x65
 800070c:	d13b      	bne.n	8000786 <startcliTask+0x18e>
			{
				if((char)cli_buffer_RX[6] == space)
 800070e:	4b36      	ldr	r3, [pc, #216]	; (80007e8 <startcliTask+0x1f0>)
 8000710:	799b      	ldrb	r3, [r3, #6]
 8000712:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000716:	429a      	cmp	r2, r3
 8000718:	d12b      	bne.n	8000772 <startcliTask+0x17a>
				{
					for(int j = 0; j < (strlen((char*) cli_buffer_RX) - 7); j++)
 800071a:	2300      	movs	r3, #0
 800071c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800071e:	e00c      	b.n	800073a <startcliTask+0x142>
					{
						accl_factor[j] =  cli_buffer_RX[j + 7];
 8000720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000722:	3307      	adds	r3, #7
 8000724:	4a30      	ldr	r2, [pc, #192]	; (80007e8 <startcliTask+0x1f0>)
 8000726:	5cd1      	ldrb	r1, [r2, r3]
 8000728:	f107 0220 	add.w	r2, r7, #32
 800072c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800072e:	4413      	add	r3, r2
 8000730:	460a      	mov	r2, r1
 8000732:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < (strlen((char*) cli_buffer_RX) - 7); j++)
 8000734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000736:	3301      	adds	r3, #1
 8000738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800073a:	482b      	ldr	r0, [pc, #172]	; (80007e8 <startcliTask+0x1f0>)
 800073c:	f7ff fd12 	bl	8000164 <strlen>
 8000740:	4603      	mov	r3, r0
 8000742:	1fda      	subs	r2, r3, #7
 8000744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000746:	429a      	cmp	r2, r3
 8000748:	d8ea      	bhi.n	8000720 <startcliTask+0x128>
					}

					value = atoi((char*)accl_factor);
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	4618      	mov	r0, r3
 8000750:	f005 f98c 	bl	8005a6c <atoi>
 8000754:	4603      	mov	r3, r0
 8000756:	857b      	strh	r3, [r7, #42]	; 0x2a

					if((value <= 100) && (value > 0))
 8000758:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800075a:	2b64      	cmp	r3, #100	; 0x64
 800075c:	d805      	bhi.n	800076a <startcliTask+0x172>
 800075e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <startcliTask+0x172>
					{
						update_text = value;
 8000764:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000766:	84fb      	strh	r3, [r7, #38]	; 0x26
				if((char)cli_buffer_RX[6] == space)
 8000768:	e010      	b.n	800078c <startcliTask+0x194>
					}

					else
					{
						update_text = 1010;
 800076a:	f240 33f2 	movw	r3, #1010	; 0x3f2
 800076e:	84fb      	strh	r3, [r7, #38]	; 0x26
				if((char)cli_buffer_RX[6] == space)
 8000770:	e00c      	b.n	800078c <startcliTask+0x194>
					}
				}

				else if((char)cli_buffer_RX[6] != space)
 8000772:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <startcliTask+0x1f0>)
 8000774:	799b      	ldrb	r3, [r3, #6]
 8000776:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800077a:	429a      	cmp	r2, r3
 800077c:	d006      	beq.n	800078c <startcliTask+0x194>
				{
					update_text = 1010;
 800077e:	f240 33f2 	movw	r3, #1010	; 0x3f2
 8000782:	84fb      	strh	r3, [r7, #38]	; 0x26
				if((char)cli_buffer_RX[6] == space)
 8000784:	e002      	b.n	800078c <startcliTask+0x194>
				}
			}

			else
			{
				update_text = update_text;
 8000786:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000788:	84fb      	strh	r3, [r7, #38]	; 0x26
 800078a:	e000      	b.n	800078e <startcliTask+0x196>
				if((char)cli_buffer_RX[6] == space)
 800078c:	bf00      	nop
			}

			memset(cli_buffer_RX, 0, sizeof(cli_buffer_RX));
 800078e:	2232      	movs	r2, #50	; 0x32
 8000790:	2100      	movs	r1, #0
 8000792:	4815      	ldr	r0, [pc, #84]	; (80007e8 <startcliTask+0x1f0>)
 8000794:	f005 f9a3 	bl	8005ade <memset>
			memset(accl_factor, 0, sizeof(accl_factor));
 8000798:	f107 0320 	add.w	r3, r7, #32
 800079c:	2205      	movs	r2, #5
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f005 f99c 	bl	8005ade <memset>

			print_string_block("\r\n");
 80007a6:	4812      	ldr	r0, [pc, #72]	; (80007f0 <startcliTask+0x1f8>)
 80007a8:	f7ff feb2 	bl	8000510 <print_string_block>
			print_string_block(ENTER_CMD);
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <startcliTask+0x1fc>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fead 	bl	8000510 <print_string_block>

			if(osMessageQueuePut(CLI_QueueHandle, &update_text, 1U, 0U)!= osOK)
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <startcliTask+0x200>)
 80007b8:	6818      	ldr	r0, [r3, #0]
 80007ba:	f107 0126 	add.w	r1, r7, #38	; 0x26
 80007be:	2300      	movs	r3, #0
 80007c0:	2201      	movs	r2, #1
 80007c2:	f002 fba9 	bl	8002f18 <osMessageQueuePut>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <startcliTask+0x1d8>
			{
			   Error_Handler();
 80007cc:	f000 fa32 	bl	8000c34 <Error_Handler>
			}
		 }
	 }
	 osDelay(50);
 80007d0:	2032      	movs	r0, #50	; 0x32
 80007d2:	f002 fa53 	bl	8002c7c <osDelay>
	 if ((HAL_UART_Receive ( &huart3, &cli_char_RX, 1, 10) == HAL_OK))
 80007d6:	e733      	b.n	8000640 <startcliTask+0x48>
 80007d8:	08006548 	.word	0x08006548
 80007dc:	08006550 	.word	0x08006550
 80007e0:	20001bb8 	.word	0x20001bb8
 80007e4:	20001bc0 	.word	0x20001bc0
 80007e8:	20001b80 	.word	0x20001b80
 80007ec:	20000200 	.word	0x20000200
 80007f0:	08006544 	.word	0x08006544
 80007f4:	20000000 	.word	0x20000000
 80007f8:	20001bb4 	.word	0x20001bb4

080007fc <updateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_updateTask */
void updateTask(void *argument)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  static char outstring[100];
	  status = osMessageQueueGet(Status_QueueHandle, &status_text, NULL, 0U );
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <updateTask+0x6c>)
 8000806:	6818      	ldr	r0, [r3, #0]
 8000808:	f107 010e 	add.w	r1, r7, #14
 800080c:	2300      	movs	r3, #0
 800080e:	2200      	movs	r2, #0
 8000810:	f002 fbf6 	bl	8003000 <osMessageQueueGet>
 8000814:	6138      	str	r0, [r7, #16]
	  if(status == osOK)
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d101      	bne.n	8000820 <updateTask+0x24>
	  {
		  period = status_text;
 800081c:	89fb      	ldrh	r3, [r7, #14]
 800081e:	82fb      	strh	r3, [r7, #22]
	  }

	  print_string_block(SAVE_CURSOR);
 8000820:	4812      	ldr	r0, [pc, #72]	; (800086c <updateTask+0x70>)
 8000822:	f7ff fe75 	bl	8000510 <print_string_block>
	  print_string_block(RC(1,1));
 8000826:	4812      	ldr	r0, [pc, #72]	; (8000870 <updateTask+0x74>)
 8000828:	f7ff fe72 	bl	8000510 <print_string_block>
	  if((period > 100) && (period < 0) && (period != 2222) && (period != 4444) && (period != 1111))
	  {
		  strcpy ( outstring, "Wrong command! Enter '?' to see available commands \r\n" );
	  }

	  else if((period == 4444))
 800082c:	8afb      	ldrh	r3, [r7, #22]
 800082e:	f241 125c 	movw	r2, #4444	; 0x115c
 8000832:	4293      	cmp	r3, r2
 8000834:	d108      	bne.n	8000848 <updateTask+0x4c>
	  {
		  strcpy ( outstring, "Enter 'fsmode' for failsafe mode, 'scmode' for static cycle mode & 'atmode #' for accelerated-time mode \r\n" );
 8000836:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <updateTask+0x78>)
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <updateTask+0x7c>)
 800083a:	4610      	mov	r0, r2
 800083c:	4619      	mov	r1, r3
 800083e:	236b      	movs	r3, #107	; 0x6b
 8000840:	461a      	mov	r2, r3
 8000842:	f005 f941 	bl	8005ac8 <memcpy>
 8000846:	e005      	b.n	8000854 <updateTask+0x58>
	  }

	  else
	  {
		  snprintf(outstring, 100,"period:% 5d \r\n",period);
 8000848:	8afb      	ldrh	r3, [r7, #22]
 800084a:	4a0c      	ldr	r2, [pc, #48]	; (800087c <updateTask+0x80>)
 800084c:	2164      	movs	r1, #100	; 0x64
 800084e:	4809      	ldr	r0, [pc, #36]	; (8000874 <updateTask+0x78>)
 8000850:	f005 f94e 	bl	8005af0 <sniprintf>
	  }

	  print_string_block(outstring);
 8000854:	4807      	ldr	r0, [pc, #28]	; (8000874 <updateTask+0x78>)
 8000856:	f7ff fe5b 	bl	8000510 <print_string_block>
	  print_string_block(RESTORE_CURSOR);
 800085a:	4809      	ldr	r0, [pc, #36]	; (8000880 <updateTask+0x84>)
 800085c:	f7ff fe58 	bl	8000510 <print_string_block>

	  osDelay(50);
 8000860:	2032      	movs	r0, #50	; 0x32
 8000862:	f002 fa0b 	bl	8002c7c <osDelay>
  {
 8000866:	e7cd      	b.n	8000804 <updateTask+0x8>
 8000868:	20001bbc 	.word	0x20001bbc
 800086c:	08006558 	.word	0x08006558
 8000870:	0800655c 	.word	0x0800655c
 8000874:	20000204 	.word	0x20000204
 8000878:	08006564 	.word	0x08006564
 800087c:	080065d0 	.word	0x080065d0
 8000880:	080065e0 	.word	0x080065e0

08000884 <controllerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_controllerTask */
void controllerTask(void *argument)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN controllerTask */

		_Bool FS_MODE = true;
 800088c:	2301      	movs	r3, #1
 800088e:	77fb      	strb	r3, [r7, #31]
		_Bool SC_MODE = false;
 8000890:	2300      	movs	r3, #0
 8000892:	77bb      	strb	r3, [r7, #30]

		osStatus_t status;
		uint16_t count_time;
		uint16_t status_text;
	 	uint16_t update_text;
		uint16_t states = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	83bb      	strh	r3, [r7, #28]
		uint16_t state_option = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	837b      	strh	r3, [r7, #26]
		uint16_t option = 1000;
 800089c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a0:	833b      	strh	r3, [r7, #24]
		uint16_t period = 1000;
 80008a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a6:	82fb      	strh	r3, [r7, #22]

		HAL_TIM_Base_Start(&htim2);
 80008a8:	48bf      	ldr	r0, [pc, #764]	; (8000ba8 <controllerTask+0x324>)
 80008aa:	f001 fa99 	bl	8001de0 <HAL_TIM_Base_Start>

	if(osMessageQueuePut(Status_QueueHandle, &status_text, 1U, 0U)!= osOK)
 80008ae:	4bbf      	ldr	r3, [pc, #764]	; (8000bac <controllerTask+0x328>)
 80008b0:	6818      	ldr	r0, [r3, #0]
 80008b2:	f107 010c 	add.w	r1, r7, #12
 80008b6:	2300      	movs	r3, #0
 80008b8:	2201      	movs	r2, #1
 80008ba:	f002 fb2d 	bl	8002f18 <osMessageQueuePut>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <controllerTask+0x44>
	  {
	    Error_Handler();
 80008c4:	f000 f9b6 	bl	8000c34 <Error_Handler>
	  }

  /* Infinite loop */
  for(;;)
  {
		status = osMessageQueueGet(CLI_QueueHandle, &update_text, NULL, 0U );
 80008c8:	4bb9      	ldr	r3, [pc, #740]	; (8000bb0 <controllerTask+0x32c>)
 80008ca:	6818      	ldr	r0, [r3, #0]
 80008cc:	f107 010a 	add.w	r1, r7, #10
 80008d0:	2300      	movs	r3, #0
 80008d2:	2200      	movs	r2, #0
 80008d4:	f002 fb94 	bl	8003000 <osMessageQueueGet>
 80008d8:	6138      	str	r0, [r7, #16]
		if(status == osOK)
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	f040 8092 	bne.w	8000a06 <controllerTask+0x182>
		{
			period = update_text;
 80008e2:	897b      	ldrh	r3, [r7, #10]
 80008e4:	82fb      	strh	r3, [r7, #22]
			status_text = update_text;
 80008e6:	897b      	ldrh	r3, [r7, #10]
 80008e8:	81bb      	strh	r3, [r7, #12]

			if(osMessageQueuePut(Status_QueueHandle, &status_text, 1U, 0U)!= osOK)
 80008ea:	4bb0      	ldr	r3, [pc, #704]	; (8000bac <controllerTask+0x328>)
 80008ec:	6818      	ldr	r0, [r3, #0]
 80008ee:	f107 010c 	add.w	r1, r7, #12
 80008f2:	2300      	movs	r3, #0
 80008f4:	2201      	movs	r2, #1
 80008f6:	f002 fb0f 	bl	8002f18 <osMessageQueuePut>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <controllerTask+0x80>
		    {
			  Error_Handler();
 8000900:	f000 f998 	bl	8000c34 <Error_Handler>
			}

			if(update_text == 1111)
 8000904:	897b      	ldrh	r3, [r7, #10]
 8000906:	f240 4257 	movw	r2, #1111	; 0x457
 800090a:	4293      	cmp	r3, r2
 800090c:	d134      	bne.n	8000978 <controllerTask+0xf4>
			{
				FS_MODE = true;
 800090e:	2301      	movs	r3, #1
 8000910:	77fb      	strb	r3, [r7, #31]
				SC_MODE = false;
 8000912:	2300      	movs	r3, #0
 8000914:	77bb      	strb	r3, [r7, #30]
				states = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	83bb      	strh	r3, [r7, #28]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800091a:	2201      	movs	r2, #1
 800091c:	2140      	movs	r1, #64	; 0x40
 800091e:	48a5      	ldr	r0, [pc, #660]	; (8000bb4 <controllerTask+0x330>)
 8000920:	f000 fd90 	bl	8001444 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	2180      	movs	r1, #128	; 0x80
 8000928:	48a2      	ldr	r0, [pc, #648]	; (8000bb4 <controllerTask+0x330>)
 800092a:	f000 fd8b 	bl	8001444 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800092e:	2201      	movs	r2, #1
 8000930:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000934:	489f      	ldr	r0, [pc, #636]	; (8000bb4 <controllerTask+0x330>)
 8000936:	f000 fd85 	bl	8001444 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800093a:	2201      	movs	r2, #1
 800093c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000940:	489c      	ldr	r0, [pc, #624]	; (8000bb4 <controllerTask+0x330>)
 8000942:	f000 fd7f 	bl	8001444 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000946:	2201      	movs	r2, #1
 8000948:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800094c:	489a      	ldr	r0, [pc, #616]	; (8000bb8 <controllerTask+0x334>)
 800094e:	f000 fd79 	bl	8001444 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000952:	2201      	movs	r2, #1
 8000954:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000958:	4897      	ldr	r0, [pc, #604]	; (8000bb8 <controllerTask+0x334>)
 800095a:	f000 fd73 	bl	8001444 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000964:	4894      	ldr	r0, [pc, #592]	; (8000bb8 <controllerTask+0x334>)
 8000966:	f000 fd6d 	bl	8001444 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000970:	4891      	ldr	r0, [pc, #580]	; (8000bb8 <controllerTask+0x334>)
 8000972:	f000 fd67 	bl	8001444 <HAL_GPIO_WritePin>
 8000976:	e046      	b.n	8000a06 <controllerTask+0x182>
			}

			else if(update_text == 2222)
 8000978:	897b      	ldrh	r3, [r7, #10]
 800097a:	f640 02ae 	movw	r2, #2222	; 0x8ae
 800097e:	4293      	cmp	r3, r2
 8000980:	d134      	bne.n	80009ec <controllerTask+0x168>
			{
				FS_MODE = false;
 8000982:	2300      	movs	r3, #0
 8000984:	77fb      	strb	r3, [r7, #31]
				SC_MODE = true;
 8000986:	2301      	movs	r3, #1
 8000988:	77bb      	strb	r3, [r7, #30]
				state_option = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	837b      	strh	r3, [r7, #26]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800098e:	2201      	movs	r2, #1
 8000990:	2140      	movs	r1, #64	; 0x40
 8000992:	4888      	ldr	r0, [pc, #544]	; (8000bb4 <controllerTask+0x330>)
 8000994:	f000 fd56 	bl	8001444 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2180      	movs	r1, #128	; 0x80
 800099c:	4885      	ldr	r0, [pc, #532]	; (8000bb4 <controllerTask+0x330>)
 800099e:	f000 fd51 	bl	8001444 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a8:	4882      	ldr	r0, [pc, #520]	; (8000bb4 <controllerTask+0x330>)
 80009aa:	f000 fd4b 	bl	8001444 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80009ae:	2201      	movs	r2, #1
 80009b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b4:	487f      	ldr	r0, [pc, #508]	; (8000bb4 <controllerTask+0x330>)
 80009b6:	f000 fd45 	bl	8001444 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80009ba:	2201      	movs	r2, #1
 80009bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009c0:	487d      	ldr	r0, [pc, #500]	; (8000bb8 <controllerTask+0x334>)
 80009c2:	f000 fd3f 	bl	8001444 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80009c6:	2201      	movs	r2, #1
 80009c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009cc:	487a      	ldr	r0, [pc, #488]	; (8000bb8 <controllerTask+0x334>)
 80009ce:	f000 fd39 	bl	8001444 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80009d2:	2201      	movs	r2, #1
 80009d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009d8:	4877      	ldr	r0, [pc, #476]	; (8000bb8 <controllerTask+0x334>)
 80009da:	f000 fd33 	bl	8001444 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009e4:	4874      	ldr	r0, [pc, #464]	; (8000bb8 <controllerTask+0x334>)
 80009e6:	f000 fd2d 	bl	8001444 <HAL_GPIO_WritePin>
 80009ea:	e00c      	b.n	8000a06 <controllerTask+0x182>
			}

			else if((period <= 100) && (period > 0))
 80009ec:	8afb      	ldrh	r3, [r7, #22]
 80009ee:	2b64      	cmp	r3, #100	; 0x64
 80009f0:	d809      	bhi.n	8000a06 <controllerTask+0x182>
 80009f2:	8afb      	ldrh	r3, [r7, #22]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d006      	beq.n	8000a06 <controllerTask+0x182>
			{
				option = 1000 / update_text;
 80009f8:	897b      	ldrh	r3, [r7, #10]
 80009fa:	461a      	mov	r2, r3
 80009fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a00:	fb93 f3f2 	sdiv	r3, r3, r2
 8000a04:	833b      	strh	r3, [r7, #24]
			}

		}
		if(FS_MODE)
 8000a06:	7ffb      	ldrb	r3, [r7, #31]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d028      	beq.n	8000a5e <controllerTask+0x1da>
		{
			count_time =  __HAL_TIM_GET_COUNTER(&htim2);
 8000a0c:	4b66      	ldr	r3, [pc, #408]	; (8000ba8 <controllerTask+0x324>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a12:	81fb      	strh	r3, [r7, #14]

			if(!(count_time % 1000))
 8000a14:	89fb      	ldrh	r3, [r7, #14]
 8000a16:	4a69      	ldr	r2, [pc, #420]	; (8000bbc <controllerTask+0x338>)
 8000a18:	fba2 1203 	umull	r1, r2, r2, r3
 8000a1c:	0992      	lsrs	r2, r2, #6
 8000a1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a22:	fb01 f202 	mul.w	r2, r1, r2
 8000a26:	1a9b      	subs	r3, r3, r2
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d117      	bne.n	8000a5e <controllerTask+0x1da>
			{
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000a2e:	2140      	movs	r1, #64	; 0x40
 8000a30:	4860      	ldr	r0, [pc, #384]	; (8000bb4 <controllerTask+0x330>)
 8000a32:	f000 fd1f 	bl	8001474 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8000a36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3a:	485f      	ldr	r0, [pc, #380]	; (8000bb8 <controllerTask+0x334>)
 8000a3c:	f000 fd1a 	bl	8001474 <HAL_GPIO_TogglePin>
				while(!(__HAL_TIM_GET_COUNTER(&htim2) % 1000)){}
 8000a40:	bf00      	nop
 8000a42:	4b59      	ldr	r3, [pc, #356]	; (8000ba8 <controllerTask+0x324>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a48:	4b5c      	ldr	r3, [pc, #368]	; (8000bbc <controllerTask+0x338>)
 8000a4a:	fba3 1302 	umull	r1, r3, r3, r2
 8000a4e:	099b      	lsrs	r3, r3, #6
 8000a50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a54:	fb01 f303 	mul.w	r3, r1, r3
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d0f1      	beq.n	8000a42 <controllerTask+0x1be>
			}
		}

		if(SC_MODE)
 8000a5e:	7fbb      	ldrb	r3, [r7, #30]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	f000 80c3 	beq.w	8000bec <controllerTask+0x368>
		{
			count_time =  __HAL_TIM_GET_COUNTER(&htim2);
 8000a66:	4b50      	ldr	r3, [pc, #320]	; (8000ba8 <controllerTask+0x324>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a6c:	81fb      	strh	r3, [r7, #14]

			if(!(count_time % option))
 8000a6e:	89fb      	ldrh	r3, [r7, #14]
 8000a70:	8b3a      	ldrh	r2, [r7, #24]
 8000a72:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a76:	fb02 f201 	mul.w	r2, r2, r1
 8000a7a:	1a9b      	subs	r3, r3, r2
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f040 80b4 	bne.w	8000bec <controllerTask+0x368>
			{
				while(!(__HAL_TIM_GET_COUNTER(&htim2) % option)){}
 8000a84:	bf00      	nop
 8000a86:	4b48      	ldr	r3, [pc, #288]	; (8000ba8 <controllerTask+0x324>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a8c:	8b3a      	ldrh	r2, [r7, #24]
 8000a8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a92:	fb02 f201 	mul.w	r2, r2, r1
 8000a96:	1a9b      	subs	r3, r3, r2
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d0f4      	beq.n	8000a86 <controllerTask+0x202>
				state_option++;
 8000a9c:	8b7b      	ldrh	r3, [r7, #26]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	837b      	strh	r3, [r7, #26]

				if(state_option == 1)
 8000aa2:	8b7b      	ldrh	r3, [r7, #26]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d125      	bne.n	8000af4 <controllerTask+0x270>
				{
					states = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	83bb      	strh	r3, [r7, #28]

					//ON - primary green, primary walk, secondary red
					//OFF - secondary green, secondary yellow, secondary walk
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab2:	4840      	ldr	r0, [pc, #256]	; (8000bb4 <controllerTask+0x330>)
 8000ab4:	f000 fcc6 	bl	8001444 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000abe:	483d      	ldr	r0, [pc, #244]	; (8000bb4 <controllerTask+0x330>)
 8000ac0:	f000 fcc0 	bl	8001444 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aca:	483b      	ldr	r0, [pc, #236]	; (8000bb8 <controllerTask+0x334>)
 8000acc:	f000 fcba 	bl	8001444 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2140      	movs	r1, #64	; 0x40
 8000ad4:	4837      	ldr	r0, [pc, #220]	; (8000bb4 <controllerTask+0x330>)
 8000ad6:	f000 fcb5 	bl	8001444 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae0:	4835      	ldr	r0, [pc, #212]	; (8000bb8 <controllerTask+0x334>)
 8000ae2:	f000 fcaf 	bl	8001444 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aec:	4832      	ldr	r0, [pc, #200]	; (8000bb8 <controllerTask+0x334>)
 8000aee:	f000 fca9 	bl	8001444 <HAL_GPIO_WritePin>
 8000af2:	e06a      	b.n	8000bca <controllerTask+0x346>
				}

				else if(state_option == 141)
 8000af4:	8b7b      	ldrh	r3, [r7, #26]
 8000af6:	2b8d      	cmp	r3, #141	; 0x8d
 8000af8:	d102      	bne.n	8000b00 <controllerTask+0x27c>
				{
					states = 1;
 8000afa:	2301      	movs	r3, #1
 8000afc:	83bb      	strh	r3, [r7, #28]
 8000afe:	e064      	b.n	8000bca <controllerTask+0x346>
				}

				else if (state_option == 167)
 8000b00:	8b7b      	ldrh	r3, [r7, #26]
 8000b02:	2ba7      	cmp	r3, #167	; 0xa7
 8000b04:	d113      	bne.n	8000b2e <controllerTask+0x2aa>
				{
					states = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	83bb      	strh	r3, [r7, #28]

					//ON - primary yellow
					//OFF - primary green, primary walk
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2180      	movs	r1, #128	; 0x80
 8000b0e:	4829      	ldr	r0, [pc, #164]	; (8000bb4 <controllerTask+0x330>)
 8000b10:	f000 fc98 	bl	8001444 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b1a:	4826      	ldr	r0, [pc, #152]	; (8000bb4 <controllerTask+0x330>)
 8000b1c:	f000 fc92 	bl	8001444 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b26:	4823      	ldr	r0, [pc, #140]	; (8000bb4 <controllerTask+0x330>)
 8000b28:	f000 fc8c 	bl	8001444 <HAL_GPIO_WritePin>
 8000b2c:	e04d      	b.n	8000bca <controllerTask+0x346>
				}

				else if (state_option == 174)
 8000b2e:	8b7b      	ldrh	r3, [r7, #26]
 8000b30:	2bae      	cmp	r3, #174	; 0xae
 8000b32:	d10a      	bne.n	8000b4a <controllerTask+0x2c6>
				{
					//ON - primary red
					//OFF - primary yellow
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2140      	movs	r1, #64	; 0x40
 8000b38:	481e      	ldr	r0, [pc, #120]	; (8000bb4 <controllerTask+0x330>)
 8000b3a:	f000 fc83 	bl	8001444 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2180      	movs	r1, #128	; 0x80
 8000b42:	481c      	ldr	r0, [pc, #112]	; (8000bb4 <controllerTask+0x330>)
 8000b44:	f000 fc7e 	bl	8001444 <HAL_GPIO_WritePin>
 8000b48:	e03f      	b.n	8000bca <controllerTask+0x346>
				}

				else if (state_option == 186)
 8000b4a:	8b7b      	ldrh	r3, [r7, #26]
 8000b4c:	2bba      	cmp	r3, #186	; 0xba
 8000b4e:	d112      	bne.n	8000b76 <controllerTask+0x2f2>
				{
					//ON - secondary green, secondary walk
					//OFF - secondary red
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b56:	4818      	ldr	r0, [pc, #96]	; (8000bb8 <controllerTask+0x334>)
 8000b58:	f000 fc74 	bl	8001444 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b62:	4815      	ldr	r0, [pc, #84]	; (8000bb8 <controllerTask+0x334>)
 8000b64:	f000 fc6e 	bl	8001444 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b6e:	4812      	ldr	r0, [pc, #72]	; (8000bb8 <controllerTask+0x334>)
 8000b70:	f000 fc68 	bl	8001444 <HAL_GPIO_WritePin>
 8000b74:	e029      	b.n	8000bca <controllerTask+0x346>
				}

				else if(state_option == 226)
 8000b76:	8b7b      	ldrh	r3, [r7, #26]
 8000b78:	2be2      	cmp	r3, #226	; 0xe2
 8000b7a:	d102      	bne.n	8000b82 <controllerTask+0x2fe>
				{
					states = 2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	83bb      	strh	r3, [r7, #28]
 8000b80:	e023      	b.n	8000bca <controllerTask+0x346>
				}

				else if(state_option == 242)
 8000b82:	8b7b      	ldrh	r3, [r7, #26]
 8000b84:	2bf2      	cmp	r3, #242	; 0xf2
 8000b86:	d11b      	bne.n	8000bc0 <controllerTask+0x33c>
				{
					states = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	83bb      	strh	r3, [r7, #28]

					//ON - secondary yellow
					//OFF - secondary green
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b92:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <controllerTask+0x334>)
 8000b94:	f000 fc56 	bl	8001444 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b9e:	4806      	ldr	r0, [pc, #24]	; (8000bb8 <controllerTask+0x334>)
 8000ba0:	f000 fc50 	bl	8001444 <HAL_GPIO_WritePin>
 8000ba4:	e011      	b.n	8000bca <controllerTask+0x346>
 8000ba6:	bf00      	nop
 8000ba8:	20001c40 	.word	0x20001c40
 8000bac:	20001bbc 	.word	0x20001bbc
 8000bb0:	20001bb4 	.word	0x20001bb4
 8000bb4:	40010800 	.word	0x40010800
 8000bb8:	40010c00 	.word	0x40010c00
 8000bbc:	10624dd3 	.word	0x10624dd3
				}

				else if(state_option == 249)
 8000bc0:	8b7b      	ldrh	r3, [r7, #26]
 8000bc2:	2bf9      	cmp	r3, #249	; 0xf9
 8000bc4:	d101      	bne.n	8000bca <controllerTask+0x346>
				{
					state_option = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	837b      	strh	r3, [r7, #26]
				}

				if (states == 1)
 8000bca:	8bbb      	ldrh	r3, [r7, #28]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d105      	bne.n	8000bdc <controllerTask+0x358>
				{
					//TOGGLE - primary walk
					HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000bd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd4:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <controllerTask+0x370>)
 8000bd6:	f000 fc4d 	bl	8001474 <HAL_GPIO_TogglePin>
 8000bda:	e007      	b.n	8000bec <controllerTask+0x368>
				}

				else if (states == 2)
 8000bdc:	8bbb      	ldrh	r3, [r7, #28]
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d104      	bne.n	8000bec <controllerTask+0x368>
				{
					//TOGGLE - secondary walk
					HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8000be2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000be6:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <controllerTask+0x374>)
 8000be8:	f000 fc44 	bl	8001474 <HAL_GPIO_TogglePin>
				}
			}
		}

	    osDelay(50);
 8000bec:	2032      	movs	r0, #50	; 0x32
 8000bee:	f002 f845 	bl	8002c7c <osDelay>
		status = osMessageQueueGet(CLI_QueueHandle, &update_text, NULL, 0U );
 8000bf2:	e669      	b.n	80008c8 <controllerTask+0x44>
 8000bf4:	40010800 	.word	0x40010800
 8000bf8:	40010c00 	.word	0x40010c00

08000bfc <Callback01>:
  /* USER CODE END controllerTask */
}

/* Callback01 function */
void Callback01(void *argument)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);

  /* USER CODE END Callback01 */
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
	...

08000c10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d101      	bne.n	8000c26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c22:	f000 f997 	bl	8000f54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40000800 	.word	0x40000800

08000c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <HAL_MspInit+0x5c>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	4a14      	ldr	r2, [pc, #80]	; (8000c9c <HAL_MspInit+0x5c>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6193      	str	r3, [r2, #24]
 8000c52:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_MspInit+0x5c>)
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <HAL_MspInit+0x5c>)
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <HAL_MspInit+0x5c>)
 8000c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c68:	61d3      	str	r3, [r2, #28]
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <HAL_MspInit+0x5c>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c76:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <HAL_MspInit+0x60>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <HAL_MspInit+0x60>)
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c92:	bf00      	nop
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40010000 	.word	0x40010000

08000ca4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cb4:	d10b      	bne.n	8000cce <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_TIM_Base_MspInit+0x34>)
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <HAL_TIM_Base_MspInit+0x34>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	61d3      	str	r3, [r2, #28]
 8000cc2:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <HAL_TIM_Base_MspInit+0x34>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr
 8000cd8:	40021000 	.word	0x40021000

08000cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0310 	add.w	r3, r7, #16
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a1c      	ldr	r2, [pc, #112]	; (8000d68 <HAL_UART_MspInit+0x8c>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d131      	bne.n	8000d60 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <HAL_UART_MspInit+0x90>)
 8000cfe:	69db      	ldr	r3, [r3, #28]
 8000d00:	4a1a      	ldr	r2, [pc, #104]	; (8000d6c <HAL_UART_MspInit+0x90>)
 8000d02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d06:	61d3      	str	r3, [r2, #28]
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <HAL_UART_MspInit+0x90>)
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_UART_MspInit+0x90>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <HAL_UART_MspInit+0x90>)
 8000d1a:	f043 0308 	orr.w	r3, r3, #8
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_UART_MspInit+0x90>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f003 0308 	and.w	r3, r3, #8
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	f107 0310 	add.w	r3, r7, #16
 8000d3e:	4619      	mov	r1, r3
 8000d40:	480b      	ldr	r0, [pc, #44]	; (8000d70 <HAL_UART_MspInit+0x94>)
 8000d42:	f000 fa25 	bl	8001190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <HAL_UART_MspInit+0x94>)
 8000d5c:	f000 fa18 	bl	8001190 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d60:	bf00      	nop
 8000d62:	3720      	adds	r7, #32
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40004800 	.word	0x40004800
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010c00 	.word	0x40010c00

08000d74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08c      	sub	sp, #48	; 0x30
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000d84:	2200      	movs	r2, #0
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	201e      	movs	r0, #30
 8000d8a:	f000 f9d6 	bl	800113a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d8e:	201e      	movs	r0, #30
 8000d90:	f000 f9ef 	bl	8001172 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000d94:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <HAL_InitTick+0x9c>)
 8000d96:	69db      	ldr	r3, [r3, #28]
 8000d98:	4a1d      	ldr	r2, [pc, #116]	; (8000e10 <HAL_InitTick+0x9c>)
 8000d9a:	f043 0304 	orr.w	r3, r3, #4
 8000d9e:	61d3      	str	r3, [r2, #28]
 8000da0:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <HAL_InitTick+0x9c>)
 8000da2:	69db      	ldr	r3, [r3, #28]
 8000da4:	f003 0304 	and.w	r3, r3, #4
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dac:	f107 0210 	add.w	r2, r7, #16
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4611      	mov	r1, r2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 ff74 	bl	8001ca4 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dbc:	f000 ff4a 	bl	8001c54 <HAL_RCC_GetPCLK1Freq>
 8000dc0:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc4:	4a13      	ldr	r2, [pc, #76]	; (8000e14 <HAL_InitTick+0xa0>)
 8000dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dca:	0c9b      	lsrs	r3, r3, #18
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <HAL_InitTick+0xa4>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	; (8000e1c <HAL_InitTick+0xa8>)
 8000dd4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <HAL_InitTick+0xa4>)
 8000dd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ddc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000dde:	4a0e      	ldr	r2, [pc, #56]	; (8000e18 <HAL_InitTick+0xa4>)
 8000de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <HAL_InitTick+0xa4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <HAL_InitTick+0xa4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000df0:	4809      	ldr	r0, [pc, #36]	; (8000e18 <HAL_InitTick+0xa4>)
 8000df2:	f000 ffa5 	bl	8001d40 <HAL_TIM_Base_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d104      	bne.n	8000e06 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000dfc:	4806      	ldr	r0, [pc, #24]	; (8000e18 <HAL_InitTick+0xa4>)
 8000dfe:	f001 f839 	bl	8001e74 <HAL_TIM_Base_Start_IT>
 8000e02:	4603      	mov	r3, r0
 8000e04:	e000      	b.n	8000e08 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3730      	adds	r7, #48	; 0x30
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40021000 	.word	0x40021000
 8000e14:	431bde83 	.word	0x431bde83
 8000e18:	20001c88 	.word	0x20001c88
 8000e1c:	40000800 	.word	0x40000800

08000e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr

08000e2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <HardFault_Handler+0x4>

08000e32 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <MemManage_Handler+0x4>

08000e38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <BusFault_Handler+0x4>

08000e3e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <UsageFault_Handler+0x4>

08000e44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <TIM4_IRQHandler+0x10>)
 8000e56:	f001 f85f 	bl	8001f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20001c88 	.word	0x20001c88

08000e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e6c:	4a14      	ldr	r2, [pc, #80]	; (8000ec0 <_sbrk+0x5c>)
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <_sbrk+0x60>)
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <_sbrk+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d102      	bne.n	8000e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <_sbrk+0x64>)
 8000e82:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <_sbrk+0x68>)
 8000e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d207      	bcs.n	8000ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e94:	f004 fdee 	bl	8005a74 <__errno>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	230c      	movs	r3, #12
 8000e9c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ea2:	e009      	b.n	8000eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <_sbrk+0x64>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <_sbrk+0x64>)
 8000eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20005000 	.word	0x20005000
 8000ec4:	00000400 	.word	0x00000400
 8000ec8:	20000268 	.word	0x20000268
 8000ecc:	20001d18 	.word	0x20001d18

08000ed0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000edc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ede:	e003      	b.n	8000ee8 <LoopCopyDataInit>

08000ee0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ee2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ee4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ee6:	3104      	adds	r1, #4

08000ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ee8:	480a      	ldr	r0, [pc, #40]	; (8000f14 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000eec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000eee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ef0:	d3f6      	bcc.n	8000ee0 <CopyDataInit>
  ldr r2, =_sbss
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ef4:	e002      	b.n	8000efc <LoopFillZerobss>

08000ef6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ef8:	f842 3b04 	str.w	r3, [r2], #4

08000efc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000efe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f00:	d3f9      	bcc.n	8000ef6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f02:	f7ff ffe5 	bl	8000ed0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f06:	f004 fdbb 	bl	8005a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f0a:	f7ff f933 	bl	8000174 <main>
  bx lr
 8000f0e:	4770      	bx	lr
  ldr r3, =_sidata
 8000f10:	0800681c 	.word	0x0800681c
  ldr r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f18:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 8000f1c:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 8000f20:	20001d18 	.word	0x20001d18

08000f24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f24:	e7fe      	b.n	8000f24 <ADC1_2_IRQHandler>
	...

08000f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <HAL_Init+0x28>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a07      	ldr	r2, [pc, #28]	; (8000f50 <HAL_Init+0x28>)
 8000f32:	f043 0310 	orr.w	r3, r3, #16
 8000f36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f000 f8f3 	bl	8001124 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f7ff ff18 	bl	8000d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f44:	f7ff fe7c 	bl	8000c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40022000 	.word	0x40022000

08000f54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <HAL_IncTick+0x1c>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <HAL_IncTick+0x20>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	4a03      	ldr	r2, [pc, #12]	; (8000f74 <HAL_IncTick+0x20>)
 8000f66:	6013      	str	r3, [r2, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	2000000c 	.word	0x2000000c
 8000f74:	20001cd0 	.word	0x20001cd0

08000f78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b02      	ldr	r3, [pc, #8]	; (8000f88 <HAL_GetTick+0x10>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	20001cd0 	.word	0x20001cd0

08000f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff fff0 	bl	8000f78 <HAL_GetTick>
 8000f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fa4:	d005      	beq.n	8000fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <HAL_Delay+0x40>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fb2:	bf00      	nop
 8000fb4:	f7ff ffe0 	bl	8000f78 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d8f7      	bhi.n	8000fb4 <HAL_Delay+0x28>
  {
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	2000000c 	.word	0x2000000c

08000fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fec:	4013      	ands	r3, r2
 8000fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001002:	4a04      	ldr	r2, [pc, #16]	; (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	60d3      	str	r3, [r2, #12]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <__NVIC_GetPriorityGrouping+0x18>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	f003 0307 	and.w	r3, r3, #7
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	2b00      	cmp	r3, #0
 8001044:	db0b      	blt.n	800105e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	f003 021f 	and.w	r2, r3, #31
 800104c:	4906      	ldr	r1, [pc, #24]	; (8001068 <__NVIC_EnableIRQ+0x34>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	095b      	lsrs	r3, r3, #5
 8001054:	2001      	movs	r0, #1
 8001056:	fa00 f202 	lsl.w	r2, r0, r2
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	e000e100 	.word	0xe000e100

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	; (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	; (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	bf28      	it	cs
 80010de:	2304      	movcs	r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d902      	bls.n	80010f0 <NVIC_EncodePriority+0x30>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3b03      	subs	r3, #3
 80010ee:	e000      	b.n	80010f2 <NVIC_EncodePriority+0x32>
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001108:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43d9      	mvns	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	; 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff4f 	bl	8000fd0 <__NVIC_SetPriorityGrouping>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800114c:	f7ff ff64 	bl	8001018 <__NVIC_GetPriorityGrouping>
 8001150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	6978      	ldr	r0, [r7, #20]
 8001158:	f7ff ffb2 	bl	80010c0 <NVIC_EncodePriority>
 800115c:	4602      	mov	r2, r0
 800115e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001162:	4611      	mov	r1, r2
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff81 	bl	800106c <__NVIC_SetPriority>
}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff57 	bl	8001034 <__NVIC_EnableIRQ>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b08b      	sub	sp, #44	; 0x2c
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800119a:	2300      	movs	r3, #0
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800119e:	2300      	movs	r3, #0
 80011a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a2:	e127      	b.n	80013f4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011a4:	2201      	movs	r2, #1
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	69fa      	ldr	r2, [r7, #28]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	429a      	cmp	r2, r3
 80011be:	f040 8116 	bne.w	80013ee <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b12      	cmp	r3, #18
 80011c8:	d034      	beq.n	8001234 <HAL_GPIO_Init+0xa4>
 80011ca:	2b12      	cmp	r3, #18
 80011cc:	d80d      	bhi.n	80011ea <HAL_GPIO_Init+0x5a>
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d02b      	beq.n	800122a <HAL_GPIO_Init+0x9a>
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d804      	bhi.n	80011e0 <HAL_GPIO_Init+0x50>
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d031      	beq.n	800123e <HAL_GPIO_Init+0xae>
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d01c      	beq.n	8001218 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011de:	e048      	b.n	8001272 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	d043      	beq.n	800126c <HAL_GPIO_Init+0xdc>
 80011e4:	2b11      	cmp	r3, #17
 80011e6:	d01b      	beq.n	8001220 <HAL_GPIO_Init+0x90>
          break;
 80011e8:	e043      	b.n	8001272 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011ea:	4a89      	ldr	r2, [pc, #548]	; (8001410 <HAL_GPIO_Init+0x280>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d026      	beq.n	800123e <HAL_GPIO_Init+0xae>
 80011f0:	4a87      	ldr	r2, [pc, #540]	; (8001410 <HAL_GPIO_Init+0x280>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d806      	bhi.n	8001204 <HAL_GPIO_Init+0x74>
 80011f6:	4a87      	ldr	r2, [pc, #540]	; (8001414 <HAL_GPIO_Init+0x284>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d020      	beq.n	800123e <HAL_GPIO_Init+0xae>
 80011fc:	4a86      	ldr	r2, [pc, #536]	; (8001418 <HAL_GPIO_Init+0x288>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d01d      	beq.n	800123e <HAL_GPIO_Init+0xae>
          break;
 8001202:	e036      	b.n	8001272 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001204:	4a85      	ldr	r2, [pc, #532]	; (800141c <HAL_GPIO_Init+0x28c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d019      	beq.n	800123e <HAL_GPIO_Init+0xae>
 800120a:	4a85      	ldr	r2, [pc, #532]	; (8001420 <HAL_GPIO_Init+0x290>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d016      	beq.n	800123e <HAL_GPIO_Init+0xae>
 8001210:	4a84      	ldr	r2, [pc, #528]	; (8001424 <HAL_GPIO_Init+0x294>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d013      	beq.n	800123e <HAL_GPIO_Init+0xae>
          break;
 8001216:	e02c      	b.n	8001272 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	623b      	str	r3, [r7, #32]
          break;
 800121e:	e028      	b.n	8001272 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	3304      	adds	r3, #4
 8001226:	623b      	str	r3, [r7, #32]
          break;
 8001228:	e023      	b.n	8001272 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	3308      	adds	r3, #8
 8001230:	623b      	str	r3, [r7, #32]
          break;
 8001232:	e01e      	b.n	8001272 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	330c      	adds	r3, #12
 800123a:	623b      	str	r3, [r7, #32]
          break;
 800123c:	e019      	b.n	8001272 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d102      	bne.n	800124c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001246:	2304      	movs	r3, #4
 8001248:	623b      	str	r3, [r7, #32]
          break;
 800124a:	e012      	b.n	8001272 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d105      	bne.n	8001260 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001254:	2308      	movs	r3, #8
 8001256:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69fa      	ldr	r2, [r7, #28]
 800125c:	611a      	str	r2, [r3, #16]
          break;
 800125e:	e008      	b.n	8001272 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001260:	2308      	movs	r3, #8
 8001262:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69fa      	ldr	r2, [r7, #28]
 8001268:	615a      	str	r2, [r3, #20]
          break;
 800126a:	e002      	b.n	8001272 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800126c:	2300      	movs	r3, #0
 800126e:	623b      	str	r3, [r7, #32]
          break;
 8001270:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	2bff      	cmp	r3, #255	; 0xff
 8001276:	d801      	bhi.n	800127c <HAL_GPIO_Init+0xec>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	e001      	b.n	8001280 <HAL_GPIO_Init+0xf0>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3304      	adds	r3, #4
 8001280:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	2bff      	cmp	r3, #255	; 0xff
 8001286:	d802      	bhi.n	800128e <HAL_GPIO_Init+0xfe>
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	e002      	b.n	8001294 <HAL_GPIO_Init+0x104>
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	3b08      	subs	r3, #8
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	210f      	movs	r1, #15
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	401a      	ands	r2, r3
 80012a6:	6a39      	ldr	r1, [r7, #32]
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	431a      	orrs	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 8096 	beq.w	80013ee <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012c2:	4b59      	ldr	r3, [pc, #356]	; (8001428 <HAL_GPIO_Init+0x298>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	4a58      	ldr	r2, [pc, #352]	; (8001428 <HAL_GPIO_Init+0x298>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6193      	str	r3, [r2, #24]
 80012ce:	4b56      	ldr	r3, [pc, #344]	; (8001428 <HAL_GPIO_Init+0x298>)
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012da:	4a54      	ldr	r2, [pc, #336]	; (800142c <HAL_GPIO_Init+0x29c>)
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	089b      	lsrs	r3, r3, #2
 80012e0:	3302      	adds	r3, #2
 80012e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	220f      	movs	r2, #15
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	4013      	ands	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4b      	ldr	r2, [pc, #300]	; (8001430 <HAL_GPIO_Init+0x2a0>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d013      	beq.n	800132e <HAL_GPIO_Init+0x19e>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4a      	ldr	r2, [pc, #296]	; (8001434 <HAL_GPIO_Init+0x2a4>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d00d      	beq.n	800132a <HAL_GPIO_Init+0x19a>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a49      	ldr	r2, [pc, #292]	; (8001438 <HAL_GPIO_Init+0x2a8>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d007      	beq.n	8001326 <HAL_GPIO_Init+0x196>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a48      	ldr	r2, [pc, #288]	; (800143c <HAL_GPIO_Init+0x2ac>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d101      	bne.n	8001322 <HAL_GPIO_Init+0x192>
 800131e:	2303      	movs	r3, #3
 8001320:	e006      	b.n	8001330 <HAL_GPIO_Init+0x1a0>
 8001322:	2304      	movs	r3, #4
 8001324:	e004      	b.n	8001330 <HAL_GPIO_Init+0x1a0>
 8001326:	2302      	movs	r3, #2
 8001328:	e002      	b.n	8001330 <HAL_GPIO_Init+0x1a0>
 800132a:	2301      	movs	r3, #1
 800132c:	e000      	b.n	8001330 <HAL_GPIO_Init+0x1a0>
 800132e:	2300      	movs	r3, #0
 8001330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001332:	f002 0203 	and.w	r2, r2, #3
 8001336:	0092      	lsls	r2, r2, #2
 8001338:	4093      	lsls	r3, r2
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	4313      	orrs	r3, r2
 800133e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001340:	493a      	ldr	r1, [pc, #232]	; (800142c <HAL_GPIO_Init+0x29c>)
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	089b      	lsrs	r3, r3, #2
 8001346:	3302      	adds	r3, #2
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d006      	beq.n	8001368 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800135a:	4b39      	ldr	r3, [pc, #228]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4938      	ldr	r1, [pc, #224]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
 8001366:	e006      	b.n	8001376 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001368:	4b35      	ldr	r3, [pc, #212]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	43db      	mvns	r3, r3
 8001370:	4933      	ldr	r1, [pc, #204]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 8001372:	4013      	ands	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d006      	beq.n	8001390 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001382:	4b2f      	ldr	r3, [pc, #188]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	492e      	ldr	r1, [pc, #184]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	604b      	str	r3, [r1, #4]
 800138e:	e006      	b.n	800139e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001390:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	43db      	mvns	r3, r3
 8001398:	4929      	ldr	r1, [pc, #164]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 800139a:	4013      	ands	r3, r2
 800139c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d006      	beq.n	80013b8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013aa:	4b25      	ldr	r3, [pc, #148]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	4924      	ldr	r1, [pc, #144]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	608b      	str	r3, [r1, #8]
 80013b6:	e006      	b.n	80013c6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013b8:	4b21      	ldr	r3, [pc, #132]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	43db      	mvns	r3, r3
 80013c0:	491f      	ldr	r1, [pc, #124]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 80013c2:	4013      	ands	r3, r2
 80013c4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d006      	beq.n	80013e0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013d2:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	491a      	ldr	r1, [pc, #104]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	60cb      	str	r3, [r1, #12]
 80013de:	e006      	b.n	80013ee <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013e0:	4b17      	ldr	r3, [pc, #92]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 80013e2:	68da      	ldr	r2, [r3, #12]
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	4915      	ldr	r1, [pc, #84]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 80013ea:	4013      	ands	r3, r2
 80013ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	3301      	adds	r3, #1
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	fa22 f303 	lsr.w	r3, r2, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f47f aed0 	bne.w	80011a4 <HAL_GPIO_Init+0x14>
  }
}
 8001404:	bf00      	nop
 8001406:	372c      	adds	r7, #44	; 0x2c
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	10210000 	.word	0x10210000
 8001414:	10110000 	.word	0x10110000
 8001418:	10120000 	.word	0x10120000
 800141c:	10310000 	.word	0x10310000
 8001420:	10320000 	.word	0x10320000
 8001424:	10220000 	.word	0x10220000
 8001428:	40021000 	.word	0x40021000
 800142c:	40010000 	.word	0x40010000
 8001430:	40010800 	.word	0x40010800
 8001434:	40010c00 	.word	0x40010c00
 8001438:	40011000 	.word	0x40011000
 800143c:	40011400 	.word	0x40011400
 8001440:	40010400 	.word	0x40010400

08001444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
 8001450:	4613      	mov	r3, r2
 8001452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001454:	787b      	ldrb	r3, [r7, #1]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001460:	e003      	b.n	800146a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001462:	887b      	ldrh	r3, [r7, #2]
 8001464:	041a      	lsls	r2, r3, #16
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	611a      	str	r2, [r3, #16]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4013      	ands	r3, r2
 800148c:	041a      	lsls	r2, r3, #16
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	43d9      	mvns	r1, r3
 8001492:	887b      	ldrh	r3, [r7, #2]
 8001494:	400b      	ands	r3, r1
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	611a      	str	r2, [r3, #16]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e26c      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 8087 	beq.w	80015d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014c8:	4b92      	ldr	r3, [pc, #584]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 030c 	and.w	r3, r3, #12
 80014d0:	2b04      	cmp	r3, #4
 80014d2:	d00c      	beq.n	80014ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014d4:	4b8f      	ldr	r3, [pc, #572]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 030c 	and.w	r3, r3, #12
 80014dc:	2b08      	cmp	r3, #8
 80014de:	d112      	bne.n	8001506 <HAL_RCC_OscConfig+0x5e>
 80014e0:	4b8c      	ldr	r3, [pc, #560]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ec:	d10b      	bne.n	8001506 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ee:	4b89      	ldr	r3, [pc, #548]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d06c      	beq.n	80015d4 <HAL_RCC_OscConfig+0x12c>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d168      	bne.n	80015d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e246      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150e:	d106      	bne.n	800151e <HAL_RCC_OscConfig+0x76>
 8001510:	4b80      	ldr	r3, [pc, #512]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a7f      	ldr	r2, [pc, #508]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	e02e      	b.n	800157c <HAL_RCC_OscConfig+0xd4>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10c      	bne.n	8001540 <HAL_RCC_OscConfig+0x98>
 8001526:	4b7b      	ldr	r3, [pc, #492]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a7a      	ldr	r2, [pc, #488]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 800152c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	4b78      	ldr	r3, [pc, #480]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a77      	ldr	r2, [pc, #476]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001538:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	e01d      	b.n	800157c <HAL_RCC_OscConfig+0xd4>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001548:	d10c      	bne.n	8001564 <HAL_RCC_OscConfig+0xbc>
 800154a:	4b72      	ldr	r3, [pc, #456]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a71      	ldr	r2, [pc, #452]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	4b6f      	ldr	r3, [pc, #444]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a6e      	ldr	r2, [pc, #440]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 800155c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	e00b      	b.n	800157c <HAL_RCC_OscConfig+0xd4>
 8001564:	4b6b      	ldr	r3, [pc, #428]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a6a      	ldr	r2, [pc, #424]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 800156a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	4b68      	ldr	r3, [pc, #416]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a67      	ldr	r2, [pc, #412]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d013      	beq.n	80015ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff fcf8 	bl	8000f78 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff fcf4 	bl	8000f78 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	; 0x64
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e1fa      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159e:	4b5d      	ldr	r3, [pc, #372]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0xe4>
 80015aa:	e014      	b.n	80015d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fce4 	bl	8000f78 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b4:	f7ff fce0 	bl	8000f78 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b64      	cmp	r3, #100	; 0x64
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e1e6      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c6:	4b53      	ldr	r3, [pc, #332]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x10c>
 80015d2:	e000      	b.n	80015d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d063      	beq.n	80016aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015e2:	4b4c      	ldr	r3, [pc, #304]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00b      	beq.n	8001606 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015ee:	4b49      	ldr	r3, [pc, #292]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 030c 	and.w	r3, r3, #12
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d11c      	bne.n	8001634 <HAL_RCC_OscConfig+0x18c>
 80015fa:	4b46      	ldr	r3, [pc, #280]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d116      	bne.n	8001634 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001606:	4b43      	ldr	r3, [pc, #268]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <HAL_RCC_OscConfig+0x176>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d001      	beq.n	800161e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e1ba      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161e:	4b3d      	ldr	r3, [pc, #244]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4939      	ldr	r1, [pc, #228]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001632:	e03a      	b.n	80016aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d020      	beq.n	800167e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800163c:	4b36      	ldr	r3, [pc, #216]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff fc99 	bl	8000f78 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164a:	f7ff fc95 	bl	8000f78 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e19b      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165c:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001668:	4b2a      	ldr	r3, [pc, #168]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4927      	ldr	r1, [pc, #156]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001678:	4313      	orrs	r3, r2
 800167a:	600b      	str	r3, [r1, #0]
 800167c:	e015      	b.n	80016aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167e:	4b26      	ldr	r3, [pc, #152]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fc78 	bl	8000f78 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800168c:	f7ff fc74 	bl	8000f78 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e17a      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169e:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d03a      	beq.n	800172c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d019      	beq.n	80016f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016be:	4b17      	ldr	r3, [pc, #92]	; (800171c <HAL_RCC_OscConfig+0x274>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c4:	f7ff fc58 	bl	8000f78 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016cc:	f7ff fc54 	bl	8000f78 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e15a      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016ea:	2001      	movs	r0, #1
 80016ec:	f000 fb0a 	bl	8001d04 <RCC_Delay>
 80016f0:	e01c      	b.n	800172c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f2:	4b0a      	ldr	r3, [pc, #40]	; (800171c <HAL_RCC_OscConfig+0x274>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f8:	f7ff fc3e 	bl	8000f78 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016fe:	e00f      	b.n	8001720 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001700:	f7ff fc3a 	bl	8000f78 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d908      	bls.n	8001720 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e140      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
 8001712:	bf00      	nop
 8001714:	40021000 	.word	0x40021000
 8001718:	42420000 	.word	0x42420000
 800171c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001720:	4b9e      	ldr	r3, [pc, #632]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1e9      	bne.n	8001700 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 80a6 	beq.w	8001886 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800173e:	4b97      	ldr	r3, [pc, #604]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10d      	bne.n	8001766 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	4b94      	ldr	r3, [pc, #592]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	4a93      	ldr	r2, [pc, #588]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 8001750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001754:	61d3      	str	r3, [r2, #28]
 8001756:	4b91      	ldr	r3, [pc, #580]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001762:	2301      	movs	r3, #1
 8001764:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001766:	4b8e      	ldr	r3, [pc, #568]	; (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176e:	2b00      	cmp	r3, #0
 8001770:	d118      	bne.n	80017a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001772:	4b8b      	ldr	r3, [pc, #556]	; (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a8a      	ldr	r2, [pc, #552]	; (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 8001778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177e:	f7ff fbfb 	bl	8000f78 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001786:	f7ff fbf7 	bl	8000f78 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b64      	cmp	r3, #100	; 0x64
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e0fd      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001798:	4b81      	ldr	r3, [pc, #516]	; (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0f0      	beq.n	8001786 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d106      	bne.n	80017ba <HAL_RCC_OscConfig+0x312>
 80017ac:	4b7b      	ldr	r3, [pc, #492]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	4a7a      	ldr	r2, [pc, #488]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6213      	str	r3, [r2, #32]
 80017b8:	e02d      	b.n	8001816 <HAL_RCC_OscConfig+0x36e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10c      	bne.n	80017dc <HAL_RCC_OscConfig+0x334>
 80017c2:	4b76      	ldr	r3, [pc, #472]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	4a75      	ldr	r2, [pc, #468]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80017c8:	f023 0301 	bic.w	r3, r3, #1
 80017cc:	6213      	str	r3, [r2, #32]
 80017ce:	4b73      	ldr	r3, [pc, #460]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	4a72      	ldr	r2, [pc, #456]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80017d4:	f023 0304 	bic.w	r3, r3, #4
 80017d8:	6213      	str	r3, [r2, #32]
 80017da:	e01c      	b.n	8001816 <HAL_RCC_OscConfig+0x36e>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	2b05      	cmp	r3, #5
 80017e2:	d10c      	bne.n	80017fe <HAL_RCC_OscConfig+0x356>
 80017e4:	4b6d      	ldr	r3, [pc, #436]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	4a6c      	ldr	r2, [pc, #432]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	6213      	str	r3, [r2, #32]
 80017f0:	4b6a      	ldr	r3, [pc, #424]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	4a69      	ldr	r2, [pc, #420]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6213      	str	r3, [r2, #32]
 80017fc:	e00b      	b.n	8001816 <HAL_RCC_OscConfig+0x36e>
 80017fe:	4b67      	ldr	r3, [pc, #412]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	4a66      	ldr	r2, [pc, #408]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	6213      	str	r3, [r2, #32]
 800180a:	4b64      	ldr	r3, [pc, #400]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	4a63      	ldr	r2, [pc, #396]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 8001810:	f023 0304 	bic.w	r3, r3, #4
 8001814:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d015      	beq.n	800184a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181e:	f7ff fbab 	bl	8000f78 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001824:	e00a      	b.n	800183c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001826:	f7ff fba7 	bl	8000f78 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	f241 3288 	movw	r2, #5000	; 0x1388
 8001834:	4293      	cmp	r3, r2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e0ab      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183c:	4b57      	ldr	r3, [pc, #348]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0ee      	beq.n	8001826 <HAL_RCC_OscConfig+0x37e>
 8001848:	e014      	b.n	8001874 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184a:	f7ff fb95 	bl	8000f78 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001850:	e00a      	b.n	8001868 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001852:	f7ff fb91 	bl	8000f78 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001860:	4293      	cmp	r3, r2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e095      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001868:	4b4c      	ldr	r3, [pc, #304]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1ee      	bne.n	8001852 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001874:	7dfb      	ldrb	r3, [r7, #23]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d105      	bne.n	8001886 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800187a:	4b48      	ldr	r3, [pc, #288]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4a47      	ldr	r2, [pc, #284]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 8001880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001884:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 8081 	beq.w	8001992 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001890:	4b42      	ldr	r3, [pc, #264]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 030c 	and.w	r3, r3, #12
 8001898:	2b08      	cmp	r3, #8
 800189a:	d061      	beq.n	8001960 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d146      	bne.n	8001932 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a4:	4b3f      	ldr	r3, [pc, #252]	; (80019a4 <HAL_RCC_OscConfig+0x4fc>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018aa:	f7ff fb65 	bl	8000f78 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b2:	f7ff fb61 	bl	8000f78 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e067      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c4:	4b35      	ldr	r3, [pc, #212]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1f0      	bne.n	80018b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d8:	d108      	bne.n	80018ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018da:	4b30      	ldr	r3, [pc, #192]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	492d      	ldr	r1, [pc, #180]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ec:	4b2b      	ldr	r3, [pc, #172]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a19      	ldr	r1, [r3, #32]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fc:	430b      	orrs	r3, r1
 80018fe:	4927      	ldr	r1, [pc, #156]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 8001900:	4313      	orrs	r3, r2
 8001902:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001904:	4b27      	ldr	r3, [pc, #156]	; (80019a4 <HAL_RCC_OscConfig+0x4fc>)
 8001906:	2201      	movs	r2, #1
 8001908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190a:	f7ff fb35 	bl	8000f78 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001912:	f7ff fb31 	bl	8000f78 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e037      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001924:	4b1d      	ldr	r3, [pc, #116]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x46a>
 8001930:	e02f      	b.n	8001992 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001932:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <HAL_RCC_OscConfig+0x4fc>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001938:	f7ff fb1e 	bl	8000f78 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001940:	f7ff fb1a 	bl	8000f78 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e020      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001952:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x498>
 800195e:	e018      	b.n	8001992 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e013      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	429a      	cmp	r2, r3
 800197e:	d106      	bne.n	800198e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800198a:	429a      	cmp	r2, r3
 800198c:	d001      	beq.n	8001992 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40021000 	.word	0x40021000
 80019a0:	40007000 	.word	0x40007000
 80019a4:	42420060 	.word	0x42420060

080019a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0d0      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019bc:	4b6a      	ldr	r3, [pc, #424]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d910      	bls.n	80019ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b67      	ldr	r3, [pc, #412]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 0207 	bic.w	r2, r3, #7
 80019d2:	4965      	ldr	r1, [pc, #404]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b63      	ldr	r3, [pc, #396]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0b8      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d020      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a04:	4b59      	ldr	r3, [pc, #356]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	4a58      	ldr	r2, [pc, #352]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a1c:	4b53      	ldr	r3, [pc, #332]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	4a52      	ldr	r2, [pc, #328]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a28:	4b50      	ldr	r3, [pc, #320]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	494d      	ldr	r1, [pc, #308]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d040      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	4b47      	ldr	r3, [pc, #284]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d115      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e07f      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a66:	4b41      	ldr	r3, [pc, #260]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e073      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a76:	4b3d      	ldr	r3, [pc, #244]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e06b      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a86:	4b39      	ldr	r3, [pc, #228]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f023 0203 	bic.w	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4936      	ldr	r1, [pc, #216]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a98:	f7ff fa6e 	bl	8000f78 <HAL_GetTick>
 8001a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa0:	f7ff fa6a 	bl	8000f78 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e053      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab6:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 020c 	and.w	r2, r3, #12
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d1eb      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b27      	ldr	r3, [pc, #156]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d210      	bcs.n	8001af8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 0207 	bic.w	r2, r3, #7
 8001ade:	4922      	ldr	r1, [pc, #136]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e032      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d008      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b04:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4916      	ldr	r1, [pc, #88]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d009      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	490e      	ldr	r1, [pc, #56]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b36:	f000 f821 	bl	8001b7c <HAL_RCC_GetSysClockFreq>
 8001b3a:	4601      	mov	r1, r0
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001b48:	5cd3      	ldrb	r3, [r2, r3]
 8001b4a:	fa21 f303 	lsr.w	r3, r1, r3
 8001b4e:	4a09      	ldr	r2, [pc, #36]	; (8001b74 <HAL_RCC_ClockConfig+0x1cc>)
 8001b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_RCC_ClockConfig+0x1d0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff f90c 	bl	8000d74 <HAL_InitTick>

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40022000 	.word	0x40022000
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	080066bc 	.word	0x080066bc
 8001b74:	20000004 	.word	0x20000004
 8001b78:	20000008 	.word	0x20000008

08001b7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b7c:	b490      	push	{r4, r7}
 8001b7e:	b08a      	sub	sp, #40	; 0x28
 8001b80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b82:	4b2a      	ldr	r3, [pc, #168]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b84:	1d3c      	adds	r4, r7, #4
 8001b86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b8c:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
 8001b96:	2300      	movs	r3, #0
 8001b98:	61bb      	str	r3, [r7, #24]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ba6:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d002      	beq.n	8001bbc <HAL_RCC_GetSysClockFreq+0x40>
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d003      	beq.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x46>
 8001bba:	e02d      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bbc:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bbe:	623b      	str	r3, [r7, #32]
      break;
 8001bc0:	e02d      	b.n	8001c1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	0c9b      	lsrs	r3, r3, #18
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bce:	4413      	add	r3, r2
 8001bd0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001bd4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d013      	beq.n	8001c08 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001be0:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	0c5b      	lsrs	r3, r3, #17
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bee:	4413      	add	r3, r2
 8001bf0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001bf4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	4a0f      	ldr	r2, [pc, #60]	; (8001c38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bfa:	fb02 f203 	mul.w	r2, r2, r3
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
 8001c06:	e004      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	4a0c      	ldr	r2, [pc, #48]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c0c:	fb02 f303 	mul.w	r3, r2, r3
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	623b      	str	r3, [r7, #32]
      break;
 8001c16:	e002      	b.n	8001c1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c18:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c1a:	623b      	str	r3, [r7, #32]
      break;
 8001c1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c1e:	6a3b      	ldr	r3, [r7, #32]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3728      	adds	r7, #40	; 0x28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc90      	pop	{r4, r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	080065e4 	.word	0x080065e4
 8001c30:	080065f4 	.word	0x080065f4
 8001c34:	40021000 	.word	0x40021000
 8001c38:	007a1200 	.word	0x007a1200
 8001c3c:	003d0900 	.word	0x003d0900

08001c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c44:	4b02      	ldr	r3, [pc, #8]	; (8001c50 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c46:	681b      	ldr	r3, [r3, #0]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	20000004 	.word	0x20000004

08001c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c58:	f7ff fff2 	bl	8001c40 <HAL_RCC_GetHCLKFreq>
 8001c5c:	4601      	mov	r1, r0
 8001c5e:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	0a1b      	lsrs	r3, r3, #8
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	4a03      	ldr	r2, [pc, #12]	; (8001c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c6a:	5cd3      	ldrb	r3, [r2, r3]
 8001c6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40021000 	.word	0x40021000
 8001c78:	080066cc 	.word	0x080066cc

08001c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c80:	f7ff ffde 	bl	8001c40 <HAL_RCC_GetHCLKFreq>
 8001c84:	4601      	mov	r1, r0
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	0adb      	lsrs	r3, r3, #11
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	4a03      	ldr	r2, [pc, #12]	; (8001ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c92:	5cd3      	ldrb	r3, [r2, r3]
 8001c94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	080066cc 	.word	0x080066cc

08001ca4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	220f      	movs	r2, #15
 8001cb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <HAL_RCC_GetClockConfig+0x58>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 0203 	and.w	r2, r3, #3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <HAL_RCC_GetClockConfig+0x58>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_RCC_GetClockConfig+0x58>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <HAL_RCC_GetClockConfig+0x58>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	08db      	lsrs	r3, r3, #3
 8001cde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_RCC_GetClockConfig+0x5c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0207 	and.w	r2, r3, #7
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40022000 	.word	0x40022000

08001d04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <RCC_Delay+0x34>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <RCC_Delay+0x38>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	0a5b      	lsrs	r3, r3, #9
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	fb02 f303 	mul.w	r3, r2, r3
 8001d1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d20:	bf00      	nop
  }
  while (Delay --);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1e5a      	subs	r2, r3, #1
 8001d26:	60fa      	str	r2, [r7, #12]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f9      	bne.n	8001d20 <RCC_Delay+0x1c>
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000004 	.word	0x20000004
 8001d3c:	10624dd3 	.word	0x10624dd3

08001d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e041      	b.n	8001dd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d106      	bne.n	8001d6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7fe ff9c 	bl	8000ca4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4610      	mov	r0, r2
 8001d80:	f000 faae 	bl	80022e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d001      	beq.n	8001df8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e032      	b.n	8001e5e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a18      	ldr	r2, [pc, #96]	; (8001e68 <HAL_TIM_Base_Start+0x88>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00e      	beq.n	8001e28 <HAL_TIM_Base_Start+0x48>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e12:	d009      	beq.n	8001e28 <HAL_TIM_Base_Start+0x48>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a14      	ldr	r2, [pc, #80]	; (8001e6c <HAL_TIM_Base_Start+0x8c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d004      	beq.n	8001e28 <HAL_TIM_Base_Start+0x48>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a13      	ldr	r2, [pc, #76]	; (8001e70 <HAL_TIM_Base_Start+0x90>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d111      	bne.n	8001e4c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b06      	cmp	r3, #6
 8001e38:	d010      	beq.n	8001e5c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f042 0201 	orr.w	r2, r2, #1
 8001e48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e4a:	e007      	b.n	8001e5c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0201 	orr.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	40012c00 	.word	0x40012c00
 8001e6c:	40000400 	.word	0x40000400
 8001e70:	40000800 	.word	0x40000800

08001e74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d001      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e03a      	b.n	8001f02 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a18      	ldr	r2, [pc, #96]	; (8001f0c <HAL_TIM_Base_Start_IT+0x98>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d00e      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0x58>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb6:	d009      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0x58>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a14      	ldr	r2, [pc, #80]	; (8001f10 <HAL_TIM_Base_Start_IT+0x9c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d004      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0x58>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a13      	ldr	r2, [pc, #76]	; (8001f14 <HAL_TIM_Base_Start_IT+0xa0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d111      	bne.n	8001ef0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b06      	cmp	r3, #6
 8001edc:	d010      	beq.n	8001f00 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f042 0201 	orr.w	r2, r2, #1
 8001eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eee:	e007      	b.n	8001f00 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr
 8001f0c:	40012c00 	.word	0x40012c00
 8001f10:	40000400 	.word	0x40000400
 8001f14:	40000800 	.word	0x40000800

08001f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d122      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d11b      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0202 	mvn.w	r2, #2
 8001f44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f9a4 	bl	80022a8 <HAL_TIM_IC_CaptureCallback>
 8001f60:	e005      	b.n	8001f6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f997 	bl	8002296 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f9a6 	bl	80022ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d122      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d11b      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0204 	mvn.w	r2, #4
 8001f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f97a 	bl	80022a8 <HAL_TIM_IC_CaptureCallback>
 8001fb4:	e005      	b.n	8001fc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f96d 	bl	8002296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f97c 	bl	80022ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d122      	bne.n	800201c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d11b      	bne.n	800201c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0208 	mvn.w	r2, #8
 8001fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2204      	movs	r2, #4
 8001ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f950 	bl	80022a8 <HAL_TIM_IC_CaptureCallback>
 8002008:	e005      	b.n	8002016 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f943 	bl	8002296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f952 	bl	80022ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	2b10      	cmp	r3, #16
 8002028:	d122      	bne.n	8002070 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	2b10      	cmp	r3, #16
 8002036:	d11b      	bne.n	8002070 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0210 	mvn.w	r2, #16
 8002040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2208      	movs	r2, #8
 8002046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f926 	bl	80022a8 <HAL_TIM_IC_CaptureCallback>
 800205c:	e005      	b.n	800206a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f919 	bl	8002296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f928 	bl	80022ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b01      	cmp	r3, #1
 800207c:	d10e      	bne.n	800209c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b01      	cmp	r3, #1
 800208a:	d107      	bne.n	800209c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0201 	mvn.w	r2, #1
 8002094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7fe fdba 	bl	8000c10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a6:	2b80      	cmp	r3, #128	; 0x80
 80020a8:	d10e      	bne.n	80020c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b4:	2b80      	cmp	r3, #128	; 0x80
 80020b6:	d107      	bne.n	80020c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 fa6b 	bl	800259e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d2:	2b40      	cmp	r3, #64	; 0x40
 80020d4:	d10e      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e0:	2b40      	cmp	r3, #64	; 0x40
 80020e2:	d107      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f8ec 	bl	80022cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f003 0320 	and.w	r3, r3, #32
 80020fe:	2b20      	cmp	r3, #32
 8002100:	d10e      	bne.n	8002120 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f003 0320 	and.w	r3, r3, #32
 800210c:	2b20      	cmp	r3, #32
 800210e:	d107      	bne.n	8002120 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f06f 0220 	mvn.w	r2, #32
 8002118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 fa36 	bl	800258c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <HAL_TIM_ConfigClockSource+0x18>
 800213c:	2302      	movs	r3, #2
 800213e:	e0a6      	b.n	800228e <HAL_TIM_ConfigClockSource+0x166>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800215e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002166:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b40      	cmp	r3, #64	; 0x40
 8002176:	d067      	beq.n	8002248 <HAL_TIM_ConfigClockSource+0x120>
 8002178:	2b40      	cmp	r3, #64	; 0x40
 800217a:	d80b      	bhi.n	8002194 <HAL_TIM_ConfigClockSource+0x6c>
 800217c:	2b10      	cmp	r3, #16
 800217e:	d073      	beq.n	8002268 <HAL_TIM_ConfigClockSource+0x140>
 8002180:	2b10      	cmp	r3, #16
 8002182:	d802      	bhi.n	800218a <HAL_TIM_ConfigClockSource+0x62>
 8002184:	2b00      	cmp	r3, #0
 8002186:	d06f      	beq.n	8002268 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002188:	e078      	b.n	800227c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800218a:	2b20      	cmp	r3, #32
 800218c:	d06c      	beq.n	8002268 <HAL_TIM_ConfigClockSource+0x140>
 800218e:	2b30      	cmp	r3, #48	; 0x30
 8002190:	d06a      	beq.n	8002268 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002192:	e073      	b.n	800227c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002194:	2b70      	cmp	r3, #112	; 0x70
 8002196:	d00d      	beq.n	80021b4 <HAL_TIM_ConfigClockSource+0x8c>
 8002198:	2b70      	cmp	r3, #112	; 0x70
 800219a:	d804      	bhi.n	80021a6 <HAL_TIM_ConfigClockSource+0x7e>
 800219c:	2b50      	cmp	r3, #80	; 0x50
 800219e:	d033      	beq.n	8002208 <HAL_TIM_ConfigClockSource+0xe0>
 80021a0:	2b60      	cmp	r3, #96	; 0x60
 80021a2:	d041      	beq.n	8002228 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80021a4:	e06a      	b.n	800227c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80021a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021aa:	d066      	beq.n	800227a <HAL_TIM_ConfigClockSource+0x152>
 80021ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021b0:	d017      	beq.n	80021e2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80021b2:	e063      	b.n	800227c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	6899      	ldr	r1, [r3, #8]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f000 f965 	bl	8002492 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	609a      	str	r2, [r3, #8]
      break;
 80021e0:	e04c      	b.n	800227c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	6899      	ldr	r1, [r3, #8]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f000 f94e 	bl	8002492 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002204:	609a      	str	r2, [r3, #8]
      break;
 8002206:	e039      	b.n	800227c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6818      	ldr	r0, [r3, #0]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	6859      	ldr	r1, [r3, #4]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	461a      	mov	r2, r3
 8002216:	f000 f8c5 	bl	80023a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2150      	movs	r1, #80	; 0x50
 8002220:	4618      	mov	r0, r3
 8002222:	f000 f91c 	bl	800245e <TIM_ITRx_SetConfig>
      break;
 8002226:	e029      	b.n	800227c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	6859      	ldr	r1, [r3, #4]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	461a      	mov	r2, r3
 8002236:	f000 f8e3 	bl	8002400 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2160      	movs	r1, #96	; 0x60
 8002240:	4618      	mov	r0, r3
 8002242:	f000 f90c 	bl	800245e <TIM_ITRx_SetConfig>
      break;
 8002246:	e019      	b.n	800227c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6859      	ldr	r1, [r3, #4]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	461a      	mov	r2, r3
 8002256:	f000 f8a5 	bl	80023a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2140      	movs	r1, #64	; 0x40
 8002260:	4618      	mov	r0, r3
 8002262:	f000 f8fc 	bl	800245e <TIM_ITRx_SetConfig>
      break;
 8002266:	e009      	b.n	800227c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4619      	mov	r1, r3
 8002272:	4610      	mov	r0, r2
 8002274:	f000 f8f3 	bl	800245e <TIM_ITRx_SetConfig>
        break;
 8002278:	e000      	b.n	800227c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800227a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr

080022ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr

080022cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr
	...

080022e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a29      	ldr	r2, [pc, #164]	; (8002398 <TIM_Base_SetConfig+0xb8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00b      	beq.n	8002310 <TIM_Base_SetConfig+0x30>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022fe:	d007      	beq.n	8002310 <TIM_Base_SetConfig+0x30>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a26      	ldr	r2, [pc, #152]	; (800239c <TIM_Base_SetConfig+0xbc>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d003      	beq.n	8002310 <TIM_Base_SetConfig+0x30>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a25      	ldr	r2, [pc, #148]	; (80023a0 <TIM_Base_SetConfig+0xc0>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d108      	bne.n	8002322 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	4313      	orrs	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a1c      	ldr	r2, [pc, #112]	; (8002398 <TIM_Base_SetConfig+0xb8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00b      	beq.n	8002342 <TIM_Base_SetConfig+0x62>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002330:	d007      	beq.n	8002342 <TIM_Base_SetConfig+0x62>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a19      	ldr	r2, [pc, #100]	; (800239c <TIM_Base_SetConfig+0xbc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d003      	beq.n	8002342 <TIM_Base_SetConfig+0x62>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a18      	ldr	r2, [pc, #96]	; (80023a0 <TIM_Base_SetConfig+0xc0>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d108      	bne.n	8002354 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	4313      	orrs	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	4313      	orrs	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a07      	ldr	r2, [pc, #28]	; (8002398 <TIM_Base_SetConfig+0xb8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d103      	bne.n	8002388 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	615a      	str	r2, [r3, #20]
}
 800238e:	bf00      	nop
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr
 8002398:	40012c00 	.word	0x40012c00
 800239c:	40000400 	.word	0x40000400
 80023a0:	40000800 	.word	0x40000800

080023a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	f023 0201 	bic.w	r2, r3, #1
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f023 030a 	bic.w	r3, r3, #10
 80023e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	621a      	str	r2, [r3, #32]
}
 80023f6:	bf00      	nop
 80023f8:	371c      	adds	r7, #28
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr

08002400 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	f023 0210 	bic.w	r2, r3, #16
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800242a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	031b      	lsls	r3, r3, #12
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	4313      	orrs	r3, r2
 8002434:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800243c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	621a      	str	r2, [r3, #32]
}
 8002454:	bf00      	nop
 8002456:	371c      	adds	r7, #28
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800245e:	b480      	push	{r7}
 8002460:	b085      	sub	sp, #20
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002474:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	f043 0307 	orr.w	r3, r3, #7
 8002480:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	609a      	str	r2, [r3, #8]
}
 8002488:	bf00      	nop
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002492:	b480      	push	{r7}
 8002494:	b087      	sub	sp, #28
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	021a      	lsls	r2, r3, #8
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	431a      	orrs	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4313      	orrs	r3, r2
 80024be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	609a      	str	r2, [r3, #8]
}
 80024c6:	bf00      	nop
 80024c8:	371c      	adds	r7, #28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e046      	b.n	8002576 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800250e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a16      	ldr	r2, [pc, #88]	; (8002580 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d00e      	beq.n	800254a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002534:	d009      	beq.n	800254a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a12      	ldr	r2, [pc, #72]	; (8002584 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d004      	beq.n	800254a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a10      	ldr	r2, [pc, #64]	; (8002588 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d10c      	bne.n	8002564 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002550:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	4313      	orrs	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr
 8002580:	40012c00 	.word	0x40012c00
 8002584:	40000400 	.word	0x40000400
 8002588:	40000800 	.word	0x40000800

0800258c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr

0800259e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e03f      	b.n	8002642 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d106      	bne.n	80025dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7fe fb80 	bl	8000cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2224      	movs	r2, #36	; 0x24
 80025e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f9a3 	bl	8002940 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002608:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695a      	ldr	r2, [r3, #20]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002618:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002628:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b08a      	sub	sp, #40	; 0x28
 800264e:	af02      	add	r7, sp, #8
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	603b      	str	r3, [r7, #0]
 8002656:	4613      	mov	r3, r2
 8002658:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b20      	cmp	r3, #32
 8002668:	d17c      	bne.n	8002764 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <HAL_UART_Transmit+0x2c>
 8002670:	88fb      	ldrh	r3, [r7, #6]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e075      	b.n	8002766 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_UART_Transmit+0x3e>
 8002684:	2302      	movs	r3, #2
 8002686:	e06e      	b.n	8002766 <HAL_UART_Transmit+0x11c>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2221      	movs	r2, #33	; 0x21
 800269a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800269e:	f7fe fc6b 	bl	8000f78 <HAL_GetTick>
 80026a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	88fa      	ldrh	r2, [r7, #6]
 80026a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	88fa      	ldrh	r2, [r7, #6]
 80026ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b8:	d108      	bne.n	80026cc <HAL_UART_Transmit+0x82>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d104      	bne.n	80026cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	e003      	b.n	80026d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80026dc:	e02a      	b.n	8002734 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	2200      	movs	r2, #0
 80026e6:	2180      	movs	r1, #128	; 0x80
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 f8df 	bl	80028ac <UART_WaitOnFlagUntilTimeout>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e036      	b.n	8002766 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10b      	bne.n	8002716 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800270c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	3302      	adds	r3, #2
 8002712:	61bb      	str	r3, [r7, #24]
 8002714:	e007      	b.n	8002726 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	781a      	ldrb	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	3301      	adds	r3, #1
 8002724:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002738:	b29b      	uxth	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1cf      	bne.n	80026de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2200      	movs	r2, #0
 8002746:	2140      	movs	r1, #64	; 0x40
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 f8af 	bl	80028ac <UART_WaitOnFlagUntilTimeout>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e006      	b.n	8002766 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	e000      	b.n	8002766 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002764:	2302      	movs	r3, #2
  }
}
 8002766:	4618      	mov	r0, r3
 8002768:	3720      	adds	r7, #32
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b08a      	sub	sp, #40	; 0x28
 8002772:	af02      	add	r7, sp, #8
 8002774:	60f8      	str	r0, [r7, #12]
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	603b      	str	r3, [r7, #0]
 800277a:	4613      	mov	r3, r2
 800277c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b20      	cmp	r3, #32
 800278c:	f040 8089 	bne.w	80028a2 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <HAL_UART_Receive+0x2e>
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e081      	b.n	80028a4 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_UART_Receive+0x40>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e07a      	b.n	80028a4 <HAL_UART_Receive+0x136>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2222      	movs	r2, #34	; 0x22
 80027c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80027c4:	f7fe fbd8 	bl	8000f78 <HAL_GetTick>
 80027c8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	88fa      	ldrh	r2, [r7, #6]
 80027ce:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	88fa      	ldrh	r2, [r7, #6]
 80027d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027de:	d108      	bne.n	80027f2 <HAL_UART_Receive+0x84>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d104      	bne.n	80027f2 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	61bb      	str	r3, [r7, #24]
 80027f0:	e003      	b.n	80027fa <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002802:	e043      	b.n	800288c <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	2200      	movs	r2, #0
 800280c:	2120      	movs	r1, #32
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 f84c 	bl	80028ac <UART_WaitOnFlagUntilTimeout>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e042      	b.n	80028a4 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10c      	bne.n	800283e <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	b29b      	uxth	r3, r3
 800282c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002830:	b29a      	uxth	r2, r3
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	3302      	adds	r3, #2
 800283a:	61bb      	str	r3, [r7, #24]
 800283c:	e01f      	b.n	800287e <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002846:	d007      	beq.n	8002858 <HAL_UART_Receive+0xea>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10a      	bne.n	8002866 <HAL_UART_Receive+0xf8>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d106      	bne.n	8002866 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	b2da      	uxtb	r2, r3
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	701a      	strb	r2, [r3, #0]
 8002864:	e008      	b.n	8002878 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002872:	b2da      	uxtb	r2, r3
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	3301      	adds	r3, #1
 800287c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002882:	b29b      	uxth	r3, r3
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002890:	b29b      	uxth	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1b6      	bne.n	8002804 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2220      	movs	r2, #32
 800289a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	e000      	b.n	80028a4 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 80028a2:	2302      	movs	r3, #2
  }
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3720      	adds	r7, #32
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	603b      	str	r3, [r7, #0]
 80028b8:	4613      	mov	r3, r2
 80028ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028bc:	e02c      	b.n	8002918 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028c4:	d028      	beq.n	8002918 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d007      	beq.n	80028dc <UART_WaitOnFlagUntilTimeout+0x30>
 80028cc:	f7fe fb54 	bl	8000f78 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d21d      	bcs.n	8002918 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80028ea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0201 	bic.w	r2, r2, #1
 80028fa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e00f      	b.n	8002938 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	4013      	ands	r3, r2
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	429a      	cmp	r2, r3
 8002926:	bf0c      	ite	eq
 8002928:	2301      	moveq	r3, #1
 800292a:	2300      	movne	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	461a      	mov	r2, r3
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	429a      	cmp	r2, r3
 8002934:	d0c3      	beq.n	80028be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	4313      	orrs	r3, r2
 800296e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800297a:	f023 030c 	bic.w	r3, r3, #12
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6812      	ldr	r2, [r2, #0]
 8002982:	68b9      	ldr	r1, [r7, #8]
 8002984:	430b      	orrs	r3, r1
 8002986:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699a      	ldr	r2, [r3, #24]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a2c      	ldr	r2, [pc, #176]	; (8002a54 <UART_SetConfig+0x114>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d103      	bne.n	80029b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80029a8:	f7ff f968 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	e002      	b.n	80029b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80029b0:	f7ff f950 	bl	8001c54 <HAL_RCC_GetPCLK1Freq>
 80029b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	009a      	lsls	r2, r3, #2
 80029c0:	441a      	add	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029cc:	4a22      	ldr	r2, [pc, #136]	; (8002a58 <UART_SetConfig+0x118>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	0119      	lsls	r1, r3, #4
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	009a      	lsls	r2, r3, #2
 80029e0:	441a      	add	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80029ec:	4b1a      	ldr	r3, [pc, #104]	; (8002a58 <UART_SetConfig+0x118>)
 80029ee:	fba3 0302 	umull	r0, r3, r3, r2
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	2064      	movs	r0, #100	; 0x64
 80029f6:	fb00 f303 	mul.w	r3, r0, r3
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	3332      	adds	r3, #50	; 0x32
 8002a00:	4a15      	ldr	r2, [pc, #84]	; (8002a58 <UART_SetConfig+0x118>)
 8002a02:	fba2 2303 	umull	r2, r3, r2, r3
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a0c:	4419      	add	r1, r3
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	009a      	lsls	r2, r3, #2
 8002a18:	441a      	add	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a24:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <UART_SetConfig+0x118>)
 8002a26:	fba3 0302 	umull	r0, r3, r3, r2
 8002a2a:	095b      	lsrs	r3, r3, #5
 8002a2c:	2064      	movs	r0, #100	; 0x64
 8002a2e:	fb00 f303 	mul.w	r3, r0, r3
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	3332      	adds	r3, #50	; 0x32
 8002a38:	4a07      	ldr	r2, [pc, #28]	; (8002a58 <UART_SetConfig+0x118>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	f003 020f 	and.w	r2, r3, #15
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	440a      	add	r2, r1
 8002a4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a4c:	bf00      	nop
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40013800 	.word	0x40013800
 8002a58:	51eb851f 	.word	0x51eb851f

08002a5c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a62:	f3ef 8305 	mrs	r3, IPSR
 8002a66:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a68:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10f      	bne.n	8002a8e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a72:	607b      	str	r3, [r7, #4]
  return(result);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d109      	bne.n	8002a8e <osKernelInitialize+0x32>
 8002a7a:	4b10      	ldr	r3, [pc, #64]	; (8002abc <osKernelInitialize+0x60>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d109      	bne.n	8002a96 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a82:	f3ef 8311 	mrs	r3, BASEPRI
 8002a86:	603b      	str	r3, [r7, #0]
  return(result);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002a8e:	f06f 0305 	mvn.w	r3, #5
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	e00c      	b.n	8002ab0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002a96:	4b09      	ldr	r3, [pc, #36]	; (8002abc <osKernelInitialize+0x60>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d105      	bne.n	8002aaa <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002a9e:	4b07      	ldr	r3, [pc, #28]	; (8002abc <osKernelInitialize+0x60>)
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	e002      	b.n	8002ab0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr
 8002abc:	2000026c 	.word	0x2000026c

08002ac0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ac6:	f3ef 8305 	mrs	r3, IPSR
 8002aca:	60bb      	str	r3, [r7, #8]
  return(result);
 8002acc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10f      	bne.n	8002af2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ad2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ad6:	607b      	str	r3, [r7, #4]
  return(result);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <osKernelStart+0x32>
 8002ade:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <osKernelStart+0x64>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d109      	bne.n	8002afa <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ae6:	f3ef 8311 	mrs	r3, BASEPRI
 8002aea:	603b      	str	r3, [r7, #0]
  return(result);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <osKernelStart+0x3a>
    stat = osErrorISR;
 8002af2:	f06f 0305 	mvn.w	r3, #5
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	e00e      	b.n	8002b18 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002afa:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <osKernelStart+0x64>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d107      	bne.n	8002b12 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002b02:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <osKernelStart+0x64>)
 8002b04:	2202      	movs	r2, #2
 8002b06:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002b08:	f001 fb24 	bl	8004154 <vTaskStartScheduler>
      stat = osOK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	e002      	b.n	8002b18 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002b18:	68fb      	ldr	r3, [r7, #12]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	2000026c 	.word	0x2000026c

08002b28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b092      	sub	sp, #72	; 0x48
 8002b2c:	af04      	add	r7, sp, #16
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b38:	f3ef 8305 	mrs	r3, IPSR
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f040 8094 	bne.w	8002c6e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b46:	f3ef 8310 	mrs	r3, PRIMASK
 8002b4a:	623b      	str	r3, [r7, #32]
  return(result);
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f040 808d 	bne.w	8002c6e <osThreadNew+0x146>
 8002b54:	4b48      	ldr	r3, [pc, #288]	; (8002c78 <osThreadNew+0x150>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d106      	bne.n	8002b6a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002b5c:	f3ef 8311 	mrs	r3, BASEPRI
 8002b60:	61fb      	str	r3, [r7, #28]
  return(result);
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f040 8082 	bne.w	8002c6e <osThreadNew+0x146>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d07e      	beq.n	8002c6e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002b70:	2380      	movs	r3, #128	; 0x80
 8002b72:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002b74:	2318      	movs	r3, #24
 8002b76:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002b78:	2300      	movs	r3, #0
 8002b7a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002b7c:	f107 031b 	add.w	r3, r7, #27
 8002b80:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002b82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d045      	beq.n	8002c1a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <osThreadNew+0x74>
        name = attr->name;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d008      	beq.n	8002bc2 <osThreadNew+0x9a>
 8002bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb2:	2b38      	cmp	r3, #56	; 0x38
 8002bb4:	d805      	bhi.n	8002bc2 <osThreadNew+0x9a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <osThreadNew+0x9e>
        return (NULL);
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	e054      	b.n	8002c70 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	089b      	lsrs	r3, r3, #2
 8002bd4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00e      	beq.n	8002bfc <osThreadNew+0xd4>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	2b5b      	cmp	r3, #91	; 0x5b
 8002be4:	d90a      	bls.n	8002bfc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d006      	beq.n	8002bfc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <osThreadNew+0xd4>
        mem = 1;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bfa:	e010      	b.n	8002c1e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10c      	bne.n	8002c1e <osThreadNew+0xf6>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d108      	bne.n	8002c1e <osThreadNew+0xf6>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d104      	bne.n	8002c1e <osThreadNew+0xf6>
          mem = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c18:	e001      	b.n	8002c1e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d110      	bne.n	8002c46 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c2c:	9202      	str	r2, [sp, #8]
 8002c2e:	9301      	str	r3, [sp, #4]
 8002c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f001 f8c2 	bl	8003dc4 <xTaskCreateStatic>
 8002c40:	4603      	mov	r3, r0
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	e013      	b.n	8002c6e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d110      	bne.n	8002c6e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	f107 0314 	add.w	r3, r7, #20
 8002c54:	9301      	str	r3, [sp, #4]
 8002c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f001 f909 	bl	8003e76 <xTaskCreate>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d001      	beq.n	8002c6e <osThreadNew+0x146>
          hTask = NULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002c6e:	697b      	ldr	r3, [r7, #20]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3738      	adds	r7, #56	; 0x38
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	2000026c 	.word	0x2000026c

08002c7c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c84:	f3ef 8305 	mrs	r3, IPSR
 8002c88:	613b      	str	r3, [r7, #16]
  return(result);
 8002c8a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10f      	bne.n	8002cb0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c90:	f3ef 8310 	mrs	r3, PRIMASK
 8002c94:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d109      	bne.n	8002cb0 <osDelay+0x34>
 8002c9c:	4b0d      	ldr	r3, [pc, #52]	; (8002cd4 <osDelay+0x58>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d109      	bne.n	8002cb8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ca4:	f3ef 8311 	mrs	r3, BASEPRI
 8002ca8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <osDelay+0x3c>
    stat = osErrorISR;
 8002cb0:	f06f 0305 	mvn.w	r3, #5
 8002cb4:	617b      	str	r3, [r7, #20]
 8002cb6:	e007      	b.n	8002cc8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f001 fa12 	bl	80040ec <vTaskDelay>
    }
  }

  return (stat);
 8002cc8:	697b      	ldr	r3, [r7, #20]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	2000026c 	.word	0x2000026c

08002cd8 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f002 faeb 	bl	80052bc <pvTimerGetTimerID>
 8002ce6:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d005      	beq.n	8002cfa <TimerCallback+0x22>
    callb->func (callb->arg);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	6852      	ldr	r2, [r2, #4]
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	4798      	blx	r3
  }
}
 8002cfa:	bf00      	nop
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08e      	sub	sp, #56	; 0x38
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	607a      	str	r2, [r7, #4]
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	460b      	mov	r3, r1
 8002d12:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d18:	f3ef 8305 	mrs	r3, IPSR
 8002d1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d1e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d16a      	bne.n	8002dfa <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d24:	f3ef 8310 	mrs	r3, PRIMASK
 8002d28:	617b      	str	r3, [r7, #20]
  return(result);
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d164      	bne.n	8002dfa <osTimerNew+0xf6>
 8002d30:	4b34      	ldr	r3, [pc, #208]	; (8002e04 <osTimerNew+0x100>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d105      	bne.n	8002d44 <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d38:	f3ef 8311 	mrs	r3, BASEPRI
 8002d3c:	613b      	str	r3, [r7, #16]
  return(result);
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d15a      	bne.n	8002dfa <osTimerNew+0xf6>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d057      	beq.n	8002dfa <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8002d4a:	2008      	movs	r0, #8
 8002d4c:	f002 fcba 	bl	80056c4 <pvPortMalloc>
 8002d50:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d050      	beq.n	8002dfa <osTimerNew+0xf6>
      callb->func = func;
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8002d64:	7afb      	ldrb	r3, [r7, #11]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d102      	bne.n	8002d70 <osTimerNew+0x6c>
        reload = pdFALSE;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d6e:	e001      	b.n	8002d74 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8002d70:	2301      	movs	r3, #1
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8002d74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d78:	623b      	str	r3, [r7, #32]
      name = NULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d01c      	beq.n	8002dbe <osTimerNew+0xba>
        if (attr->name != NULL) {
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <osTimerNew+0x8e>
          name = attr->name;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d006      	beq.n	8002da8 <osTimerNew+0xa4>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	2b2f      	cmp	r3, #47	; 0x2f
 8002da0:	d902      	bls.n	8002da8 <osTimerNew+0xa4>
          mem = 1;
 8002da2:	2301      	movs	r3, #1
 8002da4:	623b      	str	r3, [r7, #32]
 8002da6:	e00c      	b.n	8002dc2 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d108      	bne.n	8002dc2 <osTimerNew+0xbe>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d104      	bne.n	8002dc2 <osTimerNew+0xbe>
            mem = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	623b      	str	r3, [r7, #32]
 8002dbc:	e001      	b.n	8002dc2 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d10c      	bne.n	8002de2 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	9301      	str	r3, [sp, #4]
 8002dce:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <osTimerNew+0x104>)
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002dda:	f001 ff40 	bl	8004c5e <xTimerCreateStatic>
 8002dde:	62b8      	str	r0, [r7, #40]	; 0x28
 8002de0:	e00b      	b.n	8002dfa <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d108      	bne.n	8002dfa <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8002de8:	4b07      	ldr	r3, [pc, #28]	; (8002e08 <osTimerNew+0x104>)
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df0:	2101      	movs	r1, #1
 8002df2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002df4:	f001 ff12 	bl	8004c1c <xTimerCreate>
 8002df8:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3730      	adds	r7, #48	; 0x30
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	2000026c 	.word	0x2000026c
 8002e08:	08002cd9 	.word	0x08002cd9

08002e0c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08c      	sub	sp, #48	; 0x30
 8002e10:	af02      	add	r7, sp, #8
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e1c:	f3ef 8305 	mrs	r3, IPSR
 8002e20:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e22:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d170      	bne.n	8002f0a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e28:	f3ef 8310 	mrs	r3, PRIMASK
 8002e2c:	617b      	str	r3, [r7, #20]
  return(result);
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d16a      	bne.n	8002f0a <osMessageQueueNew+0xfe>
 8002e34:	4b37      	ldr	r3, [pc, #220]	; (8002f14 <osMessageQueueNew+0x108>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d105      	bne.n	8002e48 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e3c:	f3ef 8311 	mrs	r3, BASEPRI
 8002e40:	613b      	str	r3, [r7, #16]
  return(result);
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d160      	bne.n	8002f0a <osMessageQueueNew+0xfe>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d05d      	beq.n	8002f0a <osMessageQueueNew+0xfe>
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d05a      	beq.n	8002f0a <osMessageQueueNew+0xfe>
    mem = -1;
 8002e54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e58:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d029      	beq.n	8002eb4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d012      	beq.n	8002e8e <osMessageQueueNew+0x82>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b4f      	cmp	r3, #79	; 0x4f
 8002e6e:	d90e      	bls.n	8002e8e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695a      	ldr	r2, [r3, #20]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	68b9      	ldr	r1, [r7, #8]
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d302      	bcc.n	8002e8e <osMessageQueueNew+0x82>
        mem = 1;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	623b      	str	r3, [r7, #32]
 8002e8c:	e014      	b.n	8002eb8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d110      	bne.n	8002eb8 <osMessageQueueNew+0xac>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10c      	bne.n	8002eb8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d108      	bne.n	8002eb8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d104      	bne.n	8002eb8 <osMessageQueueNew+0xac>
          mem = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	623b      	str	r3, [r7, #32]
 8002eb2:	e001      	b.n	8002eb8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d10c      	bne.n	8002ed8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6899      	ldr	r1, [r3, #8]
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 fa52 	bl	8003378 <xQueueGenericCreateStatic>
 8002ed4:	6278      	str	r0, [r7, #36]	; 0x24
 8002ed6:	e008      	b.n	8002eea <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d105      	bne.n	8002eea <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8002ede:	2200      	movs	r2, #0
 8002ee0:	68b9      	ldr	r1, [r7, #8]
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 faba 	bl	800345c <xQueueGenericCreate>
 8002ee8:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00c      	beq.n	8002f0a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <osMessageQueueNew+0xf2>
        name = attr->name;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	61fb      	str	r3, [r7, #28]
 8002efc:	e001      	b.n	8002f02 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8002f02:	69f9      	ldr	r1, [r7, #28]
 8002f04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f06:	f000 ff01 	bl	8003d0c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3728      	adds	r7, #40	; 0x28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	2000026c 	.word	0x2000026c

08002f18 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08a      	sub	sp, #40	; 0x28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	4613      	mov	r3, r2
 8002f26:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f30:	f3ef 8305 	mrs	r3, IPSR
 8002f34:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f36:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10f      	bne.n	8002f5c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f3c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f40:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d109      	bne.n	8002f5c <osMessageQueuePut+0x44>
 8002f48:	4b2b      	ldr	r3, [pc, #172]	; (8002ff8 <osMessageQueuePut+0xe0>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d12e      	bne.n	8002fae <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f50:	f3ef 8311 	mrs	r3, BASEPRI
 8002f54:	617b      	str	r3, [r7, #20]
  return(result);
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d028      	beq.n	8002fae <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d005      	beq.n	8002f6e <osMessageQueuePut+0x56>
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <osMessageQueuePut+0x56>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8002f6e:	f06f 0303 	mvn.w	r3, #3
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002f74:	e039      	b.n	8002fea <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8002f76:	2300      	movs	r3, #0
 8002f78:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8002f7a:	f107 0210 	add.w	r2, r7, #16
 8002f7e:	2300      	movs	r3, #0
 8002f80:	68b9      	ldr	r1, [r7, #8]
 8002f82:	6a38      	ldr	r0, [r7, #32]
 8002f84:	f000 fbc4 	bl	8003710 <xQueueGenericSendFromISR>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d003      	beq.n	8002f96 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8002f8e:	f06f 0302 	mvn.w	r3, #2
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002f94:	e029      	b.n	8002fea <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d026      	beq.n	8002fea <osMessageQueuePut+0xd2>
 8002f9c:	4b17      	ldr	r3, [pc, #92]	; (8002ffc <osMessageQueuePut+0xe4>)
 8002f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002fac:	e01d      	b.n	8002fea <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <osMessageQueuePut+0xa2>
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d103      	bne.n	8002fc2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8002fba:	f06f 0303 	mvn.w	r3, #3
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc0:	e014      	b.n	8002fec <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	68b9      	ldr	r1, [r7, #8]
 8002fc8:	6a38      	ldr	r0, [r7, #32]
 8002fca:	f000 faa7 	bl	800351c <xQueueGenericSend>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d00b      	beq.n	8002fec <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8002fda:	f06f 0301 	mvn.w	r3, #1
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe0:	e004      	b.n	8002fec <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8002fe2:	f06f 0302 	mvn.w	r3, #2
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe8:	e000      	b.n	8002fec <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002fea:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3728      	adds	r7, #40	; 0x28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	2000026c 	.word	0x2000026c
 8002ffc:	e000ed04 	.word	0xe000ed04

08003000 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003000:	b580      	push	{r7, lr}
 8003002:	b08a      	sub	sp, #40	; 0x28
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
 800300c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003012:	2300      	movs	r3, #0
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003016:	f3ef 8305 	mrs	r3, IPSR
 800301a:	61fb      	str	r3, [r7, #28]
  return(result);
 800301c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10f      	bne.n	8003042 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003022:	f3ef 8310 	mrs	r3, PRIMASK
 8003026:	61bb      	str	r3, [r7, #24]
  return(result);
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <osMessageQueueGet+0x42>
 800302e:	4b2b      	ldr	r3, [pc, #172]	; (80030dc <osMessageQueueGet+0xdc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d12e      	bne.n	8003094 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003036:	f3ef 8311 	mrs	r3, BASEPRI
 800303a:	617b      	str	r3, [r7, #20]
  return(result);
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d028      	beq.n	8003094 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <osMessageQueueGet+0x54>
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <osMessageQueueGet+0x54>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8003054:	f06f 0303 	mvn.w	r3, #3
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800305a:	e038      	b.n	80030ce <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800305c:	2300      	movs	r3, #0
 800305e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003060:	f107 0310 	add.w	r3, r7, #16
 8003064:	461a      	mov	r2, r3
 8003066:	68b9      	ldr	r1, [r7, #8]
 8003068:	6a38      	ldr	r0, [r7, #32]
 800306a:	f000 fcc1 	bl	80039f0 <xQueueReceiveFromISR>
 800306e:	4603      	mov	r3, r0
 8003070:	2b01      	cmp	r3, #1
 8003072:	d003      	beq.n	800307c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8003074:	f06f 0302 	mvn.w	r3, #2
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800307a:	e028      	b.n	80030ce <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d025      	beq.n	80030ce <osMessageQueueGet+0xce>
 8003082:	4b17      	ldr	r3, [pc, #92]	; (80030e0 <osMessageQueueGet+0xe0>)
 8003084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	f3bf 8f4f 	dsb	sy
 800308e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003092:	e01c      	b.n	80030ce <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <osMessageQueueGet+0xa0>
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d103      	bne.n	80030a8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80030a0:	f06f 0303 	mvn.w	r3, #3
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
 80030a6:	e013      	b.n	80030d0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	68b9      	ldr	r1, [r7, #8]
 80030ac:	6a38      	ldr	r0, [r7, #32]
 80030ae:	f000 fbc3 	bl	8003838 <xQueueReceive>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d00b      	beq.n	80030d0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80030be:	f06f 0301 	mvn.w	r3, #1
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
 80030c4:	e004      	b.n	80030d0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80030c6:	f06f 0302 	mvn.w	r3, #2
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
 80030cc:	e000      	b.n	80030d0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80030ce:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3728      	adds	r7, #40	; 0x28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	2000026c 	.word	0x2000026c
 80030e0:	e000ed04 	.word	0xe000ed04

080030e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4a06      	ldr	r2, [pc, #24]	; (800310c <vApplicationGetIdleTaskMemory+0x28>)
 80030f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	4a05      	ldr	r2, [pc, #20]	; (8003110 <vApplicationGetIdleTaskMemory+0x2c>)
 80030fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2280      	movs	r2, #128	; 0x80
 8003100:	601a      	str	r2, [r3, #0]
}
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr
 800310c:	20000270 	.word	0x20000270
 8003110:	200002cc 	.word	0x200002cc

08003114 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4a07      	ldr	r2, [pc, #28]	; (8003140 <vApplicationGetTimerTaskMemory+0x2c>)
 8003124:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	4a06      	ldr	r2, [pc, #24]	; (8003144 <vApplicationGetTimerTaskMemory+0x30>)
 800312a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003132:	601a      	str	r2, [r3, #0]
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	200004cc 	.word	0x200004cc
 8003144:	20000528 	.word	0x20000528

08003148 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f103 0208 	add.w	r2, r3, #8
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003160:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f103 0208 	add.w	r2, r3, #8
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f103 0208 	add.w	r2, r3, #8
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr

08003186 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr

0800319e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800319e:	b480      	push	{r7}
 80031a0:	b085      	sub	sp, #20
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	601a      	str	r2, [r3, #0]
}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr

080031e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031fa:	d103      	bne.n	8003204 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	e00c      	b.n	800321e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3308      	adds	r3, #8
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	e002      	b.n	8003212 <vListInsert+0x2e>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	429a      	cmp	r2, r3
 800321c:	d2f6      	bcs.n	800320c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	601a      	str	r2, [r3, #0]
}
 800324a:	bf00      	nop
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr

08003254 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6892      	ldr	r2, [r2, #8]
 800326a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6852      	ldr	r2, [r2, #4]
 8003274:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	429a      	cmp	r2, r3
 800327e:	d103      	bne.n	8003288 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	1e5a      	subs	r2, r3, #1
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr
	...

080032a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d109      	bne.n	80032d0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80032bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c0:	f383 8811 	msr	BASEPRI, r3
 80032c4:	f3bf 8f6f 	isb	sy
 80032c8:	f3bf 8f4f 	dsb	sy
 80032cc:	60bb      	str	r3, [r7, #8]
 80032ce:	e7fe      	b.n	80032ce <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80032d0:	f002 f902 	bl	80054d8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032dc:	68f9      	ldr	r1, [r7, #12]
 80032de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80032e0:	fb01 f303 	mul.w	r3, r1, r3
 80032e4:	441a      	add	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003300:	3b01      	subs	r3, #1
 8003302:	68f9      	ldr	r1, [r7, #12]
 8003304:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	441a      	add	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	22ff      	movs	r2, #255	; 0xff
 8003314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	22ff      	movs	r2, #255	; 0xff
 800331c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d114      	bne.n	8003350 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d01a      	beq.n	8003364 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	3310      	adds	r3, #16
 8003332:	4618      	mov	r0, r3
 8003334:	f001 f992 	bl	800465c <xTaskRemoveFromEventList>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d012      	beq.n	8003364 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800333e:	4b0d      	ldr	r3, [pc, #52]	; (8003374 <xQueueGenericReset+0xcc>)
 8003340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	f3bf 8f4f 	dsb	sy
 800334a:	f3bf 8f6f 	isb	sy
 800334e:	e009      	b.n	8003364 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	3310      	adds	r3, #16
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff fef7 	bl	8003148 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	3324      	adds	r3, #36	; 0x24
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff fef2 	bl	8003148 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003364:	f002 f8e6 	bl	8005534 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003368:	2301      	movs	r3, #1
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	e000ed04 	.word	0xe000ed04

08003378 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08e      	sub	sp, #56	; 0x38
 800337c:	af02      	add	r7, sp, #8
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
 8003384:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d109      	bne.n	80033a0 <xQueueGenericCreateStatic+0x28>
 800338c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003390:	f383 8811 	msr	BASEPRI, r3
 8003394:	f3bf 8f6f 	isb	sy
 8003398:	f3bf 8f4f 	dsb	sy
 800339c:	62bb      	str	r3, [r7, #40]	; 0x28
 800339e:	e7fe      	b.n	800339e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d109      	bne.n	80033ba <xQueueGenericCreateStatic+0x42>
 80033a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
 80033b8:	e7fe      	b.n	80033b8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <xQueueGenericCreateStatic+0x4e>
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <xQueueGenericCreateStatic+0x52>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <xQueueGenericCreateStatic+0x54>
 80033ca:	2300      	movs	r3, #0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d109      	bne.n	80033e4 <xQueueGenericCreateStatic+0x6c>
 80033d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d4:	f383 8811 	msr	BASEPRI, r3
 80033d8:	f3bf 8f6f 	isb	sy
 80033dc:	f3bf 8f4f 	dsb	sy
 80033e0:	623b      	str	r3, [r7, #32]
 80033e2:	e7fe      	b.n	80033e2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d102      	bne.n	80033f0 <xQueueGenericCreateStatic+0x78>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <xQueueGenericCreateStatic+0x7c>
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <xQueueGenericCreateStatic+0x7e>
 80033f4:	2300      	movs	r3, #0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d109      	bne.n	800340e <xQueueGenericCreateStatic+0x96>
 80033fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fe:	f383 8811 	msr	BASEPRI, r3
 8003402:	f3bf 8f6f 	isb	sy
 8003406:	f3bf 8f4f 	dsb	sy
 800340a:	61fb      	str	r3, [r7, #28]
 800340c:	e7fe      	b.n	800340c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800340e:	2350      	movs	r3, #80	; 0x50
 8003410:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b50      	cmp	r3, #80	; 0x50
 8003416:	d009      	beq.n	800342c <xQueueGenericCreateStatic+0xb4>
 8003418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	61bb      	str	r3, [r7, #24]
 800342a:	e7fe      	b.n	800342a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00d      	beq.n	8003452 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800343e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	4613      	mov	r3, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	68b9      	ldr	r1, [r7, #8]
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 f842 	bl	80034d6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003454:	4618      	mov	r0, r3
 8003456:	3730      	adds	r7, #48	; 0x30
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08a      	sub	sp, #40	; 0x28
 8003460:	af02      	add	r7, sp, #8
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	4613      	mov	r3, r2
 8003468:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d109      	bne.n	8003484 <xQueueGenericCreate+0x28>
 8003470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	e7fe      	b.n	8003482 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d102      	bne.n	8003490 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
 800348e:	e004      	b.n	800349a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	fb02 f303 	mul.w	r3, r2, r3
 8003498:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	3350      	adds	r3, #80	; 0x50
 800349e:	4618      	mov	r0, r3
 80034a0:	f002 f910 	bl	80056c4 <pvPortMalloc>
 80034a4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00f      	beq.n	80034cc <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	3350      	adds	r3, #80	; 0x50
 80034b0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80034ba:	79fa      	ldrb	r2, [r7, #7]
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	4613      	mov	r3, r2
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	68b9      	ldr	r1, [r7, #8]
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 f805 	bl	80034d6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80034cc:	69bb      	ldr	r3, [r7, #24]
	}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3720      	adds	r7, #32
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b084      	sub	sp, #16
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]
 80034e2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d103      	bne.n	80034f2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	e002      	b.n	80034f8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003504:	2101      	movs	r1, #1
 8003506:	69b8      	ldr	r0, [r7, #24]
 8003508:	f7ff fece 	bl	80032a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	78fa      	ldrb	r2, [r7, #3]
 8003510:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003514:	bf00      	nop
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08e      	sub	sp, #56	; 0x38
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800352a:	2300      	movs	r3, #0
 800352c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003534:	2b00      	cmp	r3, #0
 8003536:	d109      	bne.n	800354c <xQueueGenericSend+0x30>
 8003538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	62bb      	str	r3, [r7, #40]	; 0x28
 800354a:	e7fe      	b.n	800354a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d103      	bne.n	800355a <xQueueGenericSend+0x3e>
 8003552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <xQueueGenericSend+0x42>
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <xQueueGenericSend+0x44>
 800355e:	2300      	movs	r3, #0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d109      	bne.n	8003578 <xQueueGenericSend+0x5c>
 8003564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003568:	f383 8811 	msr	BASEPRI, r3
 800356c:	f3bf 8f6f 	isb	sy
 8003570:	f3bf 8f4f 	dsb	sy
 8003574:	627b      	str	r3, [r7, #36]	; 0x24
 8003576:	e7fe      	b.n	8003576 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d103      	bne.n	8003586 <xQueueGenericSend+0x6a>
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <xQueueGenericSend+0x6e>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <xQueueGenericSend+0x70>
 800358a:	2300      	movs	r3, #0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d109      	bne.n	80035a4 <xQueueGenericSend+0x88>
 8003590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	623b      	str	r3, [r7, #32]
 80035a2:	e7fe      	b.n	80035a2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035a4:	f001 fa14 	bl	80049d0 <xTaskGetSchedulerState>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d102      	bne.n	80035b4 <xQueueGenericSend+0x98>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <xQueueGenericSend+0x9c>
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <xQueueGenericSend+0x9e>
 80035b8:	2300      	movs	r3, #0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d109      	bne.n	80035d2 <xQueueGenericSend+0xb6>
 80035be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c2:	f383 8811 	msr	BASEPRI, r3
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	61fb      	str	r3, [r7, #28]
 80035d0:	e7fe      	b.n	80035d0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80035d2:	f001 ff81 	bl	80054d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035de:	429a      	cmp	r2, r3
 80035e0:	d302      	bcc.n	80035e8 <xQueueGenericSend+0xcc>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d129      	bne.n	800363c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	68b9      	ldr	r1, [r7, #8]
 80035ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035ee:	f000 fa7c 	bl	8003aea <prvCopyDataToQueue>
 80035f2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d010      	beq.n	800361e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fe:	3324      	adds	r3, #36	; 0x24
 8003600:	4618      	mov	r0, r3
 8003602:	f001 f82b 	bl	800465c <xTaskRemoveFromEventList>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d013      	beq.n	8003634 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800360c:	4b3f      	ldr	r3, [pc, #252]	; (800370c <xQueueGenericSend+0x1f0>)
 800360e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	e00a      	b.n	8003634 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800361e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003620:	2b00      	cmp	r3, #0
 8003622:	d007      	beq.n	8003634 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003624:	4b39      	ldr	r3, [pc, #228]	; (800370c <xQueueGenericSend+0x1f0>)
 8003626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003634:	f001 ff7e 	bl	8005534 <vPortExitCritical>
				return pdPASS;
 8003638:	2301      	movs	r3, #1
 800363a:	e063      	b.n	8003704 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d103      	bne.n	800364a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003642:	f001 ff77 	bl	8005534 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003646:	2300      	movs	r3, #0
 8003648:	e05c      	b.n	8003704 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800364a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364c:	2b00      	cmp	r3, #0
 800364e:	d106      	bne.n	800365e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003650:	f107 0314 	add.w	r3, r7, #20
 8003654:	4618      	mov	r0, r3
 8003656:	f001 f863 	bl	8004720 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800365a:	2301      	movs	r3, #1
 800365c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800365e:	f001 ff69 	bl	8005534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003662:	f000 fddb 	bl	800421c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003666:	f001 ff37 	bl	80054d8 <vPortEnterCritical>
 800366a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003670:	b25b      	sxtb	r3, r3
 8003672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003676:	d103      	bne.n	8003680 <xQueueGenericSend+0x164>
 8003678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003682:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003686:	b25b      	sxtb	r3, r3
 8003688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800368c:	d103      	bne.n	8003696 <xQueueGenericSend+0x17a>
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003696:	f001 ff4d 	bl	8005534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800369a:	1d3a      	adds	r2, r7, #4
 800369c:	f107 0314 	add.w	r3, r7, #20
 80036a0:	4611      	mov	r1, r2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f001 f852 	bl	800474c <xTaskCheckForTimeOut>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d124      	bne.n	80036f8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80036ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036b0:	f000 fb13 	bl	8003cda <prvIsQueueFull>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d018      	beq.n	80036ec <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036bc:	3310      	adds	r3, #16
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	4611      	mov	r1, r2
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 ff7c 	bl	80045c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80036c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036ca:	f000 fa9e 	bl	8003c0a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80036ce:	f000 fdb3 	bl	8004238 <xTaskResumeAll>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f47f af7c 	bne.w	80035d2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80036da:	4b0c      	ldr	r3, [pc, #48]	; (800370c <xQueueGenericSend+0x1f0>)
 80036dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	f3bf 8f6f 	isb	sy
 80036ea:	e772      	b.n	80035d2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80036ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036ee:	f000 fa8c 	bl	8003c0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036f2:	f000 fda1 	bl	8004238 <xTaskResumeAll>
 80036f6:	e76c      	b.n	80035d2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80036f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036fa:	f000 fa86 	bl	8003c0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036fe:	f000 fd9b 	bl	8004238 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003702:	2300      	movs	r3, #0
		}
	}
}
 8003704:	4618      	mov	r0, r3
 8003706:	3738      	adds	r7, #56	; 0x38
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	e000ed04 	.word	0xe000ed04

08003710 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08e      	sub	sp, #56	; 0x38
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003724:	2b00      	cmp	r3, #0
 8003726:	d109      	bne.n	800373c <xQueueGenericSendFromISR+0x2c>
 8003728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
 800373a:	e7fe      	b.n	800373a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d103      	bne.n	800374a <xQueueGenericSendFromISR+0x3a>
 8003742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <xQueueGenericSendFromISR+0x3e>
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <xQueueGenericSendFromISR+0x40>
 800374e:	2300      	movs	r3, #0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d109      	bne.n	8003768 <xQueueGenericSendFromISR+0x58>
 8003754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003758:	f383 8811 	msr	BASEPRI, r3
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	623b      	str	r3, [r7, #32]
 8003766:	e7fe      	b.n	8003766 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d103      	bne.n	8003776 <xQueueGenericSendFromISR+0x66>
 800376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <xQueueGenericSendFromISR+0x6a>
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <xQueueGenericSendFromISR+0x6c>
 800377a:	2300      	movs	r3, #0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d109      	bne.n	8003794 <xQueueGenericSendFromISR+0x84>
 8003780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	61fb      	str	r3, [r7, #28]
 8003792:	e7fe      	b.n	8003792 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003794:	f001 ff5a 	bl	800564c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003798:	f3ef 8211 	mrs	r2, BASEPRI
 800379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	61ba      	str	r2, [r7, #24]
 80037ae:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80037b0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80037b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037bc:	429a      	cmp	r2, r3
 80037be:	d302      	bcc.n	80037c6 <xQueueGenericSendFromISR+0xb6>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d12c      	bne.n	8003820 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	68b9      	ldr	r1, [r7, #8]
 80037d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037d6:	f000 f988 	bl	8003aea <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80037da:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80037de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037e2:	d112      	bne.n	800380a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d016      	beq.n	800381a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ee:	3324      	adds	r3, #36	; 0x24
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 ff33 	bl	800465c <xTaskRemoveFromEventList>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00e      	beq.n	800381a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00b      	beq.n	800381a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	e007      	b.n	800381a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800380a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800380e:	3301      	adds	r3, #1
 8003810:	b2db      	uxtb	r3, r3
 8003812:	b25a      	sxtb	r2, r3
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800381a:	2301      	movs	r3, #1
 800381c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800381e:	e001      	b.n	8003824 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003820:	2300      	movs	r3, #0
 8003822:	637b      	str	r3, [r7, #52]	; 0x34
 8003824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003826:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800382e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003830:	4618      	mov	r0, r3
 8003832:	3738      	adds	r7, #56	; 0x38
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08c      	sub	sp, #48	; 0x30
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003844:	2300      	movs	r3, #0
 8003846:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800384c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <xQueueReceive+0x2e>
	__asm volatile
 8003852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003856:	f383 8811 	msr	BASEPRI, r3
 800385a:	f3bf 8f6f 	isb	sy
 800385e:	f3bf 8f4f 	dsb	sy
 8003862:	623b      	str	r3, [r7, #32]
 8003864:	e7fe      	b.n	8003864 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d103      	bne.n	8003874 <xQueueReceive+0x3c>
 800386c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <xQueueReceive+0x40>
 8003874:	2301      	movs	r3, #1
 8003876:	e000      	b.n	800387a <xQueueReceive+0x42>
 8003878:	2300      	movs	r3, #0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d109      	bne.n	8003892 <xQueueReceive+0x5a>
 800387e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003882:	f383 8811 	msr	BASEPRI, r3
 8003886:	f3bf 8f6f 	isb	sy
 800388a:	f3bf 8f4f 	dsb	sy
 800388e:	61fb      	str	r3, [r7, #28]
 8003890:	e7fe      	b.n	8003890 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003892:	f001 f89d 	bl	80049d0 <xTaskGetSchedulerState>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d102      	bne.n	80038a2 <xQueueReceive+0x6a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <xQueueReceive+0x6e>
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <xQueueReceive+0x70>
 80038a6:	2300      	movs	r3, #0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d109      	bne.n	80038c0 <xQueueReceive+0x88>
 80038ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	61bb      	str	r3, [r7, #24]
 80038be:	e7fe      	b.n	80038be <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80038c0:	f001 fe0a 	bl	80054d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d01f      	beq.n	8003910 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80038d0:	68b9      	ldr	r1, [r7, #8]
 80038d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038d4:	f000 f973 	bl	8003bbe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	1e5a      	subs	r2, r3, #1
 80038dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038de:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00f      	beq.n	8003908 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ea:	3310      	adds	r3, #16
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 feb5 	bl	800465c <xTaskRemoveFromEventList>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d007      	beq.n	8003908 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80038f8:	4b3c      	ldr	r3, [pc, #240]	; (80039ec <xQueueReceive+0x1b4>)
 80038fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003908:	f001 fe14 	bl	8005534 <vPortExitCritical>
				return pdPASS;
 800390c:	2301      	movs	r3, #1
 800390e:	e069      	b.n	80039e4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d103      	bne.n	800391e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003916:	f001 fe0d 	bl	8005534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800391a:	2300      	movs	r3, #0
 800391c:	e062      	b.n	80039e4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800391e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003920:	2b00      	cmp	r3, #0
 8003922:	d106      	bne.n	8003932 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003924:	f107 0310 	add.w	r3, r7, #16
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fef9 	bl	8004720 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800392e:	2301      	movs	r3, #1
 8003930:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003932:	f001 fdff 	bl	8005534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003936:	f000 fc71 	bl	800421c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800393a:	f001 fdcd 	bl	80054d8 <vPortEnterCritical>
 800393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003940:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003944:	b25b      	sxtb	r3, r3
 8003946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800394a:	d103      	bne.n	8003954 <xQueueReceive+0x11c>
 800394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003956:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800395a:	b25b      	sxtb	r3, r3
 800395c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003960:	d103      	bne.n	800396a <xQueueReceive+0x132>
 8003962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800396a:	f001 fde3 	bl	8005534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800396e:	1d3a      	adds	r2, r7, #4
 8003970:	f107 0310 	add.w	r3, r7, #16
 8003974:	4611      	mov	r1, r2
 8003976:	4618      	mov	r0, r3
 8003978:	f000 fee8 	bl	800474c <xTaskCheckForTimeOut>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d123      	bne.n	80039ca <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003984:	f000 f993 	bl	8003cae <prvIsQueueEmpty>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d017      	beq.n	80039be <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800398e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003990:	3324      	adds	r3, #36	; 0x24
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	4611      	mov	r1, r2
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fe12 	bl	80045c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800399c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800399e:	f000 f934 	bl	8003c0a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80039a2:	f000 fc49 	bl	8004238 <xTaskResumeAll>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d189      	bne.n	80038c0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80039ac:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <xQueueReceive+0x1b4>)
 80039ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	e780      	b.n	80038c0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80039be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039c0:	f000 f923 	bl	8003c0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039c4:	f000 fc38 	bl	8004238 <xTaskResumeAll>
 80039c8:	e77a      	b.n	80038c0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80039ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039cc:	f000 f91d 	bl	8003c0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039d0:	f000 fc32 	bl	8004238 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039d6:	f000 f96a 	bl	8003cae <prvIsQueueEmpty>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f43f af6f 	beq.w	80038c0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80039e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3730      	adds	r7, #48	; 0x30
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	e000ed04 	.word	0xe000ed04

080039f0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08e      	sub	sp, #56	; 0x38
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d109      	bne.n	8003a1a <xQueueReceiveFromISR+0x2a>
 8003a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0a:	f383 8811 	msr	BASEPRI, r3
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	623b      	str	r3, [r7, #32]
 8003a18:	e7fe      	b.n	8003a18 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d103      	bne.n	8003a28 <xQueueReceiveFromISR+0x38>
 8003a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <xQueueReceiveFromISR+0x3c>
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e000      	b.n	8003a2e <xQueueReceiveFromISR+0x3e>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d109      	bne.n	8003a46 <xQueueReceiveFromISR+0x56>
 8003a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a36:	f383 8811 	msr	BASEPRI, r3
 8003a3a:	f3bf 8f6f 	isb	sy
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	61fb      	str	r3, [r7, #28]
 8003a44:	e7fe      	b.n	8003a44 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a46:	f001 fe01 	bl	800564c <vPortValidateInterruptPriority>
	__asm volatile
 8003a4a:	f3ef 8211 	mrs	r2, BASEPRI
 8003a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a52:	f383 8811 	msr	BASEPRI, r3
 8003a56:	f3bf 8f6f 	isb	sy
 8003a5a:	f3bf 8f4f 	dsb	sy
 8003a5e:	61ba      	str	r2, [r7, #24]
 8003a60:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003a62:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d02f      	beq.n	8003ad2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a7c:	68b9      	ldr	r1, [r7, #8]
 8003a7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a80:	f000 f89d 	bl	8003bbe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a86:	1e5a      	subs	r2, r3, #1
 8003a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003a8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a94:	d112      	bne.n	8003abc <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d016      	beq.n	8003acc <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa0:	3310      	adds	r3, #16
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fdda 	bl	800465c <xTaskRemoveFromEventList>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00e      	beq.n	8003acc <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00b      	beq.n	8003acc <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	e007      	b.n	8003acc <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	b25a      	sxtb	r2, r3
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003acc:	2301      	movs	r3, #1
 8003ace:	637b      	str	r3, [r7, #52]	; 0x34
 8003ad0:	e001      	b.n	8003ad6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3738      	adds	r7, #56	; 0x38
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b086      	sub	sp, #24
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10d      	bne.n	8003b24 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d14d      	bne.n	8003bac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 ff79 	bl	8004a0c <xTaskPriorityDisinherit>
 8003b1a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	e043      	b.n	8003bac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d119      	bne.n	8003b5e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6898      	ldr	r0, [r3, #8]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	461a      	mov	r2, r3
 8003b34:	68b9      	ldr	r1, [r7, #8]
 8003b36:	f001 ffc7 	bl	8005ac8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	441a      	add	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d32b      	bcc.n	8003bac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	609a      	str	r2, [r3, #8]
 8003b5c:	e026      	b.n	8003bac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	68d8      	ldr	r0, [r3, #12]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	461a      	mov	r2, r3
 8003b68:	68b9      	ldr	r1, [r7, #8]
 8003b6a:	f001 ffad 	bl	8005ac8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	425b      	negs	r3, r3
 8003b78:	441a      	add	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d207      	bcs.n	8003b9a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	425b      	negs	r3, r3
 8003b94:	441a      	add	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d105      	bne.n	8003bac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1c5a      	adds	r2, r3, #1
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003bb4:	697b      	ldr	r3, [r7, #20]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d018      	beq.n	8003c02 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	441a      	add	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d303      	bcc.n	8003bf2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68d9      	ldr	r1, [r3, #12]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	6838      	ldr	r0, [r7, #0]
 8003bfe:	f001 ff63 	bl	8005ac8 <memcpy>
	}
}
 8003c02:	bf00      	nop
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c12:	f001 fc61 	bl	80054d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c1c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c1e:	e011      	b.n	8003c44 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d012      	beq.n	8003c4e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3324      	adds	r3, #36	; 0x24
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fd15 	bl	800465c <xTaskRemoveFromEventList>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c38:	f000 fde8 	bl	800480c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	dce9      	bgt.n	8003c20 <prvUnlockQueue+0x16>
 8003c4c:	e000      	b.n	8003c50 <prvUnlockQueue+0x46>
					break;
 8003c4e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	22ff      	movs	r2, #255	; 0xff
 8003c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003c58:	f001 fc6c 	bl	8005534 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c5c:	f001 fc3c 	bl	80054d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c66:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c68:	e011      	b.n	8003c8e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d012      	beq.n	8003c98 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3310      	adds	r3, #16
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 fcf0 	bl	800465c <xTaskRemoveFromEventList>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c82:	f000 fdc3 	bl	800480c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c86:	7bbb      	ldrb	r3, [r7, #14]
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	dce9      	bgt.n	8003c6a <prvUnlockQueue+0x60>
 8003c96:	e000      	b.n	8003c9a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003c98:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	22ff      	movs	r2, #255	; 0xff
 8003c9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003ca2:	f001 fc47 	bl	8005534 <vPortExitCritical>
}
 8003ca6:	bf00      	nop
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b084      	sub	sp, #16
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cb6:	f001 fc0f 	bl	80054d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d102      	bne.n	8003cc8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	e001      	b.n	8003ccc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ccc:	f001 fc32 	bl	8005534 <vPortExitCritical>

	return xReturn;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b084      	sub	sp, #16
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ce2:	f001 fbf9 	bl	80054d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d102      	bne.n	8003cf8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	e001      	b.n	8003cfc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003cfc:	f001 fc1a 	bl	8005534 <vPortExitCritical>

	return xReturn;
 8003d00:	68fb      	ldr	r3, [r7, #12]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	e014      	b.n	8003d46 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d1c:	4a0e      	ldr	r2, [pc, #56]	; (8003d58 <vQueueAddToRegistry+0x4c>)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10b      	bne.n	8003d40 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d28:	490b      	ldr	r1, [pc, #44]	; (8003d58 <vQueueAddToRegistry+0x4c>)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d32:	4a09      	ldr	r2, [pc, #36]	; (8003d58 <vQueueAddToRegistry+0x4c>)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	4413      	add	r3, r2
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d3e:	e005      	b.n	8003d4c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	3301      	adds	r3, #1
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2b07      	cmp	r3, #7
 8003d4a:	d9e7      	bls.n	8003d1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d4c:	bf00      	nop
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc80      	pop	{r7}
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	20001cd4 	.word	0x20001cd4

08003d5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003d6c:	f001 fbb4 	bl	80054d8 <vPortEnterCritical>
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d76:	b25b      	sxtb	r3, r3
 8003d78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d7c:	d103      	bne.n	8003d86 <vQueueWaitForMessageRestricted+0x2a>
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d8c:	b25b      	sxtb	r3, r3
 8003d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d92:	d103      	bne.n	8003d9c <vQueueWaitForMessageRestricted+0x40>
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d9c:	f001 fbca 	bl	8005534 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d106      	bne.n	8003db6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	3324      	adds	r3, #36	; 0x24
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	68b9      	ldr	r1, [r7, #8]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 fc29 	bl	8004608 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003db6:	6978      	ldr	r0, [r7, #20]
 8003db8:	f7ff ff27 	bl	8003c0a <prvUnlockQueue>
	}
 8003dbc:	bf00      	nop
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08e      	sub	sp, #56	; 0x38
 8003dc8:	af04      	add	r7, sp, #16
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d109      	bne.n	8003dec <xTaskCreateStatic+0x28>
	__asm volatile
 8003dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ddc:	f383 8811 	msr	BASEPRI, r3
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	623b      	str	r3, [r7, #32]
 8003dea:	e7fe      	b.n	8003dea <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d109      	bne.n	8003e06 <xTaskCreateStatic+0x42>
 8003df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	61fb      	str	r3, [r7, #28]
 8003e04:	e7fe      	b.n	8003e04 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e06:	235c      	movs	r3, #92	; 0x5c
 8003e08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	2b5c      	cmp	r3, #92	; 0x5c
 8003e0e:	d009      	beq.n	8003e24 <xTaskCreateStatic+0x60>
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	61bb      	str	r3, [r7, #24]
 8003e22:	e7fe      	b.n	8003e22 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01e      	beq.n	8003e68 <xTaskCreateStatic+0xa4>
 8003e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d01b      	beq.n	8003e68 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e42:	2300      	movs	r3, #0
 8003e44:	9303      	str	r3, [sp, #12]
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	9302      	str	r3, [sp, #8]
 8003e4a:	f107 0314 	add.w	r3, r7, #20
 8003e4e:	9301      	str	r3, [sp, #4]
 8003e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	68b9      	ldr	r1, [r7, #8]
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 f850 	bl	8003f00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e62:	f000 f8d3 	bl	800400c <prvAddNewTaskToReadyList>
 8003e66:	e001      	b.n	8003e6c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e6c:	697b      	ldr	r3, [r7, #20]
	}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3728      	adds	r7, #40	; 0x28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b08c      	sub	sp, #48	; 0x30
 8003e7a:	af04      	add	r7, sp, #16
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	603b      	str	r3, [r7, #0]
 8003e82:	4613      	mov	r3, r2
 8003e84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e86:	88fb      	ldrh	r3, [r7, #6]
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f001 fc1a 	bl	80056c4 <pvPortMalloc>
 8003e90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00e      	beq.n	8003eb6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003e98:	205c      	movs	r0, #92	; 0x5c
 8003e9a:	f001 fc13 	bl	80056c4 <pvPortMalloc>
 8003e9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30
 8003eac:	e005      	b.n	8003eba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003eae:	6978      	ldr	r0, [r7, #20]
 8003eb0:	f001 fcca 	bl	8005848 <vPortFree>
 8003eb4:	e001      	b.n	8003eba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d017      	beq.n	8003ef0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ec8:	88fa      	ldrh	r2, [r7, #6]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	9303      	str	r3, [sp, #12]
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	9302      	str	r3, [sp, #8]
 8003ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed4:	9301      	str	r3, [sp, #4]
 8003ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	68b9      	ldr	r1, [r7, #8]
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 f80e 	bl	8003f00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ee4:	69f8      	ldr	r0, [r7, #28]
 8003ee6:	f000 f891 	bl	800400c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003eea:	2301      	movs	r3, #1
 8003eec:	61bb      	str	r3, [r7, #24]
 8003eee:	e002      	b.n	8003ef6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ef4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ef6:	69bb      	ldr	r3, [r7, #24]
	}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3720      	adds	r7, #32
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f10:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	461a      	mov	r2, r3
 8003f18:	21a5      	movs	r1, #165	; 0xa5
 8003f1a:	f001 fde0 	bl	8005ade <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	f023 0307 	bic.w	r3, r3, #7
 8003f36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d009      	beq.n	8003f56 <prvInitialiseNewTask+0x56>
 8003f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f46:	f383 8811 	msr	BASEPRI, r3
 8003f4a:	f3bf 8f6f 	isb	sy
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	e7fe      	b.n	8003f54 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f56:	2300      	movs	r3, #0
 8003f58:	61fb      	str	r3, [r7, #28]
 8003f5a:	e012      	b.n	8003f82 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	4413      	add	r3, r2
 8003f62:	7819      	ldrb	r1, [r3, #0]
 8003f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	4413      	add	r3, r2
 8003f6a:	3334      	adds	r3, #52	; 0x34
 8003f6c:	460a      	mov	r2, r1
 8003f6e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	4413      	add	r3, r2
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d006      	beq.n	8003f8a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	2b0f      	cmp	r3, #15
 8003f86:	d9e9      	bls.n	8003f5c <prvInitialiseNewTask+0x5c>
 8003f88:	e000      	b.n	8003f8c <prvInitialiseNewTask+0x8c>
		{
			break;
 8003f8a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f96:	2b37      	cmp	r3, #55	; 0x37
 8003f98:	d901      	bls.n	8003f9e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f9a:	2337      	movs	r3, #55	; 0x37
 8003f9c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fa2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fa8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fac:	2200      	movs	r2, #0
 8003fae:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff f8e6 	bl	8003186 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbc:	3318      	adds	r3, #24
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff f8e1 	bl	8003186 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fc8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fcc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fd8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fdc:	2200      	movs	r2, #0
 8003fde:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	68f9      	ldr	r1, [r7, #12]
 8003fec:	69b8      	ldr	r0, [r7, #24]
 8003fee:	f001 f985 	bl	80052fc <pxPortInitialiseStack>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004002:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004004:	bf00      	nop
 8004006:	3720      	adds	r7, #32
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004014:	f001 fa60 	bl	80054d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004018:	4b2d      	ldr	r3, [pc, #180]	; (80040d0 <prvAddNewTaskToReadyList+0xc4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3301      	adds	r3, #1
 800401e:	4a2c      	ldr	r2, [pc, #176]	; (80040d0 <prvAddNewTaskToReadyList+0xc4>)
 8004020:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004022:	4b2c      	ldr	r3, [pc, #176]	; (80040d4 <prvAddNewTaskToReadyList+0xc8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d109      	bne.n	800403e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800402a:	4a2a      	ldr	r2, [pc, #168]	; (80040d4 <prvAddNewTaskToReadyList+0xc8>)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004030:	4b27      	ldr	r3, [pc, #156]	; (80040d0 <prvAddNewTaskToReadyList+0xc4>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d110      	bne.n	800405a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004038:	f000 fc0c 	bl	8004854 <prvInitialiseTaskLists>
 800403c:	e00d      	b.n	800405a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800403e:	4b26      	ldr	r3, [pc, #152]	; (80040d8 <prvAddNewTaskToReadyList+0xcc>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d109      	bne.n	800405a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004046:	4b23      	ldr	r3, [pc, #140]	; (80040d4 <prvAddNewTaskToReadyList+0xc8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004050:	429a      	cmp	r2, r3
 8004052:	d802      	bhi.n	800405a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004054:	4a1f      	ldr	r2, [pc, #124]	; (80040d4 <prvAddNewTaskToReadyList+0xc8>)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800405a:	4b20      	ldr	r3, [pc, #128]	; (80040dc <prvAddNewTaskToReadyList+0xd0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3301      	adds	r3, #1
 8004060:	4a1e      	ldr	r2, [pc, #120]	; (80040dc <prvAddNewTaskToReadyList+0xd0>)
 8004062:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004064:	4b1d      	ldr	r3, [pc, #116]	; (80040dc <prvAddNewTaskToReadyList+0xd0>)
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004070:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <prvAddNewTaskToReadyList+0xd4>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	429a      	cmp	r2, r3
 8004076:	d903      	bls.n	8004080 <prvAddNewTaskToReadyList+0x74>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	4a18      	ldr	r2, [pc, #96]	; (80040e0 <prvAddNewTaskToReadyList+0xd4>)
 800407e:	6013      	str	r3, [r2, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4a15      	ldr	r2, [pc, #84]	; (80040e4 <prvAddNewTaskToReadyList+0xd8>)
 800408e:	441a      	add	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3304      	adds	r3, #4
 8004094:	4619      	mov	r1, r3
 8004096:	4610      	mov	r0, r2
 8004098:	f7ff f881 	bl	800319e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800409c:	f001 fa4a 	bl	8005534 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040a0:	4b0d      	ldr	r3, [pc, #52]	; (80040d8 <prvAddNewTaskToReadyList+0xcc>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00e      	beq.n	80040c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040a8:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <prvAddNewTaskToReadyList+0xc8>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d207      	bcs.n	80040c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80040b6:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <prvAddNewTaskToReadyList+0xdc>)
 80040b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040c6:	bf00      	nop
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	20000dfc 	.word	0x20000dfc
 80040d4:	20000928 	.word	0x20000928
 80040d8:	20000e08 	.word	0x20000e08
 80040dc:	20000e18 	.word	0x20000e18
 80040e0:	20000e04 	.word	0x20000e04
 80040e4:	2000092c 	.word	0x2000092c
 80040e8:	e000ed04 	.word	0xe000ed04

080040ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80040f4:	2300      	movs	r3, #0
 80040f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d016      	beq.n	800412c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80040fe:	4b13      	ldr	r3, [pc, #76]	; (800414c <vTaskDelay+0x60>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d009      	beq.n	800411a <vTaskDelay+0x2e>
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	60bb      	str	r3, [r7, #8]
 8004118:	e7fe      	b.n	8004118 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800411a:	f000 f87f 	bl	800421c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800411e:	2100      	movs	r1, #0
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 fcdf 	bl	8004ae4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004126:	f000 f887 	bl	8004238 <xTaskResumeAll>
 800412a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d107      	bne.n	8004142 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004132:	4b07      	ldr	r3, [pc, #28]	; (8004150 <vTaskDelay+0x64>)
 8004134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	f3bf 8f4f 	dsb	sy
 800413e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004142:	bf00      	nop
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	20000e24 	.word	0x20000e24
 8004150:	e000ed04 	.word	0xe000ed04

08004154 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b08a      	sub	sp, #40	; 0x28
 8004158:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800415a:	2300      	movs	r3, #0
 800415c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800415e:	2300      	movs	r3, #0
 8004160:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004162:	463a      	mov	r2, r7
 8004164:	1d39      	adds	r1, r7, #4
 8004166:	f107 0308 	add.w	r3, r7, #8
 800416a:	4618      	mov	r0, r3
 800416c:	f7fe ffba 	bl	80030e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004170:	6839      	ldr	r1, [r7, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	9202      	str	r2, [sp, #8]
 8004178:	9301      	str	r3, [sp, #4]
 800417a:	2300      	movs	r3, #0
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	2300      	movs	r3, #0
 8004180:	460a      	mov	r2, r1
 8004182:	4920      	ldr	r1, [pc, #128]	; (8004204 <vTaskStartScheduler+0xb0>)
 8004184:	4820      	ldr	r0, [pc, #128]	; (8004208 <vTaskStartScheduler+0xb4>)
 8004186:	f7ff fe1d 	bl	8003dc4 <xTaskCreateStatic>
 800418a:	4602      	mov	r2, r0
 800418c:	4b1f      	ldr	r3, [pc, #124]	; (800420c <vTaskStartScheduler+0xb8>)
 800418e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004190:	4b1e      	ldr	r3, [pc, #120]	; (800420c <vTaskStartScheduler+0xb8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004198:	2301      	movs	r3, #1
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	e001      	b.n	80041a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d102      	bne.n	80041ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80041a8:	f000 fcf0 	bl	8004b8c <xTimerCreateTimerTask>
 80041ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d115      	bne.n	80041e0 <vTaskStartScheduler+0x8c>
 80041b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b8:	f383 8811 	msr	BASEPRI, r3
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80041c6:	4b12      	ldr	r3, [pc, #72]	; (8004210 <vTaskStartScheduler+0xbc>)
 80041c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80041ce:	4b11      	ldr	r3, [pc, #68]	; (8004214 <vTaskStartScheduler+0xc0>)
 80041d0:	2201      	movs	r2, #1
 80041d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80041d4:	4b10      	ldr	r3, [pc, #64]	; (8004218 <vTaskStartScheduler+0xc4>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80041da:	f001 f90d 	bl	80053f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80041de:	e00d      	b.n	80041fc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041e6:	d109      	bne.n	80041fc <vTaskStartScheduler+0xa8>
 80041e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	e7fe      	b.n	80041fa <vTaskStartScheduler+0xa6>
}
 80041fc:	bf00      	nop
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	080065f8 	.word	0x080065f8
 8004208:	08004825 	.word	0x08004825
 800420c:	20000e20 	.word	0x20000e20
 8004210:	20000e1c 	.word	0x20000e1c
 8004214:	20000e08 	.word	0x20000e08
 8004218:	20000e00 	.word	0x20000e00

0800421c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004220:	4b04      	ldr	r3, [pc, #16]	; (8004234 <vTaskSuspendAll+0x18>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3301      	adds	r3, #1
 8004226:	4a03      	ldr	r2, [pc, #12]	; (8004234 <vTaskSuspendAll+0x18>)
 8004228:	6013      	str	r3, [r2, #0]
}
 800422a:	bf00      	nop
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	20000e24 	.word	0x20000e24

08004238 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004242:	2300      	movs	r3, #0
 8004244:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004246:	4b41      	ldr	r3, [pc, #260]	; (800434c <xTaskResumeAll+0x114>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d109      	bne.n	8004262 <xTaskResumeAll+0x2a>
 800424e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	e7fe      	b.n	8004260 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004262:	f001 f939 	bl	80054d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004266:	4b39      	ldr	r3, [pc, #228]	; (800434c <xTaskResumeAll+0x114>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3b01      	subs	r3, #1
 800426c:	4a37      	ldr	r2, [pc, #220]	; (800434c <xTaskResumeAll+0x114>)
 800426e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004270:	4b36      	ldr	r3, [pc, #216]	; (800434c <xTaskResumeAll+0x114>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d162      	bne.n	800433e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004278:	4b35      	ldr	r3, [pc, #212]	; (8004350 <xTaskResumeAll+0x118>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d05e      	beq.n	800433e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004280:	e02f      	b.n	80042e2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004282:	4b34      	ldr	r3, [pc, #208]	; (8004354 <xTaskResumeAll+0x11c>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3318      	adds	r3, #24
 800428e:	4618      	mov	r0, r3
 8004290:	f7fe ffe0 	bl	8003254 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	3304      	adds	r3, #4
 8004298:	4618      	mov	r0, r3
 800429a:	f7fe ffdb 	bl	8003254 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a2:	4b2d      	ldr	r3, [pc, #180]	; (8004358 <xTaskResumeAll+0x120>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d903      	bls.n	80042b2 <xTaskResumeAll+0x7a>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ae:	4a2a      	ldr	r2, [pc, #168]	; (8004358 <xTaskResumeAll+0x120>)
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b6:	4613      	mov	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4a27      	ldr	r2, [pc, #156]	; (800435c <xTaskResumeAll+0x124>)
 80042c0:	441a      	add	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3304      	adds	r3, #4
 80042c6:	4619      	mov	r1, r3
 80042c8:	4610      	mov	r0, r2
 80042ca:	f7fe ff68 	bl	800319e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d2:	4b23      	ldr	r3, [pc, #140]	; (8004360 <xTaskResumeAll+0x128>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	429a      	cmp	r2, r3
 80042da:	d302      	bcc.n	80042e2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80042dc:	4b21      	ldr	r3, [pc, #132]	; (8004364 <xTaskResumeAll+0x12c>)
 80042de:	2201      	movs	r2, #1
 80042e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042e2:	4b1c      	ldr	r3, [pc, #112]	; (8004354 <xTaskResumeAll+0x11c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1cb      	bne.n	8004282 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80042f0:	f000 fb4a 	bl	8004988 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80042f4:	4b1c      	ldr	r3, [pc, #112]	; (8004368 <xTaskResumeAll+0x130>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d010      	beq.n	8004322 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004300:	f000 f844 	bl	800438c <xTaskIncrementTick>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800430a:	4b16      	ldr	r3, [pc, #88]	; (8004364 <xTaskResumeAll+0x12c>)
 800430c:	2201      	movs	r2, #1
 800430e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3b01      	subs	r3, #1
 8004314:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1f1      	bne.n	8004300 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800431c:	4b12      	ldr	r3, [pc, #72]	; (8004368 <xTaskResumeAll+0x130>)
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004322:	4b10      	ldr	r3, [pc, #64]	; (8004364 <xTaskResumeAll+0x12c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d009      	beq.n	800433e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800432a:	2301      	movs	r3, #1
 800432c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800432e:	4b0f      	ldr	r3, [pc, #60]	; (800436c <xTaskResumeAll+0x134>)
 8004330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800433e:	f001 f8f9 	bl	8005534 <vPortExitCritical>

	return xAlreadyYielded;
 8004342:	68bb      	ldr	r3, [r7, #8]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	20000e24 	.word	0x20000e24
 8004350:	20000dfc 	.word	0x20000dfc
 8004354:	20000dbc 	.word	0x20000dbc
 8004358:	20000e04 	.word	0x20000e04
 800435c:	2000092c 	.word	0x2000092c
 8004360:	20000928 	.word	0x20000928
 8004364:	20000e10 	.word	0x20000e10
 8004368:	20000e0c 	.word	0x20000e0c
 800436c:	e000ed04 	.word	0xe000ed04

08004370 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004376:	4b04      	ldr	r3, [pc, #16]	; (8004388 <xTaskGetTickCount+0x18>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800437c:	687b      	ldr	r3, [r7, #4]
}
 800437e:	4618      	mov	r0, r3
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	bc80      	pop	{r7}
 8004386:	4770      	bx	lr
 8004388:	20000e00 	.word	0x20000e00

0800438c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004392:	2300      	movs	r3, #0
 8004394:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004396:	4b51      	ldr	r3, [pc, #324]	; (80044dc <xTaskIncrementTick+0x150>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	f040 808d 	bne.w	80044ba <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80043a0:	4b4f      	ldr	r3, [pc, #316]	; (80044e0 <xTaskIncrementTick+0x154>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3301      	adds	r3, #1
 80043a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80043a8:	4a4d      	ldr	r2, [pc, #308]	; (80044e0 <xTaskIncrementTick+0x154>)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d11f      	bne.n	80043f4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80043b4:	4b4b      	ldr	r3, [pc, #300]	; (80044e4 <xTaskIncrementTick+0x158>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d009      	beq.n	80043d2 <xTaskIncrementTick+0x46>
 80043be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	e7fe      	b.n	80043d0 <xTaskIncrementTick+0x44>
 80043d2:	4b44      	ldr	r3, [pc, #272]	; (80044e4 <xTaskIncrementTick+0x158>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	4b43      	ldr	r3, [pc, #268]	; (80044e8 <xTaskIncrementTick+0x15c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a41      	ldr	r2, [pc, #260]	; (80044e4 <xTaskIncrementTick+0x158>)
 80043de:	6013      	str	r3, [r2, #0]
 80043e0:	4a41      	ldr	r2, [pc, #260]	; (80044e8 <xTaskIncrementTick+0x15c>)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	4b41      	ldr	r3, [pc, #260]	; (80044ec <xTaskIncrementTick+0x160>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3301      	adds	r3, #1
 80043ec:	4a3f      	ldr	r2, [pc, #252]	; (80044ec <xTaskIncrementTick+0x160>)
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	f000 faca 	bl	8004988 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043f4:	4b3e      	ldr	r3, [pc, #248]	; (80044f0 <xTaskIncrementTick+0x164>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d34e      	bcc.n	800449c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043fe:	4b39      	ldr	r3, [pc, #228]	; (80044e4 <xTaskIncrementTick+0x158>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <xTaskIncrementTick+0x80>
 8004408:	2301      	movs	r3, #1
 800440a:	e000      	b.n	800440e <xTaskIncrementTick+0x82>
 800440c:	2300      	movs	r3, #0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d004      	beq.n	800441c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004412:	4b37      	ldr	r3, [pc, #220]	; (80044f0 <xTaskIncrementTick+0x164>)
 8004414:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004418:	601a      	str	r2, [r3, #0]
					break;
 800441a:	e03f      	b.n	800449c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800441c:	4b31      	ldr	r3, [pc, #196]	; (80044e4 <xTaskIncrementTick+0x158>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	429a      	cmp	r2, r3
 8004432:	d203      	bcs.n	800443c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004434:	4a2e      	ldr	r2, [pc, #184]	; (80044f0 <xTaskIncrementTick+0x164>)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6013      	str	r3, [r2, #0]
						break;
 800443a:	e02f      	b.n	800449c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	3304      	adds	r3, #4
 8004440:	4618      	mov	r0, r3
 8004442:	f7fe ff07 	bl	8003254 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444a:	2b00      	cmp	r3, #0
 800444c:	d004      	beq.n	8004458 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	3318      	adds	r3, #24
 8004452:	4618      	mov	r0, r3
 8004454:	f7fe fefe 	bl	8003254 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445c:	4b25      	ldr	r3, [pc, #148]	; (80044f4 <xTaskIncrementTick+0x168>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	429a      	cmp	r2, r3
 8004462:	d903      	bls.n	800446c <xTaskIncrementTick+0xe0>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004468:	4a22      	ldr	r2, [pc, #136]	; (80044f4 <xTaskIncrementTick+0x168>)
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4a1f      	ldr	r2, [pc, #124]	; (80044f8 <xTaskIncrementTick+0x16c>)
 800447a:	441a      	add	r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	3304      	adds	r3, #4
 8004480:	4619      	mov	r1, r3
 8004482:	4610      	mov	r0, r2
 8004484:	f7fe fe8b 	bl	800319e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448c:	4b1b      	ldr	r3, [pc, #108]	; (80044fc <xTaskIncrementTick+0x170>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004492:	429a      	cmp	r2, r3
 8004494:	d3b3      	bcc.n	80043fe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004496:	2301      	movs	r3, #1
 8004498:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800449a:	e7b0      	b.n	80043fe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800449c:	4b17      	ldr	r3, [pc, #92]	; (80044fc <xTaskIncrementTick+0x170>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a2:	4915      	ldr	r1, [pc, #84]	; (80044f8 <xTaskIncrementTick+0x16c>)
 80044a4:	4613      	mov	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	440b      	add	r3, r1
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d907      	bls.n	80044c4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80044b4:	2301      	movs	r3, #1
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	e004      	b.n	80044c4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80044ba:	4b11      	ldr	r3, [pc, #68]	; (8004500 <xTaskIncrementTick+0x174>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3301      	adds	r3, #1
 80044c0:	4a0f      	ldr	r2, [pc, #60]	; (8004500 <xTaskIncrementTick+0x174>)
 80044c2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80044c4:	4b0f      	ldr	r3, [pc, #60]	; (8004504 <xTaskIncrementTick+0x178>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80044cc:	2301      	movs	r3, #1
 80044ce:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80044d0:	697b      	ldr	r3, [r7, #20]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20000e24 	.word	0x20000e24
 80044e0:	20000e00 	.word	0x20000e00
 80044e4:	20000db4 	.word	0x20000db4
 80044e8:	20000db8 	.word	0x20000db8
 80044ec:	20000e14 	.word	0x20000e14
 80044f0:	20000e1c 	.word	0x20000e1c
 80044f4:	20000e04 	.word	0x20000e04
 80044f8:	2000092c 	.word	0x2000092c
 80044fc:	20000928 	.word	0x20000928
 8004500:	20000e0c 	.word	0x20000e0c
 8004504:	20000e10 	.word	0x20000e10

08004508 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800450e:	4b27      	ldr	r3, [pc, #156]	; (80045ac <vTaskSwitchContext+0xa4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004516:	4b26      	ldr	r3, [pc, #152]	; (80045b0 <vTaskSwitchContext+0xa8>)
 8004518:	2201      	movs	r2, #1
 800451a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800451c:	e040      	b.n	80045a0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800451e:	4b24      	ldr	r3, [pc, #144]	; (80045b0 <vTaskSwitchContext+0xa8>)
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004524:	4b23      	ldr	r3, [pc, #140]	; (80045b4 <vTaskSwitchContext+0xac>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	e00f      	b.n	800454c <vTaskSwitchContext+0x44>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d109      	bne.n	8004546 <vTaskSwitchContext+0x3e>
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	607b      	str	r3, [r7, #4]
 8004544:	e7fe      	b.n	8004544 <vTaskSwitchContext+0x3c>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	3b01      	subs	r3, #1
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	491a      	ldr	r1, [pc, #104]	; (80045b8 <vTaskSwitchContext+0xb0>)
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4613      	mov	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	440b      	add	r3, r1
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0e5      	beq.n	800452c <vTaskSwitchContext+0x24>
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	4613      	mov	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4a13      	ldr	r2, [pc, #76]	; (80045b8 <vTaskSwitchContext+0xb0>)
 800456c:	4413      	add	r3, r2
 800456e:	60bb      	str	r3, [r7, #8]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	605a      	str	r2, [r3, #4]
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	3308      	adds	r3, #8
 8004582:	429a      	cmp	r2, r3
 8004584:	d104      	bne.n	8004590 <vTaskSwitchContext+0x88>
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	605a      	str	r2, [r3, #4]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	4a09      	ldr	r2, [pc, #36]	; (80045bc <vTaskSwitchContext+0xb4>)
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	4a06      	ldr	r2, [pc, #24]	; (80045b4 <vTaskSwitchContext+0xac>)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6013      	str	r3, [r2, #0]
}
 80045a0:	bf00      	nop
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	20000e24 	.word	0x20000e24
 80045b0:	20000e10 	.word	0x20000e10
 80045b4:	20000e04 	.word	0x20000e04
 80045b8:	2000092c 	.word	0x2000092c
 80045bc:	20000928 	.word	0x20000928

080045c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d109      	bne.n	80045e4 <vTaskPlaceOnEventList+0x24>
 80045d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	e7fe      	b.n	80045e2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045e4:	4b07      	ldr	r3, [pc, #28]	; (8004604 <vTaskPlaceOnEventList+0x44>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3318      	adds	r3, #24
 80045ea:	4619      	mov	r1, r3
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7fe fdf9 	bl	80031e4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80045f2:	2101      	movs	r1, #1
 80045f4:	6838      	ldr	r0, [r7, #0]
 80045f6:	f000 fa75 	bl	8004ae4 <prvAddCurrentTaskToDelayedList>
}
 80045fa:	bf00      	nop
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	20000928 	.word	0x20000928

08004608 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d109      	bne.n	800462e <vTaskPlaceOnEventListRestricted+0x26>
 800461a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	e7fe      	b.n	800462c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800462e:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <vTaskPlaceOnEventListRestricted+0x50>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3318      	adds	r3, #24
 8004634:	4619      	mov	r1, r3
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f7fe fdb1 	bl	800319e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004646:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	68b8      	ldr	r0, [r7, #8]
 800464c:	f000 fa4a 	bl	8004ae4 <prvAddCurrentTaskToDelayedList>
	}
 8004650:	bf00      	nop
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	20000928 	.word	0x20000928

0800465c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d109      	bne.n	8004686 <xTaskRemoveFromEventList+0x2a>
 8004672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004676:	f383 8811 	msr	BASEPRI, r3
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	e7fe      	b.n	8004684 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	3318      	adds	r3, #24
 800468a:	4618      	mov	r0, r3
 800468c:	f7fe fde2 	bl	8003254 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004690:	4b1d      	ldr	r3, [pc, #116]	; (8004708 <xTaskRemoveFromEventList+0xac>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d11d      	bne.n	80046d4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	3304      	adds	r3, #4
 800469c:	4618      	mov	r0, r3
 800469e:	f7fe fdd9 	bl	8003254 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a6:	4b19      	ldr	r3, [pc, #100]	; (800470c <xTaskRemoveFromEventList+0xb0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d903      	bls.n	80046b6 <xTaskRemoveFromEventList+0x5a>
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b2:	4a16      	ldr	r2, [pc, #88]	; (800470c <xTaskRemoveFromEventList+0xb0>)
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ba:	4613      	mov	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4a13      	ldr	r2, [pc, #76]	; (8004710 <xTaskRemoveFromEventList+0xb4>)
 80046c4:	441a      	add	r2, r3
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	3304      	adds	r3, #4
 80046ca:	4619      	mov	r1, r3
 80046cc:	4610      	mov	r0, r2
 80046ce:	f7fe fd66 	bl	800319e <vListInsertEnd>
 80046d2:	e005      	b.n	80046e0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	3318      	adds	r3, #24
 80046d8:	4619      	mov	r1, r3
 80046da:	480e      	ldr	r0, [pc, #56]	; (8004714 <xTaskRemoveFromEventList+0xb8>)
 80046dc:	f7fe fd5f 	bl	800319e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e4:	4b0c      	ldr	r3, [pc, #48]	; (8004718 <xTaskRemoveFromEventList+0xbc>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d905      	bls.n	80046fa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80046ee:	2301      	movs	r3, #1
 80046f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80046f2:	4b0a      	ldr	r3, [pc, #40]	; (800471c <xTaskRemoveFromEventList+0xc0>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	e001      	b.n	80046fe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80046fa:	2300      	movs	r3, #0
 80046fc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80046fe:	697b      	ldr	r3, [r7, #20]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	20000e24 	.word	0x20000e24
 800470c:	20000e04 	.word	0x20000e04
 8004710:	2000092c 	.word	0x2000092c
 8004714:	20000dbc 	.word	0x20000dbc
 8004718:	20000928 	.word	0x20000928
 800471c:	20000e10 	.word	0x20000e10

08004720 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004728:	4b06      	ldr	r3, [pc, #24]	; (8004744 <vTaskInternalSetTimeOutState+0x24>)
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004730:	4b05      	ldr	r3, [pc, #20]	; (8004748 <vTaskInternalSetTimeOutState+0x28>)
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	605a      	str	r2, [r3, #4]
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	bc80      	pop	{r7}
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	20000e14 	.word	0x20000e14
 8004748:	20000e00 	.word	0x20000e00

0800474c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d109      	bne.n	8004770 <xTaskCheckForTimeOut+0x24>
 800475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	613b      	str	r3, [r7, #16]
 800476e:	e7fe      	b.n	800476e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d109      	bne.n	800478a <xTaskCheckForTimeOut+0x3e>
 8004776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477a:	f383 8811 	msr	BASEPRI, r3
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f3bf 8f4f 	dsb	sy
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	e7fe      	b.n	8004788 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800478a:	f000 fea5 	bl	80054d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800478e:	4b1d      	ldr	r3, [pc, #116]	; (8004804 <xTaskCheckForTimeOut+0xb8>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047a6:	d102      	bne.n	80047ae <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80047a8:	2300      	movs	r3, #0
 80047aa:	61fb      	str	r3, [r7, #28]
 80047ac:	e023      	b.n	80047f6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	4b15      	ldr	r3, [pc, #84]	; (8004808 <xTaskCheckForTimeOut+0xbc>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d007      	beq.n	80047ca <xTaskCheckForTimeOut+0x7e>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d302      	bcc.n	80047ca <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80047c4:	2301      	movs	r3, #1
 80047c6:	61fb      	str	r3, [r7, #28]
 80047c8:	e015      	b.n	80047f6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d20b      	bcs.n	80047ec <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	1ad2      	subs	r2, r2, r3
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f7ff ff9d 	bl	8004720 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80047e6:	2300      	movs	r3, #0
 80047e8:	61fb      	str	r3, [r7, #28]
 80047ea:	e004      	b.n	80047f6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80047f2:	2301      	movs	r3, #1
 80047f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80047f6:	f000 fe9d 	bl	8005534 <vPortExitCritical>

	return xReturn;
 80047fa:	69fb      	ldr	r3, [r7, #28]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3720      	adds	r7, #32
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	20000e00 	.word	0x20000e00
 8004808:	20000e14 	.word	0x20000e14

0800480c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004810:	4b03      	ldr	r3, [pc, #12]	; (8004820 <vTaskMissedYield+0x14>)
 8004812:	2201      	movs	r2, #1
 8004814:	601a      	str	r2, [r3, #0]
}
 8004816:	bf00      	nop
 8004818:	46bd      	mov	sp, r7
 800481a:	bc80      	pop	{r7}
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	20000e10 	.word	0x20000e10

08004824 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800482c:	f000 f852 	bl	80048d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004830:	4b06      	ldr	r3, [pc, #24]	; (800484c <prvIdleTask+0x28>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d9f9      	bls.n	800482c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004838:	4b05      	ldr	r3, [pc, #20]	; (8004850 <prvIdleTask+0x2c>)
 800483a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004848:	e7f0      	b.n	800482c <prvIdleTask+0x8>
 800484a:	bf00      	nop
 800484c:	2000092c 	.word	0x2000092c
 8004850:	e000ed04 	.word	0xe000ed04

08004854 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800485a:	2300      	movs	r3, #0
 800485c:	607b      	str	r3, [r7, #4]
 800485e:	e00c      	b.n	800487a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	4613      	mov	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4a12      	ldr	r2, [pc, #72]	; (80048b4 <prvInitialiseTaskLists+0x60>)
 800486c:	4413      	add	r3, r2
 800486e:	4618      	mov	r0, r3
 8004870:	f7fe fc6a 	bl	8003148 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3301      	adds	r3, #1
 8004878:	607b      	str	r3, [r7, #4]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b37      	cmp	r3, #55	; 0x37
 800487e:	d9ef      	bls.n	8004860 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004880:	480d      	ldr	r0, [pc, #52]	; (80048b8 <prvInitialiseTaskLists+0x64>)
 8004882:	f7fe fc61 	bl	8003148 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004886:	480d      	ldr	r0, [pc, #52]	; (80048bc <prvInitialiseTaskLists+0x68>)
 8004888:	f7fe fc5e 	bl	8003148 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800488c:	480c      	ldr	r0, [pc, #48]	; (80048c0 <prvInitialiseTaskLists+0x6c>)
 800488e:	f7fe fc5b 	bl	8003148 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004892:	480c      	ldr	r0, [pc, #48]	; (80048c4 <prvInitialiseTaskLists+0x70>)
 8004894:	f7fe fc58 	bl	8003148 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004898:	480b      	ldr	r0, [pc, #44]	; (80048c8 <prvInitialiseTaskLists+0x74>)
 800489a:	f7fe fc55 	bl	8003148 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800489e:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <prvInitialiseTaskLists+0x78>)
 80048a0:	4a05      	ldr	r2, [pc, #20]	; (80048b8 <prvInitialiseTaskLists+0x64>)
 80048a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80048a4:	4b0a      	ldr	r3, [pc, #40]	; (80048d0 <prvInitialiseTaskLists+0x7c>)
 80048a6:	4a05      	ldr	r2, [pc, #20]	; (80048bc <prvInitialiseTaskLists+0x68>)
 80048a8:	601a      	str	r2, [r3, #0]
}
 80048aa:	bf00      	nop
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	2000092c 	.word	0x2000092c
 80048b8:	20000d8c 	.word	0x20000d8c
 80048bc:	20000da0 	.word	0x20000da0
 80048c0:	20000dbc 	.word	0x20000dbc
 80048c4:	20000dd0 	.word	0x20000dd0
 80048c8:	20000de8 	.word	0x20000de8
 80048cc:	20000db4 	.word	0x20000db4
 80048d0:	20000db8 	.word	0x20000db8

080048d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048da:	e019      	b.n	8004910 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80048dc:	f000 fdfc 	bl	80054d8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80048e0:	4b0f      	ldr	r3, [pc, #60]	; (8004920 <prvCheckTasksWaitingTermination+0x4c>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3304      	adds	r3, #4
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7fe fcb1 	bl	8003254 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80048f2:	4b0c      	ldr	r3, [pc, #48]	; (8004924 <prvCheckTasksWaitingTermination+0x50>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	4a0a      	ldr	r2, [pc, #40]	; (8004924 <prvCheckTasksWaitingTermination+0x50>)
 80048fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80048fc:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <prvCheckTasksWaitingTermination+0x54>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3b01      	subs	r3, #1
 8004902:	4a09      	ldr	r2, [pc, #36]	; (8004928 <prvCheckTasksWaitingTermination+0x54>)
 8004904:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004906:	f000 fe15 	bl	8005534 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f80e 	bl	800492c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004910:	4b05      	ldr	r3, [pc, #20]	; (8004928 <prvCheckTasksWaitingTermination+0x54>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1e1      	bne.n	80048dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004918:	bf00      	nop
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	20000dd0 	.word	0x20000dd0
 8004924:	20000dfc 	.word	0x20000dfc
 8004928:	20000de4 	.word	0x20000de4

0800492c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800493a:	2b00      	cmp	r3, #0
 800493c:	d108      	bne.n	8004950 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	4618      	mov	r0, r3
 8004944:	f000 ff80 	bl	8005848 <vPortFree>
				vPortFree( pxTCB );
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 ff7d 	bl	8005848 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800494e:	e017      	b.n	8004980 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004956:	2b01      	cmp	r3, #1
 8004958:	d103      	bne.n	8004962 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 ff74 	bl	8005848 <vPortFree>
	}
 8004960:	e00e      	b.n	8004980 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004968:	2b02      	cmp	r3, #2
 800496a:	d009      	beq.n	8004980 <prvDeleteTCB+0x54>
 800496c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	e7fe      	b.n	800497e <prvDeleteTCB+0x52>
	}
 8004980:	bf00      	nop
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800498e:	4b0e      	ldr	r3, [pc, #56]	; (80049c8 <prvResetNextTaskUnblockTime+0x40>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <prvResetNextTaskUnblockTime+0x14>
 8004998:	2301      	movs	r3, #1
 800499a:	e000      	b.n	800499e <prvResetNextTaskUnblockTime+0x16>
 800499c:	2300      	movs	r3, #0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d004      	beq.n	80049ac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80049a2:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <prvResetNextTaskUnblockTime+0x44>)
 80049a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049a8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80049aa:	e008      	b.n	80049be <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80049ac:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <prvResetNextTaskUnblockTime+0x40>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	4a04      	ldr	r2, [pc, #16]	; (80049cc <prvResetNextTaskUnblockTime+0x44>)
 80049bc:	6013      	str	r3, [r2, #0]
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr
 80049c8:	20000db4 	.word	0x20000db4
 80049cc:	20000e1c 	.word	0x20000e1c

080049d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80049d6:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <xTaskGetSchedulerState+0x34>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d102      	bne.n	80049e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80049de:	2301      	movs	r3, #1
 80049e0:	607b      	str	r3, [r7, #4]
 80049e2:	e008      	b.n	80049f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049e4:	4b08      	ldr	r3, [pc, #32]	; (8004a08 <xTaskGetSchedulerState+0x38>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d102      	bne.n	80049f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80049ec:	2302      	movs	r3, #2
 80049ee:	607b      	str	r3, [r7, #4]
 80049f0:	e001      	b.n	80049f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80049f2:	2300      	movs	r3, #0
 80049f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80049f6:	687b      	ldr	r3, [r7, #4]
	}
 80049f8:	4618      	mov	r0, r3
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bc80      	pop	{r7}
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	20000e08 	.word	0x20000e08
 8004a08:	20000e24 	.word	0x20000e24

08004a0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d054      	beq.n	8004acc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004a22:	4b2d      	ldr	r3, [pc, #180]	; (8004ad8 <xTaskPriorityDisinherit+0xcc>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d009      	beq.n	8004a40 <xTaskPriorityDisinherit+0x34>
 8004a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	e7fe      	b.n	8004a3e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d109      	bne.n	8004a5c <xTaskPriorityDisinherit+0x50>
 8004a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	60bb      	str	r3, [r7, #8]
 8004a5a:	e7fe      	b.n	8004a5a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a60:	1e5a      	subs	r2, r3, #1
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d02c      	beq.n	8004acc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d128      	bne.n	8004acc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fe fbe8 	bl	8003254 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9c:	4b0f      	ldr	r3, [pc, #60]	; (8004adc <xTaskPriorityDisinherit+0xd0>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d903      	bls.n	8004aac <xTaskPriorityDisinherit+0xa0>
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa8:	4a0c      	ldr	r2, [pc, #48]	; (8004adc <xTaskPriorityDisinherit+0xd0>)
 8004aaa:	6013      	str	r3, [r2, #0]
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4a09      	ldr	r2, [pc, #36]	; (8004ae0 <xTaskPriorityDisinherit+0xd4>)
 8004aba:	441a      	add	r2, r3
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	f7fe fb6b 	bl	800319e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004acc:	697b      	ldr	r3, [r7, #20]
	}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20000928 	.word	0x20000928
 8004adc:	20000e04 	.word	0x20000e04
 8004ae0:	2000092c 	.word	0x2000092c

08004ae4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004aee:	4b21      	ldr	r3, [pc, #132]	; (8004b74 <prvAddCurrentTaskToDelayedList+0x90>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004af4:	4b20      	ldr	r3, [pc, #128]	; (8004b78 <prvAddCurrentTaskToDelayedList+0x94>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3304      	adds	r3, #4
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fe fbaa 	bl	8003254 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b06:	d10a      	bne.n	8004b1e <prvAddCurrentTaskToDelayedList+0x3a>
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d007      	beq.n	8004b1e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b0e:	4b1a      	ldr	r3, [pc, #104]	; (8004b78 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3304      	adds	r3, #4
 8004b14:	4619      	mov	r1, r3
 8004b16:	4819      	ldr	r0, [pc, #100]	; (8004b7c <prvAddCurrentTaskToDelayedList+0x98>)
 8004b18:	f7fe fb41 	bl	800319e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b1c:	e026      	b.n	8004b6c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4413      	add	r3, r2
 8004b24:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b26:	4b14      	ldr	r3, [pc, #80]	; (8004b78 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d209      	bcs.n	8004b4a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b36:	4b12      	ldr	r3, [pc, #72]	; (8004b80 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	4b0f      	ldr	r3, [pc, #60]	; (8004b78 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	3304      	adds	r3, #4
 8004b40:	4619      	mov	r1, r3
 8004b42:	4610      	mov	r0, r2
 8004b44:	f7fe fb4e 	bl	80031e4 <vListInsert>
}
 8004b48:	e010      	b.n	8004b6c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b4a:	4b0e      	ldr	r3, [pc, #56]	; (8004b84 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3304      	adds	r3, #4
 8004b54:	4619      	mov	r1, r3
 8004b56:	4610      	mov	r0, r2
 8004b58:	f7fe fb44 	bl	80031e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b5c:	4b0a      	ldr	r3, [pc, #40]	; (8004b88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d202      	bcs.n	8004b6c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004b66:	4a08      	ldr	r2, [pc, #32]	; (8004b88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	6013      	str	r3, [r2, #0]
}
 8004b6c:	bf00      	nop
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	20000e00 	.word	0x20000e00
 8004b78:	20000928 	.word	0x20000928
 8004b7c:	20000de8 	.word	0x20000de8
 8004b80:	20000db8 	.word	0x20000db8
 8004b84:	20000db4 	.word	0x20000db4
 8004b88:	20000e1c 	.word	0x20000e1c

08004b8c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b08a      	sub	sp, #40	; 0x28
 8004b90:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004b96:	f000 fb51 	bl	800523c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004b9a:	4b1c      	ldr	r3, [pc, #112]	; (8004c0c <xTimerCreateTimerTask+0x80>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d021      	beq.n	8004be6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004baa:	1d3a      	adds	r2, r7, #4
 8004bac:	f107 0108 	add.w	r1, r7, #8
 8004bb0:	f107 030c 	add.w	r3, r7, #12
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7fe faad 	bl	8003114 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	9202      	str	r2, [sp, #8]
 8004bc2:	9301      	str	r3, [sp, #4]
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	2300      	movs	r3, #0
 8004bca:	460a      	mov	r2, r1
 8004bcc:	4910      	ldr	r1, [pc, #64]	; (8004c10 <xTimerCreateTimerTask+0x84>)
 8004bce:	4811      	ldr	r0, [pc, #68]	; (8004c14 <xTimerCreateTimerTask+0x88>)
 8004bd0:	f7ff f8f8 	bl	8003dc4 <xTaskCreateStatic>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	4b10      	ldr	r3, [pc, #64]	; (8004c18 <xTimerCreateTimerTask+0x8c>)
 8004bd8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004bda:	4b0f      	ldr	r3, [pc, #60]	; (8004c18 <xTimerCreateTimerTask+0x8c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004be2:	2301      	movs	r3, #1
 8004be4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d109      	bne.n	8004c00 <xTimerCreateTimerTask+0x74>
 8004bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	e7fe      	b.n	8004bfe <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004c00:	697b      	ldr	r3, [r7, #20]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3718      	adds	r7, #24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	20000e58 	.word	0x20000e58
 8004c10:	08006600 	.word	0x08006600
 8004c14:	08004e51 	.word	0x08004e51
 8004c18:	20000e5c 	.word	0x20000e5c

08004c1c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b088      	sub	sp, #32
 8004c20:	af02      	add	r7, sp, #8
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
 8004c28:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8004c2a:	2030      	movs	r0, #48	; 0x30
 8004c2c:	f000 fd4a 	bl	80056c4 <pvPortMalloc>
 8004c30:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00d      	beq.n	8004c54 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	9301      	str	r3, [sp, #4]
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	68b9      	ldr	r1, [r7, #8]
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 f844 	bl	8004cd4 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8004c54:	697b      	ldr	r3, [r7, #20]
	}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3718      	adds	r7, #24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b08a      	sub	sp, #40	; 0x28
 8004c62:	af02      	add	r7, sp, #8
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	607a      	str	r2, [r7, #4]
 8004c6a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8004c6c:	2330      	movs	r3, #48	; 0x30
 8004c6e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	2b30      	cmp	r3, #48	; 0x30
 8004c74:	d009      	beq.n	8004c8a <xTimerCreateStatic+0x2c>
 8004c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	61bb      	str	r3, [r7, #24]
 8004c88:	e7fe      	b.n	8004c88 <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8004c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d109      	bne.n	8004ca4 <xTimerCreateStatic+0x46>
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	617b      	str	r3, [r7, #20]
 8004ca2:	e7fe      	b.n	8004ca2 <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca6:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00d      	beq.n	8004cca <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	9301      	str	r3, [sp, #4]
 8004cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	68b9      	ldr	r1, [r7, #8]
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 f809 	bl	8004cd4 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8004cca:	69fb      	ldr	r3, [r7, #28]
	}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3720      	adds	r7, #32
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
 8004ce0:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d109      	bne.n	8004cfc <prvInitialiseNewTimer+0x28>
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	e7fe      	b.n	8004cfa <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d015      	beq.n	8004d2e <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004d02:	f000 fa9b 	bl	800523c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	6a3a      	ldr	r2, [r7, #32]
 8004d22:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	3304      	adds	r3, #4
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fe fa2c 	bl	8003186 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004d2e:	bf00      	nop
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
	...

08004d38 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08a      	sub	sp, #40	; 0x28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
 8004d44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004d46:	2300      	movs	r3, #0
 8004d48:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d109      	bne.n	8004d64 <xTimerGenericCommand+0x2c>
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	623b      	str	r3, [r7, #32]
 8004d62:	e7fe      	b.n	8004d62 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004d64:	4b19      	ldr	r3, [pc, #100]	; (8004dcc <xTimerGenericCommand+0x94>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d02a      	beq.n	8004dc2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	2b05      	cmp	r3, #5
 8004d7c:	dc18      	bgt.n	8004db0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004d7e:	f7ff fe27 	bl	80049d0 <xTaskGetSchedulerState>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d109      	bne.n	8004d9c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004d88:	4b10      	ldr	r3, [pc, #64]	; (8004dcc <xTimerGenericCommand+0x94>)
 8004d8a:	6818      	ldr	r0, [r3, #0]
 8004d8c:	f107 0110 	add.w	r1, r7, #16
 8004d90:	2300      	movs	r3, #0
 8004d92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d94:	f7fe fbc2 	bl	800351c <xQueueGenericSend>
 8004d98:	6278      	str	r0, [r7, #36]	; 0x24
 8004d9a:	e012      	b.n	8004dc2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004d9c:	4b0b      	ldr	r3, [pc, #44]	; (8004dcc <xTimerGenericCommand+0x94>)
 8004d9e:	6818      	ldr	r0, [r3, #0]
 8004da0:	f107 0110 	add.w	r1, r7, #16
 8004da4:	2300      	movs	r3, #0
 8004da6:	2200      	movs	r2, #0
 8004da8:	f7fe fbb8 	bl	800351c <xQueueGenericSend>
 8004dac:	6278      	str	r0, [r7, #36]	; 0x24
 8004dae:	e008      	b.n	8004dc2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004db0:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <xTimerGenericCommand+0x94>)
 8004db2:	6818      	ldr	r0, [r3, #0]
 8004db4:	f107 0110 	add.w	r1, r7, #16
 8004db8:	2300      	movs	r3, #0
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	f7fe fca8 	bl	8003710 <xQueueGenericSendFromISR>
 8004dc0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3728      	adds	r7, #40	; 0x28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	20000e58 	.word	0x20000e58

08004dd0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af02      	add	r7, sp, #8
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dda:	4b1c      	ldr	r3, [pc, #112]	; (8004e4c <prvProcessExpiredTimer+0x7c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	3304      	adds	r3, #4
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fe fa33 	bl	8003254 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d121      	bne.n	8004e3a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	699a      	ldr	r2, [r3, #24]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	18d1      	adds	r1, r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	6978      	ldr	r0, [r7, #20]
 8004e04:	f000 f8c8 	bl	8004f98 <prvInsertTimerInActiveList>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d015      	beq.n	8004e3a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e0e:	2300      	movs	r3, #0
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	2300      	movs	r3, #0
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	2100      	movs	r1, #0
 8004e18:	6978      	ldr	r0, [r7, #20]
 8004e1a:	f7ff ff8d 	bl	8004d38 <xTimerGenericCommand>
 8004e1e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d109      	bne.n	8004e3a <prvProcessExpiredTimer+0x6a>
 8004e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	e7fe      	b.n	8004e38 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	6978      	ldr	r0, [r7, #20]
 8004e40:	4798      	blx	r3
}
 8004e42:	bf00      	nop
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	20000e50 	.word	0x20000e50

08004e50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e58:	f107 0308 	add.w	r3, r7, #8
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 f857 	bl	8004f10 <prvGetNextExpireTime>
 8004e62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	4619      	mov	r1, r3
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 f803 	bl	8004e74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004e6e:	f000 f8d5 	bl	800501c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e72:	e7f1      	b.n	8004e58 <prvTimerTask+0x8>

08004e74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004e7e:	f7ff f9cd 	bl	800421c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e82:	f107 0308 	add.w	r3, r7, #8
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 f866 	bl	8004f58 <prvSampleTimeNow>
 8004e8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d130      	bne.n	8004ef6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10a      	bne.n	8004eb0 <prvProcessTimerOrBlockTask+0x3c>
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d806      	bhi.n	8004eb0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004ea2:	f7ff f9c9 	bl	8004238 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004ea6:	68f9      	ldr	r1, [r7, #12]
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7ff ff91 	bl	8004dd0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004eae:	e024      	b.n	8004efa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d008      	beq.n	8004ec8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004eb6:	4b13      	ldr	r3, [pc, #76]	; (8004f04 <prvProcessTimerOrBlockTask+0x90>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	bf0c      	ite	eq
 8004ec0:	2301      	moveq	r3, #1
 8004ec2:	2300      	movne	r3, #0
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ec8:	4b0f      	ldr	r3, [pc, #60]	; (8004f08 <prvProcessTimerOrBlockTask+0x94>)
 8004eca:	6818      	ldr	r0, [r3, #0]
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	f7fe ff41 	bl	8003d5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004eda:	f7ff f9ad 	bl	8004238 <xTaskResumeAll>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10a      	bne.n	8004efa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004ee4:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <prvProcessTimerOrBlockTask+0x98>)
 8004ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	f3bf 8f6f 	isb	sy
}
 8004ef4:	e001      	b.n	8004efa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004ef6:	f7ff f99f 	bl	8004238 <xTaskResumeAll>
}
 8004efa:	bf00      	nop
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	20000e54 	.word	0x20000e54
 8004f08:	20000e58 	.word	0x20000e58
 8004f0c:	e000ed04 	.word	0xe000ed04

08004f10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f18:	4b0e      	ldr	r3, [pc, #56]	; (8004f54 <prvGetNextExpireTime+0x44>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	bf0c      	ite	eq
 8004f22:	2301      	moveq	r3, #1
 8004f24:	2300      	movne	r3, #0
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	461a      	mov	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d105      	bne.n	8004f42 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f36:	4b07      	ldr	r3, [pc, #28]	; (8004f54 <prvGetNextExpireTime+0x44>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	e001      	b.n	8004f46 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004f46:	68fb      	ldr	r3, [r7, #12]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	20000e50 	.word	0x20000e50

08004f58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004f60:	f7ff fa06 	bl	8004370 <xTaskGetTickCount>
 8004f64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004f66:	4b0b      	ldr	r3, [pc, #44]	; (8004f94 <prvSampleTimeNow+0x3c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d205      	bcs.n	8004f7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004f70:	f000 f904 	bl	800517c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	e002      	b.n	8004f82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004f82:	4a04      	ldr	r2, [pc, #16]	; (8004f94 <prvSampleTimeNow+0x3c>)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004f88:	68fb      	ldr	r3, [r7, #12]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20000e60 	.word	0x20000e60

08004f98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
 8004fa4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d812      	bhi.n	8004fe4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	1ad2      	subs	r2, r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d302      	bcc.n	8004fd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	e01b      	b.n	800500a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004fd2:	4b10      	ldr	r3, [pc, #64]	; (8005014 <prvInsertTimerInActiveList+0x7c>)
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3304      	adds	r3, #4
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4610      	mov	r0, r2
 8004fde:	f7fe f901 	bl	80031e4 <vListInsert>
 8004fe2:	e012      	b.n	800500a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d206      	bcs.n	8004ffa <prvInsertTimerInActiveList+0x62>
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d302      	bcc.n	8004ffa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	e007      	b.n	800500a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ffa:	4b07      	ldr	r3, [pc, #28]	; (8005018 <prvInsertTimerInActiveList+0x80>)
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	3304      	adds	r3, #4
 8005002:	4619      	mov	r1, r3
 8005004:	4610      	mov	r0, r2
 8005006:	f7fe f8ed 	bl	80031e4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800500a:	697b      	ldr	r3, [r7, #20]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	20000e54 	.word	0x20000e54
 8005018:	20000e50 	.word	0x20000e50

0800501c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08e      	sub	sp, #56	; 0x38
 8005020:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005022:	e099      	b.n	8005158 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	da17      	bge.n	800505a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800502a:	1d3b      	adds	r3, r7, #4
 800502c:	3304      	adds	r3, #4
 800502e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005032:	2b00      	cmp	r3, #0
 8005034:	d109      	bne.n	800504a <prvProcessReceivedCommands+0x2e>
 8005036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	61fb      	str	r3, [r7, #28]
 8005048:	e7fe      	b.n	8005048 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800504a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005050:	6850      	ldr	r0, [r2, #4]
 8005052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005054:	6892      	ldr	r2, [r2, #8]
 8005056:	4611      	mov	r1, r2
 8005058:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	db7a      	blt.n	8005156 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d004      	beq.n	8005076 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506e:	3304      	adds	r3, #4
 8005070:	4618      	mov	r0, r3
 8005072:	f7fe f8ef 	bl	8003254 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005076:	463b      	mov	r3, r7
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff ff6d 	bl	8004f58 <prvSampleTimeNow>
 800507e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b09      	cmp	r3, #9
 8005084:	d868      	bhi.n	8005158 <prvProcessReceivedCommands+0x13c>
 8005086:	a201      	add	r2, pc, #4	; (adr r2, 800508c <prvProcessReceivedCommands+0x70>)
 8005088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508c:	080050b5 	.word	0x080050b5
 8005090:	080050b5 	.word	0x080050b5
 8005094:	080050b5 	.word	0x080050b5
 8005098:	08005159 	.word	0x08005159
 800509c:	0800510f 	.word	0x0800510f
 80050a0:	08005145 	.word	0x08005145
 80050a4:	080050b5 	.word	0x080050b5
 80050a8:	080050b5 	.word	0x080050b5
 80050ac:	08005159 	.word	0x08005159
 80050b0:	0800510f 	.word	0x0800510f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	18d1      	adds	r1, r2, r3
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050c2:	f7ff ff69 	bl	8004f98 <prvInsertTimerInActiveList>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d045      	beq.n	8005158 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050d2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80050d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d13d      	bne.n	8005158 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	441a      	add	r2, r3
 80050e4:	2300      	movs	r3, #0
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	2300      	movs	r3, #0
 80050ea:	2100      	movs	r1, #0
 80050ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050ee:	f7ff fe23 	bl	8004d38 <xTimerGenericCommand>
 80050f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d12e      	bne.n	8005158 <prvProcessReceivedCommands+0x13c>
 80050fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	61bb      	str	r3, [r7, #24]
 800510c:	e7fe      	b.n	800510c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005112:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d109      	bne.n	8005130 <prvProcessReceivedCommands+0x114>
 800511c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	e7fe      	b.n	800512e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005132:	699a      	ldr	r2, [r3, #24]
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	18d1      	adds	r1, r2, r3
 8005138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800513c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800513e:	f7ff ff2b 	bl	8004f98 <prvInsertTimerInActiveList>
					break;
 8005142:	e009      	b.n	8005158 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005146:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800514a:	2b00      	cmp	r3, #0
 800514c:	d104      	bne.n	8005158 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800514e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005150:	f000 fb7a 	bl	8005848 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005154:	e000      	b.n	8005158 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005156:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005158:	4b07      	ldr	r3, [pc, #28]	; (8005178 <prvProcessReceivedCommands+0x15c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	1d39      	adds	r1, r7, #4
 800515e:	2200      	movs	r2, #0
 8005160:	4618      	mov	r0, r3
 8005162:	f7fe fb69 	bl	8003838 <xQueueReceive>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	f47f af5b 	bne.w	8005024 <prvProcessReceivedCommands+0x8>
	}
}
 800516e:	bf00      	nop
 8005170:	3730      	adds	r7, #48	; 0x30
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	20000e58 	.word	0x20000e58

0800517c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b088      	sub	sp, #32
 8005180:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005182:	e044      	b.n	800520e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005184:	4b2b      	ldr	r3, [pc, #172]	; (8005234 <prvSwitchTimerLists+0xb8>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800518e:	4b29      	ldr	r3, [pc, #164]	; (8005234 <prvSwitchTimerLists+0xb8>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	3304      	adds	r3, #4
 800519c:	4618      	mov	r0, r3
 800519e:	f7fe f859 	bl	8003254 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d12d      	bne.n	800520e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	4413      	add	r3, r2
 80051ba:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d90e      	bls.n	80051e2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051d0:	4b18      	ldr	r3, [pc, #96]	; (8005234 <prvSwitchTimerLists+0xb8>)
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	3304      	adds	r3, #4
 80051d8:	4619      	mov	r1, r3
 80051da:	4610      	mov	r0, r2
 80051dc:	f7fe f802 	bl	80031e4 <vListInsert>
 80051e0:	e015      	b.n	800520e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051e2:	2300      	movs	r3, #0
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	2300      	movs	r3, #0
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	2100      	movs	r1, #0
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f7ff fda3 	bl	8004d38 <xTimerGenericCommand>
 80051f2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d109      	bne.n	800520e <prvSwitchTimerLists+0x92>
 80051fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	e7fe      	b.n	800520c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800520e:	4b09      	ldr	r3, [pc, #36]	; (8005234 <prvSwitchTimerLists+0xb8>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1b5      	bne.n	8005184 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005218:	4b06      	ldr	r3, [pc, #24]	; (8005234 <prvSwitchTimerLists+0xb8>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800521e:	4b06      	ldr	r3, [pc, #24]	; (8005238 <prvSwitchTimerLists+0xbc>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a04      	ldr	r2, [pc, #16]	; (8005234 <prvSwitchTimerLists+0xb8>)
 8005224:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005226:	4a04      	ldr	r2, [pc, #16]	; (8005238 <prvSwitchTimerLists+0xbc>)
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	6013      	str	r3, [r2, #0]
}
 800522c:	bf00      	nop
 800522e:	3718      	adds	r7, #24
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	20000e50 	.word	0x20000e50
 8005238:	20000e54 	.word	0x20000e54

0800523c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005242:	f000 f949 	bl	80054d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005246:	4b15      	ldr	r3, [pc, #84]	; (800529c <prvCheckForValidListAndQueue+0x60>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d120      	bne.n	8005290 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800524e:	4814      	ldr	r0, [pc, #80]	; (80052a0 <prvCheckForValidListAndQueue+0x64>)
 8005250:	f7fd ff7a 	bl	8003148 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005254:	4813      	ldr	r0, [pc, #76]	; (80052a4 <prvCheckForValidListAndQueue+0x68>)
 8005256:	f7fd ff77 	bl	8003148 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800525a:	4b13      	ldr	r3, [pc, #76]	; (80052a8 <prvCheckForValidListAndQueue+0x6c>)
 800525c:	4a10      	ldr	r2, [pc, #64]	; (80052a0 <prvCheckForValidListAndQueue+0x64>)
 800525e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005260:	4b12      	ldr	r3, [pc, #72]	; (80052ac <prvCheckForValidListAndQueue+0x70>)
 8005262:	4a10      	ldr	r2, [pc, #64]	; (80052a4 <prvCheckForValidListAndQueue+0x68>)
 8005264:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005266:	2300      	movs	r3, #0
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	4b11      	ldr	r3, [pc, #68]	; (80052b0 <prvCheckForValidListAndQueue+0x74>)
 800526c:	4a11      	ldr	r2, [pc, #68]	; (80052b4 <prvCheckForValidListAndQueue+0x78>)
 800526e:	2110      	movs	r1, #16
 8005270:	200a      	movs	r0, #10
 8005272:	f7fe f881 	bl	8003378 <xQueueGenericCreateStatic>
 8005276:	4602      	mov	r2, r0
 8005278:	4b08      	ldr	r3, [pc, #32]	; (800529c <prvCheckForValidListAndQueue+0x60>)
 800527a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800527c:	4b07      	ldr	r3, [pc, #28]	; (800529c <prvCheckForValidListAndQueue+0x60>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005284:	4b05      	ldr	r3, [pc, #20]	; (800529c <prvCheckForValidListAndQueue+0x60>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	490b      	ldr	r1, [pc, #44]	; (80052b8 <prvCheckForValidListAndQueue+0x7c>)
 800528a:	4618      	mov	r0, r3
 800528c:	f7fe fd3e 	bl	8003d0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005290:	f000 f950 	bl	8005534 <vPortExitCritical>
}
 8005294:	bf00      	nop
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20000e58 	.word	0x20000e58
 80052a0:	20000e28 	.word	0x20000e28
 80052a4:	20000e3c 	.word	0x20000e3c
 80052a8:	20000e50 	.word	0x20000e50
 80052ac:	20000e54 	.word	0x20000e54
 80052b0:	20000f04 	.word	0x20000f04
 80052b4:	20000e64 	.word	0x20000e64
 80052b8:	08006608 	.word	0x08006608

080052bc <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d109      	bne.n	80052e2 <pvTimerGetTimerID+0x26>
 80052ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	e7fe      	b.n	80052e0 <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 80052e2:	f000 f8f9 	bl	80054d8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80052ec:	f000 f922 	bl	8005534 <vPortExitCritical>

	return pvReturn;
 80052f0:	693b      	ldr	r3, [r7, #16]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
	...

080052fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3b04      	subs	r3, #4
 800530c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005314:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	3b04      	subs	r3, #4
 800531a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f023 0201 	bic.w	r2, r3, #1
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	3b04      	subs	r3, #4
 800532a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800532c:	4a08      	ldr	r2, [pc, #32]	; (8005350 <pxPortInitialiseStack+0x54>)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	3b14      	subs	r3, #20
 8005336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	3b20      	subs	r3, #32
 8005342:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005344:	68fb      	ldr	r3, [r7, #12]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	bc80      	pop	{r7}
 800534e:	4770      	bx	lr
 8005350:	08005355 	.word	0x08005355

08005354 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800535a:	2300      	movs	r3, #0
 800535c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800535e:	4b10      	ldr	r3, [pc, #64]	; (80053a0 <prvTaskExitError+0x4c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005366:	d009      	beq.n	800537c <prvTaskExitError+0x28>
 8005368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536c:	f383 8811 	msr	BASEPRI, r3
 8005370:	f3bf 8f6f 	isb	sy
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	e7fe      	b.n	800537a <prvTaskExitError+0x26>
 800537c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800538e:	bf00      	nop
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0fc      	beq.n	8005390 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005396:	bf00      	nop
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr
 80053a0:	20000010 	.word	0x20000010
	...

080053b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80053b0:	4b07      	ldr	r3, [pc, #28]	; (80053d0 <pxCurrentTCBConst2>)
 80053b2:	6819      	ldr	r1, [r3, #0]
 80053b4:	6808      	ldr	r0, [r1, #0]
 80053b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80053ba:	f380 8809 	msr	PSP, r0
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f04f 0000 	mov.w	r0, #0
 80053c6:	f380 8811 	msr	BASEPRI, r0
 80053ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80053ce:	4770      	bx	lr

080053d0 <pxCurrentTCBConst2>:
 80053d0:	20000928 	.word	0x20000928
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80053d4:	bf00      	nop
 80053d6:	bf00      	nop

080053d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80053d8:	4806      	ldr	r0, [pc, #24]	; (80053f4 <prvPortStartFirstTask+0x1c>)
 80053da:	6800      	ldr	r0, [r0, #0]
 80053dc:	6800      	ldr	r0, [r0, #0]
 80053de:	f380 8808 	msr	MSP, r0
 80053e2:	b662      	cpsie	i
 80053e4:	b661      	cpsie	f
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	df00      	svc	0
 80053f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80053f2:	bf00      	nop
 80053f4:	e000ed08 	.word	0xe000ed08

080053f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80053fe:	4b31      	ldr	r3, [pc, #196]	; (80054c4 <xPortStartScheduler+0xcc>)
 8005400:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	b2db      	uxtb	r3, r3
 8005408:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	22ff      	movs	r2, #255	; 0xff
 800540e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	b2db      	uxtb	r3, r3
 8005416:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005418:	78fb      	ldrb	r3, [r7, #3]
 800541a:	b2db      	uxtb	r3, r3
 800541c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005420:	b2da      	uxtb	r2, r3
 8005422:	4b29      	ldr	r3, [pc, #164]	; (80054c8 <xPortStartScheduler+0xd0>)
 8005424:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005426:	4b29      	ldr	r3, [pc, #164]	; (80054cc <xPortStartScheduler+0xd4>)
 8005428:	2207      	movs	r2, #7
 800542a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800542c:	e009      	b.n	8005442 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800542e:	4b27      	ldr	r3, [pc, #156]	; (80054cc <xPortStartScheduler+0xd4>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3b01      	subs	r3, #1
 8005434:	4a25      	ldr	r2, [pc, #148]	; (80054cc <xPortStartScheduler+0xd4>)
 8005436:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005438:	78fb      	ldrb	r3, [r7, #3]
 800543a:	b2db      	uxtb	r3, r3
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	b2db      	uxtb	r3, r3
 8005440:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005442:	78fb      	ldrb	r3, [r7, #3]
 8005444:	b2db      	uxtb	r3, r3
 8005446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544a:	2b80      	cmp	r3, #128	; 0x80
 800544c:	d0ef      	beq.n	800542e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800544e:	4b1f      	ldr	r3, [pc, #124]	; (80054cc <xPortStartScheduler+0xd4>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f1c3 0307 	rsb	r3, r3, #7
 8005456:	2b04      	cmp	r3, #4
 8005458:	d009      	beq.n	800546e <xPortStartScheduler+0x76>
 800545a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	60bb      	str	r3, [r7, #8]
 800546c:	e7fe      	b.n	800546c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800546e:	4b17      	ldr	r3, [pc, #92]	; (80054cc <xPortStartScheduler+0xd4>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	021b      	lsls	r3, r3, #8
 8005474:	4a15      	ldr	r2, [pc, #84]	; (80054cc <xPortStartScheduler+0xd4>)
 8005476:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005478:	4b14      	ldr	r3, [pc, #80]	; (80054cc <xPortStartScheduler+0xd4>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005480:	4a12      	ldr	r2, [pc, #72]	; (80054cc <xPortStartScheduler+0xd4>)
 8005482:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	b2da      	uxtb	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800548c:	4b10      	ldr	r3, [pc, #64]	; (80054d0 <xPortStartScheduler+0xd8>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a0f      	ldr	r2, [pc, #60]	; (80054d0 <xPortStartScheduler+0xd8>)
 8005492:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005496:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005498:	4b0d      	ldr	r3, [pc, #52]	; (80054d0 <xPortStartScheduler+0xd8>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a0c      	ldr	r2, [pc, #48]	; (80054d0 <xPortStartScheduler+0xd8>)
 800549e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80054a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80054a4:	f000 f8b0 	bl	8005608 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80054a8:	4b0a      	ldr	r3, [pc, #40]	; (80054d4 <xPortStartScheduler+0xdc>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80054ae:	f7ff ff93 	bl	80053d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80054b2:	f7ff f829 	bl	8004508 <vTaskSwitchContext>
	prvTaskExitError();
 80054b6:	f7ff ff4d 	bl	8005354 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	e000e400 	.word	0xe000e400
 80054c8:	20000f54 	.word	0x20000f54
 80054cc:	20000f58 	.word	0x20000f58
 80054d0:	e000ed20 	.word	0xe000ed20
 80054d4:	20000010 	.word	0x20000010

080054d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80054f0:	4b0e      	ldr	r3, [pc, #56]	; (800552c <vPortEnterCritical+0x54>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3301      	adds	r3, #1
 80054f6:	4a0d      	ldr	r2, [pc, #52]	; (800552c <vPortEnterCritical+0x54>)
 80054f8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80054fa:	4b0c      	ldr	r3, [pc, #48]	; (800552c <vPortEnterCritical+0x54>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d10e      	bne.n	8005520 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005502:	4b0b      	ldr	r3, [pc, #44]	; (8005530 <vPortEnterCritical+0x58>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b00      	cmp	r3, #0
 800550a:	d009      	beq.n	8005520 <vPortEnterCritical+0x48>
 800550c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	603b      	str	r3, [r7, #0]
 800551e:	e7fe      	b.n	800551e <vPortEnterCritical+0x46>
	}
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	bc80      	pop	{r7}
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	20000010 	.word	0x20000010
 8005530:	e000ed04 	.word	0xe000ed04

08005534 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800553a:	4b10      	ldr	r3, [pc, #64]	; (800557c <vPortExitCritical+0x48>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d109      	bne.n	8005556 <vPortExitCritical+0x22>
 8005542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005546:	f383 8811 	msr	BASEPRI, r3
 800554a:	f3bf 8f6f 	isb	sy
 800554e:	f3bf 8f4f 	dsb	sy
 8005552:	607b      	str	r3, [r7, #4]
 8005554:	e7fe      	b.n	8005554 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005556:	4b09      	ldr	r3, [pc, #36]	; (800557c <vPortExitCritical+0x48>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3b01      	subs	r3, #1
 800555c:	4a07      	ldr	r2, [pc, #28]	; (800557c <vPortExitCritical+0x48>)
 800555e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005560:	4b06      	ldr	r3, [pc, #24]	; (800557c <vPortExitCritical+0x48>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d104      	bne.n	8005572 <vPortExitCritical+0x3e>
 8005568:	2300      	movs	r3, #0
 800556a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr
 800557c:	20000010 	.word	0x20000010

08005580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005580:	f3ef 8009 	mrs	r0, PSP
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	4b0d      	ldr	r3, [pc, #52]	; (80055c0 <pxCurrentTCBConst>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005590:	6010      	str	r0, [r2, #0]
 8005592:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005596:	f04f 0050 	mov.w	r0, #80	; 0x50
 800559a:	f380 8811 	msr	BASEPRI, r0
 800559e:	f7fe ffb3 	bl	8004508 <vTaskSwitchContext>
 80055a2:	f04f 0000 	mov.w	r0, #0
 80055a6:	f380 8811 	msr	BASEPRI, r0
 80055aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80055ae:	6819      	ldr	r1, [r3, #0]
 80055b0:	6808      	ldr	r0, [r1, #0]
 80055b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80055b6:	f380 8809 	msr	PSP, r0
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	4770      	bx	lr

080055c0 <pxCurrentTCBConst>:
 80055c0:	20000928 	.word	0x20000928
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80055c4:	bf00      	nop
 80055c6:	bf00      	nop

080055c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
	__asm volatile
 80055ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80055e0:	f7fe fed4 	bl	800438c <xTaskIncrementTick>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055ea:	4b06      	ldr	r3, [pc, #24]	; (8005604 <SysTick_Handler+0x3c>)
 80055ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	2300      	movs	r3, #0
 80055f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80055fc:	bf00      	nop
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	e000ed04 	.word	0xe000ed04

08005608 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800560c:	4b0a      	ldr	r3, [pc, #40]	; (8005638 <vPortSetupTimerInterrupt+0x30>)
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005612:	4b0a      	ldr	r3, [pc, #40]	; (800563c <vPortSetupTimerInterrupt+0x34>)
 8005614:	2200      	movs	r2, #0
 8005616:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005618:	4b09      	ldr	r3, [pc, #36]	; (8005640 <vPortSetupTimerInterrupt+0x38>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a09      	ldr	r2, [pc, #36]	; (8005644 <vPortSetupTimerInterrupt+0x3c>)
 800561e:	fba2 2303 	umull	r2, r3, r2, r3
 8005622:	099b      	lsrs	r3, r3, #6
 8005624:	4a08      	ldr	r2, [pc, #32]	; (8005648 <vPortSetupTimerInterrupt+0x40>)
 8005626:	3b01      	subs	r3, #1
 8005628:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800562a:	4b03      	ldr	r3, [pc, #12]	; (8005638 <vPortSetupTimerInterrupt+0x30>)
 800562c:	2207      	movs	r2, #7
 800562e:	601a      	str	r2, [r3, #0]
}
 8005630:	bf00      	nop
 8005632:	46bd      	mov	sp, r7
 8005634:	bc80      	pop	{r7}
 8005636:	4770      	bx	lr
 8005638:	e000e010 	.word	0xe000e010
 800563c:	e000e018 	.word	0xe000e018
 8005640:	20000004 	.word	0x20000004
 8005644:	10624dd3 	.word	0x10624dd3
 8005648:	e000e014 	.word	0xe000e014

0800564c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005652:	f3ef 8305 	mrs	r3, IPSR
 8005656:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b0f      	cmp	r3, #15
 800565c:	d913      	bls.n	8005686 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800565e:	4a15      	ldr	r2, [pc, #84]	; (80056b4 <vPortValidateInterruptPriority+0x68>)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4413      	add	r3, r2
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005668:	4b13      	ldr	r3, [pc, #76]	; (80056b8 <vPortValidateInterruptPriority+0x6c>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	7afa      	ldrb	r2, [r7, #11]
 800566e:	429a      	cmp	r2, r3
 8005670:	d209      	bcs.n	8005686 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	607b      	str	r3, [r7, #4]
 8005684:	e7fe      	b.n	8005684 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005686:	4b0d      	ldr	r3, [pc, #52]	; (80056bc <vPortValidateInterruptPriority+0x70>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800568e:	4b0c      	ldr	r3, [pc, #48]	; (80056c0 <vPortValidateInterruptPriority+0x74>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d909      	bls.n	80056aa <vPortValidateInterruptPriority+0x5e>
 8005696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569a:	f383 8811 	msr	BASEPRI, r3
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	603b      	str	r3, [r7, #0]
 80056a8:	e7fe      	b.n	80056a8 <vPortValidateInterruptPriority+0x5c>
	}
 80056aa:	bf00      	nop
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bc80      	pop	{r7}
 80056b2:	4770      	bx	lr
 80056b4:	e000e3f0 	.word	0xe000e3f0
 80056b8:	20000f54 	.word	0x20000f54
 80056bc:	e000ed0c 	.word	0xe000ed0c
 80056c0:	20000f58 	.word	0x20000f58

080056c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08a      	sub	sp, #40	; 0x28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80056cc:	2300      	movs	r3, #0
 80056ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80056d0:	f7fe fda4 	bl	800421c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80056d4:	4b57      	ldr	r3, [pc, #348]	; (8005834 <pvPortMalloc+0x170>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80056dc:	f000 f90c 	bl	80058f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80056e0:	4b55      	ldr	r3, [pc, #340]	; (8005838 <pvPortMalloc+0x174>)
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4013      	ands	r3, r2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f040 808c 	bne.w	8005806 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d01c      	beq.n	800572e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80056f4:	2208      	movs	r2, #8
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4413      	add	r3, r2
 80056fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f003 0307 	and.w	r3, r3, #7
 8005702:	2b00      	cmp	r3, #0
 8005704:	d013      	beq.n	800572e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f023 0307 	bic.w	r3, r3, #7
 800570c:	3308      	adds	r3, #8
 800570e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	2b00      	cmp	r3, #0
 8005718:	d009      	beq.n	800572e <pvPortMalloc+0x6a>
 800571a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571e:	f383 8811 	msr	BASEPRI, r3
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	e7fe      	b.n	800572c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d068      	beq.n	8005806 <pvPortMalloc+0x142>
 8005734:	4b41      	ldr	r3, [pc, #260]	; (800583c <pvPortMalloc+0x178>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	429a      	cmp	r2, r3
 800573c:	d863      	bhi.n	8005806 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800573e:	4b40      	ldr	r3, [pc, #256]	; (8005840 <pvPortMalloc+0x17c>)
 8005740:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005742:	4b3f      	ldr	r3, [pc, #252]	; (8005840 <pvPortMalloc+0x17c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005748:	e004      	b.n	8005754 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	429a      	cmp	r2, r3
 800575c:	d903      	bls.n	8005766 <pvPortMalloc+0xa2>
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1f1      	bne.n	800574a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005766:	4b33      	ldr	r3, [pc, #204]	; (8005834 <pvPortMalloc+0x170>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800576c:	429a      	cmp	r2, r3
 800576e:	d04a      	beq.n	8005806 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2208      	movs	r2, #8
 8005776:	4413      	add	r3, r2
 8005778:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	1ad2      	subs	r2, r2, r3
 800578a:	2308      	movs	r3, #8
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	429a      	cmp	r2, r3
 8005790:	d91e      	bls.n	80057d0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4413      	add	r3, r2
 8005798:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	f003 0307 	and.w	r3, r3, #7
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d009      	beq.n	80057b8 <pvPortMalloc+0xf4>
 80057a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	613b      	str	r3, [r7, #16]
 80057b6:	e7fe      	b.n	80057b6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	1ad2      	subs	r2, r2, r3
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80057ca:	69b8      	ldr	r0, [r7, #24]
 80057cc:	f000 f8f6 	bl	80059bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80057d0:	4b1a      	ldr	r3, [pc, #104]	; (800583c <pvPortMalloc+0x178>)
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	4a18      	ldr	r2, [pc, #96]	; (800583c <pvPortMalloc+0x178>)
 80057dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80057de:	4b17      	ldr	r3, [pc, #92]	; (800583c <pvPortMalloc+0x178>)
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	4b18      	ldr	r3, [pc, #96]	; (8005844 <pvPortMalloc+0x180>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d203      	bcs.n	80057f2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80057ea:	4b14      	ldr	r3, [pc, #80]	; (800583c <pvPortMalloc+0x178>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a15      	ldr	r2, [pc, #84]	; (8005844 <pvPortMalloc+0x180>)
 80057f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	4b10      	ldr	r3, [pc, #64]	; (8005838 <pvPortMalloc+0x174>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	431a      	orrs	r2, r3
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	2200      	movs	r2, #0
 8005804:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005806:	f7fe fd17 	bl	8004238 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	2b00      	cmp	r3, #0
 8005812:	d009      	beq.n	8005828 <pvPortMalloc+0x164>
 8005814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005818:	f383 8811 	msr	BASEPRI, r3
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	60fb      	str	r3, [r7, #12]
 8005826:	e7fe      	b.n	8005826 <pvPortMalloc+0x162>
	return pvReturn;
 8005828:	69fb      	ldr	r3, [r7, #28]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3728      	adds	r7, #40	; 0x28
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	20001b64 	.word	0x20001b64
 8005838:	20001b70 	.word	0x20001b70
 800583c:	20001b68 	.word	0x20001b68
 8005840:	20001b5c 	.word	0x20001b5c
 8005844:	20001b6c 	.word	0x20001b6c

08005848 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d046      	beq.n	80058e8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800585a:	2308      	movs	r3, #8
 800585c:	425b      	negs	r3, r3
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	4413      	add	r3, r2
 8005862:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	4b20      	ldr	r3, [pc, #128]	; (80058f0 <vPortFree+0xa8>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4013      	ands	r3, r2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d109      	bne.n	800588a <vPortFree+0x42>
 8005876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	e7fe      	b.n	8005888 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d009      	beq.n	80058a6 <vPortFree+0x5e>
 8005892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	60bb      	str	r3, [r7, #8]
 80058a4:	e7fe      	b.n	80058a4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	4b11      	ldr	r3, [pc, #68]	; (80058f0 <vPortFree+0xa8>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4013      	ands	r3, r2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d019      	beq.n	80058e8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d115      	bne.n	80058e8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <vPortFree+0xa8>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	43db      	mvns	r3, r3
 80058c6:	401a      	ands	r2, r3
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80058cc:	f7fe fca6 	bl	800421c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	4b07      	ldr	r3, [pc, #28]	; (80058f4 <vPortFree+0xac>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4413      	add	r3, r2
 80058da:	4a06      	ldr	r2, [pc, #24]	; (80058f4 <vPortFree+0xac>)
 80058dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058de:	6938      	ldr	r0, [r7, #16]
 80058e0:	f000 f86c 	bl	80059bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80058e4:	f7fe fca8 	bl	8004238 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80058e8:	bf00      	nop
 80058ea:	3718      	adds	r7, #24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	20001b70 	.word	0x20001b70
 80058f4:	20001b68 	.word	0x20001b68

080058f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80058fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005902:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005904:	4b27      	ldr	r3, [pc, #156]	; (80059a4 <prvHeapInit+0xac>)
 8005906:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f003 0307 	and.w	r3, r3, #7
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00c      	beq.n	800592c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	3307      	adds	r3, #7
 8005916:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 0307 	bic.w	r3, r3, #7
 800591e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	4a1f      	ldr	r2, [pc, #124]	; (80059a4 <prvHeapInit+0xac>)
 8005928:	4413      	add	r3, r2
 800592a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005930:	4a1d      	ldr	r2, [pc, #116]	; (80059a8 <prvHeapInit+0xb0>)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005936:	4b1c      	ldr	r3, [pc, #112]	; (80059a8 <prvHeapInit+0xb0>)
 8005938:	2200      	movs	r2, #0
 800593a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	4413      	add	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005944:	2208      	movs	r2, #8
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	1a9b      	subs	r3, r3, r2
 800594a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 0307 	bic.w	r3, r3, #7
 8005952:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4a15      	ldr	r2, [pc, #84]	; (80059ac <prvHeapInit+0xb4>)
 8005958:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800595a:	4b14      	ldr	r3, [pc, #80]	; (80059ac <prvHeapInit+0xb4>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2200      	movs	r2, #0
 8005960:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005962:	4b12      	ldr	r3, [pc, #72]	; (80059ac <prvHeapInit+0xb4>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2200      	movs	r2, #0
 8005968:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	1ad2      	subs	r2, r2, r3
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005978:	4b0c      	ldr	r3, [pc, #48]	; (80059ac <prvHeapInit+0xb4>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	4a0a      	ldr	r2, [pc, #40]	; (80059b0 <prvHeapInit+0xb8>)
 8005986:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	4a09      	ldr	r2, [pc, #36]	; (80059b4 <prvHeapInit+0xbc>)
 800598e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005990:	4b09      	ldr	r3, [pc, #36]	; (80059b8 <prvHeapInit+0xc0>)
 8005992:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005996:	601a      	str	r2, [r3, #0]
}
 8005998:	bf00      	nop
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	bc80      	pop	{r7}
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	20000f5c 	.word	0x20000f5c
 80059a8:	20001b5c 	.word	0x20001b5c
 80059ac:	20001b64 	.word	0x20001b64
 80059b0:	20001b6c 	.word	0x20001b6c
 80059b4:	20001b68 	.word	0x20001b68
 80059b8:	20001b70 	.word	0x20001b70

080059bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80059c4:	4b27      	ldr	r3, [pc, #156]	; (8005a64 <prvInsertBlockIntoFreeList+0xa8>)
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	e002      	b.n	80059d0 <prvInsertBlockIntoFreeList+0x14>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d8f7      	bhi.n	80059ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	4413      	add	r3, r2
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d108      	bne.n	80059fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	441a      	add	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	441a      	add	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d118      	bne.n	8005a44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	4b14      	ldr	r3, [pc, #80]	; (8005a68 <prvInsertBlockIntoFreeList+0xac>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d00d      	beq.n	8005a3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	441a      	add	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	e008      	b.n	8005a4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a3a:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <prvInsertBlockIntoFreeList+0xac>)
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	e003      	b.n	8005a4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d002      	beq.n	8005a5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a5a:	bf00      	nop
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bc80      	pop	{r7}
 8005a62:	4770      	bx	lr
 8005a64:	20001b5c 	.word	0x20001b5c
 8005a68:	20001b64 	.word	0x20001b64

08005a6c <atoi>:
 8005a6c:	220a      	movs	r2, #10
 8005a6e:	2100      	movs	r1, #0
 8005a70:	f000 b8ee 	b.w	8005c50 <strtol>

08005a74 <__errno>:
 8005a74:	4b01      	ldr	r3, [pc, #4]	; (8005a7c <__errno+0x8>)
 8005a76:	6818      	ldr	r0, [r3, #0]
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	20000014 	.word	0x20000014

08005a80 <__libc_init_array>:
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	2500      	movs	r5, #0
 8005a84:	4e0c      	ldr	r6, [pc, #48]	; (8005ab8 <__libc_init_array+0x38>)
 8005a86:	4c0d      	ldr	r4, [pc, #52]	; (8005abc <__libc_init_array+0x3c>)
 8005a88:	1ba4      	subs	r4, r4, r6
 8005a8a:	10a4      	asrs	r4, r4, #2
 8005a8c:	42a5      	cmp	r5, r4
 8005a8e:	d109      	bne.n	8005aa4 <__libc_init_array+0x24>
 8005a90:	f000 fcfe 	bl	8006490 <_init>
 8005a94:	2500      	movs	r5, #0
 8005a96:	4e0a      	ldr	r6, [pc, #40]	; (8005ac0 <__libc_init_array+0x40>)
 8005a98:	4c0a      	ldr	r4, [pc, #40]	; (8005ac4 <__libc_init_array+0x44>)
 8005a9a:	1ba4      	subs	r4, r4, r6
 8005a9c:	10a4      	asrs	r4, r4, #2
 8005a9e:	42a5      	cmp	r5, r4
 8005aa0:	d105      	bne.n	8005aae <__libc_init_array+0x2e>
 8005aa2:	bd70      	pop	{r4, r5, r6, pc}
 8005aa4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005aa8:	4798      	blx	r3
 8005aaa:	3501      	adds	r5, #1
 8005aac:	e7ee      	b.n	8005a8c <__libc_init_array+0xc>
 8005aae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ab2:	4798      	blx	r3
 8005ab4:	3501      	adds	r5, #1
 8005ab6:	e7f2      	b.n	8005a9e <__libc_init_array+0x1e>
 8005ab8:	08006814 	.word	0x08006814
 8005abc:	08006814 	.word	0x08006814
 8005ac0:	08006814 	.word	0x08006814
 8005ac4:	08006818 	.word	0x08006818

08005ac8 <memcpy>:
 8005ac8:	b510      	push	{r4, lr}
 8005aca:	1e43      	subs	r3, r0, #1
 8005acc:	440a      	add	r2, r1
 8005ace:	4291      	cmp	r1, r2
 8005ad0:	d100      	bne.n	8005ad4 <memcpy+0xc>
 8005ad2:	bd10      	pop	{r4, pc}
 8005ad4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ad8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005adc:	e7f7      	b.n	8005ace <memcpy+0x6>

08005ade <memset>:
 8005ade:	4603      	mov	r3, r0
 8005ae0:	4402      	add	r2, r0
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d100      	bne.n	8005ae8 <memset+0xa>
 8005ae6:	4770      	bx	lr
 8005ae8:	f803 1b01 	strb.w	r1, [r3], #1
 8005aec:	e7f9      	b.n	8005ae2 <memset+0x4>
	...

08005af0 <sniprintf>:
 8005af0:	b40c      	push	{r2, r3}
 8005af2:	b530      	push	{r4, r5, lr}
 8005af4:	4b17      	ldr	r3, [pc, #92]	; (8005b54 <sniprintf+0x64>)
 8005af6:	1e0c      	subs	r4, r1, #0
 8005af8:	b09d      	sub	sp, #116	; 0x74
 8005afa:	681d      	ldr	r5, [r3, #0]
 8005afc:	da08      	bge.n	8005b10 <sniprintf+0x20>
 8005afe:	238b      	movs	r3, #139	; 0x8b
 8005b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b04:	602b      	str	r3, [r5, #0]
 8005b06:	b01d      	add	sp, #116	; 0x74
 8005b08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b0c:	b002      	add	sp, #8
 8005b0e:	4770      	bx	lr
 8005b10:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005b14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005b18:	bf0c      	ite	eq
 8005b1a:	4623      	moveq	r3, r4
 8005b1c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005b20:	9304      	str	r3, [sp, #16]
 8005b22:	9307      	str	r3, [sp, #28]
 8005b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b28:	9002      	str	r0, [sp, #8]
 8005b2a:	9006      	str	r0, [sp, #24]
 8005b2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005b30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005b32:	ab21      	add	r3, sp, #132	; 0x84
 8005b34:	a902      	add	r1, sp, #8
 8005b36:	4628      	mov	r0, r5
 8005b38:	9301      	str	r3, [sp, #4]
 8005b3a:	f000 f90f 	bl	8005d5c <_svfiprintf_r>
 8005b3e:	1c43      	adds	r3, r0, #1
 8005b40:	bfbc      	itt	lt
 8005b42:	238b      	movlt	r3, #139	; 0x8b
 8005b44:	602b      	strlt	r3, [r5, #0]
 8005b46:	2c00      	cmp	r4, #0
 8005b48:	d0dd      	beq.n	8005b06 <sniprintf+0x16>
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	9b02      	ldr	r3, [sp, #8]
 8005b4e:	701a      	strb	r2, [r3, #0]
 8005b50:	e7d9      	b.n	8005b06 <sniprintf+0x16>
 8005b52:	bf00      	nop
 8005b54:	20000014 	.word	0x20000014

08005b58 <_strtol_l.isra.0>:
 8005b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b5c:	4680      	mov	r8, r0
 8005b5e:	4689      	mov	r9, r1
 8005b60:	4692      	mov	sl, r2
 8005b62:	461e      	mov	r6, r3
 8005b64:	460f      	mov	r7, r1
 8005b66:	463d      	mov	r5, r7
 8005b68:	9808      	ldr	r0, [sp, #32]
 8005b6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b6e:	f000 f885 	bl	8005c7c <__locale_ctype_ptr_l>
 8005b72:	4420      	add	r0, r4
 8005b74:	7843      	ldrb	r3, [r0, #1]
 8005b76:	f013 0308 	ands.w	r3, r3, #8
 8005b7a:	d132      	bne.n	8005be2 <_strtol_l.isra.0+0x8a>
 8005b7c:	2c2d      	cmp	r4, #45	; 0x2d
 8005b7e:	d132      	bne.n	8005be6 <_strtol_l.isra.0+0x8e>
 8005b80:	2201      	movs	r2, #1
 8005b82:	787c      	ldrb	r4, [r7, #1]
 8005b84:	1cbd      	adds	r5, r7, #2
 8005b86:	2e00      	cmp	r6, #0
 8005b88:	d05d      	beq.n	8005c46 <_strtol_l.isra.0+0xee>
 8005b8a:	2e10      	cmp	r6, #16
 8005b8c:	d109      	bne.n	8005ba2 <_strtol_l.isra.0+0x4a>
 8005b8e:	2c30      	cmp	r4, #48	; 0x30
 8005b90:	d107      	bne.n	8005ba2 <_strtol_l.isra.0+0x4a>
 8005b92:	782b      	ldrb	r3, [r5, #0]
 8005b94:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005b98:	2b58      	cmp	r3, #88	; 0x58
 8005b9a:	d14f      	bne.n	8005c3c <_strtol_l.isra.0+0xe4>
 8005b9c:	2610      	movs	r6, #16
 8005b9e:	786c      	ldrb	r4, [r5, #1]
 8005ba0:	3502      	adds	r5, #2
 8005ba2:	2a00      	cmp	r2, #0
 8005ba4:	bf14      	ite	ne
 8005ba6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005baa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005bae:	2700      	movs	r7, #0
 8005bb0:	fbb1 fcf6 	udiv	ip, r1, r6
 8005bb4:	4638      	mov	r0, r7
 8005bb6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005bba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005bbe:	2b09      	cmp	r3, #9
 8005bc0:	d817      	bhi.n	8005bf2 <_strtol_l.isra.0+0x9a>
 8005bc2:	461c      	mov	r4, r3
 8005bc4:	42a6      	cmp	r6, r4
 8005bc6:	dd23      	ble.n	8005c10 <_strtol_l.isra.0+0xb8>
 8005bc8:	1c7b      	adds	r3, r7, #1
 8005bca:	d007      	beq.n	8005bdc <_strtol_l.isra.0+0x84>
 8005bcc:	4584      	cmp	ip, r0
 8005bce:	d31c      	bcc.n	8005c0a <_strtol_l.isra.0+0xb2>
 8005bd0:	d101      	bne.n	8005bd6 <_strtol_l.isra.0+0x7e>
 8005bd2:	45a6      	cmp	lr, r4
 8005bd4:	db19      	blt.n	8005c0a <_strtol_l.isra.0+0xb2>
 8005bd6:	2701      	movs	r7, #1
 8005bd8:	fb00 4006 	mla	r0, r0, r6, r4
 8005bdc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005be0:	e7eb      	b.n	8005bba <_strtol_l.isra.0+0x62>
 8005be2:	462f      	mov	r7, r5
 8005be4:	e7bf      	b.n	8005b66 <_strtol_l.isra.0+0xe>
 8005be6:	2c2b      	cmp	r4, #43	; 0x2b
 8005be8:	bf04      	itt	eq
 8005bea:	1cbd      	addeq	r5, r7, #2
 8005bec:	787c      	ldrbeq	r4, [r7, #1]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	e7c9      	b.n	8005b86 <_strtol_l.isra.0+0x2e>
 8005bf2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005bf6:	2b19      	cmp	r3, #25
 8005bf8:	d801      	bhi.n	8005bfe <_strtol_l.isra.0+0xa6>
 8005bfa:	3c37      	subs	r4, #55	; 0x37
 8005bfc:	e7e2      	b.n	8005bc4 <_strtol_l.isra.0+0x6c>
 8005bfe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005c02:	2b19      	cmp	r3, #25
 8005c04:	d804      	bhi.n	8005c10 <_strtol_l.isra.0+0xb8>
 8005c06:	3c57      	subs	r4, #87	; 0x57
 8005c08:	e7dc      	b.n	8005bc4 <_strtol_l.isra.0+0x6c>
 8005c0a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005c0e:	e7e5      	b.n	8005bdc <_strtol_l.isra.0+0x84>
 8005c10:	1c7b      	adds	r3, r7, #1
 8005c12:	d108      	bne.n	8005c26 <_strtol_l.isra.0+0xce>
 8005c14:	2322      	movs	r3, #34	; 0x22
 8005c16:	4608      	mov	r0, r1
 8005c18:	f8c8 3000 	str.w	r3, [r8]
 8005c1c:	f1ba 0f00 	cmp.w	sl, #0
 8005c20:	d107      	bne.n	8005c32 <_strtol_l.isra.0+0xda>
 8005c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c26:	b102      	cbz	r2, 8005c2a <_strtol_l.isra.0+0xd2>
 8005c28:	4240      	negs	r0, r0
 8005c2a:	f1ba 0f00 	cmp.w	sl, #0
 8005c2e:	d0f8      	beq.n	8005c22 <_strtol_l.isra.0+0xca>
 8005c30:	b10f      	cbz	r7, 8005c36 <_strtol_l.isra.0+0xde>
 8005c32:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8005c36:	f8ca 9000 	str.w	r9, [sl]
 8005c3a:	e7f2      	b.n	8005c22 <_strtol_l.isra.0+0xca>
 8005c3c:	2430      	movs	r4, #48	; 0x30
 8005c3e:	2e00      	cmp	r6, #0
 8005c40:	d1af      	bne.n	8005ba2 <_strtol_l.isra.0+0x4a>
 8005c42:	2608      	movs	r6, #8
 8005c44:	e7ad      	b.n	8005ba2 <_strtol_l.isra.0+0x4a>
 8005c46:	2c30      	cmp	r4, #48	; 0x30
 8005c48:	d0a3      	beq.n	8005b92 <_strtol_l.isra.0+0x3a>
 8005c4a:	260a      	movs	r6, #10
 8005c4c:	e7a9      	b.n	8005ba2 <_strtol_l.isra.0+0x4a>
	...

08005c50 <strtol>:
 8005c50:	4b08      	ldr	r3, [pc, #32]	; (8005c74 <strtol+0x24>)
 8005c52:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c54:	681c      	ldr	r4, [r3, #0]
 8005c56:	4d08      	ldr	r5, [pc, #32]	; (8005c78 <strtol+0x28>)
 8005c58:	6a23      	ldr	r3, [r4, #32]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	bf08      	it	eq
 8005c5e:	462b      	moveq	r3, r5
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	4613      	mov	r3, r2
 8005c64:	460a      	mov	r2, r1
 8005c66:	4601      	mov	r1, r0
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f7ff ff75 	bl	8005b58 <_strtol_l.isra.0>
 8005c6e:	b003      	add	sp, #12
 8005c70:	bd30      	pop	{r4, r5, pc}
 8005c72:	bf00      	nop
 8005c74:	20000014 	.word	0x20000014
 8005c78:	20000078 	.word	0x20000078

08005c7c <__locale_ctype_ptr_l>:
 8005c7c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005c80:	4770      	bx	lr

08005c82 <__ascii_mbtowc>:
 8005c82:	b082      	sub	sp, #8
 8005c84:	b901      	cbnz	r1, 8005c88 <__ascii_mbtowc+0x6>
 8005c86:	a901      	add	r1, sp, #4
 8005c88:	b142      	cbz	r2, 8005c9c <__ascii_mbtowc+0x1a>
 8005c8a:	b14b      	cbz	r3, 8005ca0 <__ascii_mbtowc+0x1e>
 8005c8c:	7813      	ldrb	r3, [r2, #0]
 8005c8e:	600b      	str	r3, [r1, #0]
 8005c90:	7812      	ldrb	r2, [r2, #0]
 8005c92:	1c10      	adds	r0, r2, #0
 8005c94:	bf18      	it	ne
 8005c96:	2001      	movne	r0, #1
 8005c98:	b002      	add	sp, #8
 8005c9a:	4770      	bx	lr
 8005c9c:	4610      	mov	r0, r2
 8005c9e:	e7fb      	b.n	8005c98 <__ascii_mbtowc+0x16>
 8005ca0:	f06f 0001 	mvn.w	r0, #1
 8005ca4:	e7f8      	b.n	8005c98 <__ascii_mbtowc+0x16>

08005ca6 <__ssputs_r>:
 8005ca6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005caa:	688e      	ldr	r6, [r1, #8]
 8005cac:	4682      	mov	sl, r0
 8005cae:	429e      	cmp	r6, r3
 8005cb0:	460c      	mov	r4, r1
 8005cb2:	4690      	mov	r8, r2
 8005cb4:	4699      	mov	r9, r3
 8005cb6:	d837      	bhi.n	8005d28 <__ssputs_r+0x82>
 8005cb8:	898a      	ldrh	r2, [r1, #12]
 8005cba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005cbe:	d031      	beq.n	8005d24 <__ssputs_r+0x7e>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	6825      	ldr	r5, [r4, #0]
 8005cc4:	6909      	ldr	r1, [r1, #16]
 8005cc6:	1a6f      	subs	r7, r5, r1
 8005cc8:	6965      	ldr	r5, [r4, #20]
 8005cca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cce:	fb95 f5f3 	sdiv	r5, r5, r3
 8005cd2:	f109 0301 	add.w	r3, r9, #1
 8005cd6:	443b      	add	r3, r7
 8005cd8:	429d      	cmp	r5, r3
 8005cda:	bf38      	it	cc
 8005cdc:	461d      	movcc	r5, r3
 8005cde:	0553      	lsls	r3, r2, #21
 8005ce0:	d530      	bpl.n	8005d44 <__ssputs_r+0x9e>
 8005ce2:	4629      	mov	r1, r5
 8005ce4:	f000 fb3a 	bl	800635c <_malloc_r>
 8005ce8:	4606      	mov	r6, r0
 8005cea:	b950      	cbnz	r0, 8005d02 <__ssputs_r+0x5c>
 8005cec:	230c      	movs	r3, #12
 8005cee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cf2:	f8ca 3000 	str.w	r3, [sl]
 8005cf6:	89a3      	ldrh	r3, [r4, #12]
 8005cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cfc:	81a3      	strh	r3, [r4, #12]
 8005cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d02:	463a      	mov	r2, r7
 8005d04:	6921      	ldr	r1, [r4, #16]
 8005d06:	f7ff fedf 	bl	8005ac8 <memcpy>
 8005d0a:	89a3      	ldrh	r3, [r4, #12]
 8005d0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d14:	81a3      	strh	r3, [r4, #12]
 8005d16:	6126      	str	r6, [r4, #16]
 8005d18:	443e      	add	r6, r7
 8005d1a:	6026      	str	r6, [r4, #0]
 8005d1c:	464e      	mov	r6, r9
 8005d1e:	6165      	str	r5, [r4, #20]
 8005d20:	1bed      	subs	r5, r5, r7
 8005d22:	60a5      	str	r5, [r4, #8]
 8005d24:	454e      	cmp	r6, r9
 8005d26:	d900      	bls.n	8005d2a <__ssputs_r+0x84>
 8005d28:	464e      	mov	r6, r9
 8005d2a:	4632      	mov	r2, r6
 8005d2c:	4641      	mov	r1, r8
 8005d2e:	6820      	ldr	r0, [r4, #0]
 8005d30:	f000 faaf 	bl	8006292 <memmove>
 8005d34:	68a3      	ldr	r3, [r4, #8]
 8005d36:	2000      	movs	r0, #0
 8005d38:	1b9b      	subs	r3, r3, r6
 8005d3a:	60a3      	str	r3, [r4, #8]
 8005d3c:	6823      	ldr	r3, [r4, #0]
 8005d3e:	441e      	add	r6, r3
 8005d40:	6026      	str	r6, [r4, #0]
 8005d42:	e7dc      	b.n	8005cfe <__ssputs_r+0x58>
 8005d44:	462a      	mov	r2, r5
 8005d46:	f000 fb63 	bl	8006410 <_realloc_r>
 8005d4a:	4606      	mov	r6, r0
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	d1e2      	bne.n	8005d16 <__ssputs_r+0x70>
 8005d50:	6921      	ldr	r1, [r4, #16]
 8005d52:	4650      	mov	r0, sl
 8005d54:	f000 fab6 	bl	80062c4 <_free_r>
 8005d58:	e7c8      	b.n	8005cec <__ssputs_r+0x46>
	...

08005d5c <_svfiprintf_r>:
 8005d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d60:	461d      	mov	r5, r3
 8005d62:	898b      	ldrh	r3, [r1, #12]
 8005d64:	b09d      	sub	sp, #116	; 0x74
 8005d66:	061f      	lsls	r7, r3, #24
 8005d68:	4680      	mov	r8, r0
 8005d6a:	460c      	mov	r4, r1
 8005d6c:	4616      	mov	r6, r2
 8005d6e:	d50f      	bpl.n	8005d90 <_svfiprintf_r+0x34>
 8005d70:	690b      	ldr	r3, [r1, #16]
 8005d72:	b96b      	cbnz	r3, 8005d90 <_svfiprintf_r+0x34>
 8005d74:	2140      	movs	r1, #64	; 0x40
 8005d76:	f000 faf1 	bl	800635c <_malloc_r>
 8005d7a:	6020      	str	r0, [r4, #0]
 8005d7c:	6120      	str	r0, [r4, #16]
 8005d7e:	b928      	cbnz	r0, 8005d8c <_svfiprintf_r+0x30>
 8005d80:	230c      	movs	r3, #12
 8005d82:	f8c8 3000 	str.w	r3, [r8]
 8005d86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d8a:	e0c8      	b.n	8005f1e <_svfiprintf_r+0x1c2>
 8005d8c:	2340      	movs	r3, #64	; 0x40
 8005d8e:	6163      	str	r3, [r4, #20]
 8005d90:	2300      	movs	r3, #0
 8005d92:	9309      	str	r3, [sp, #36]	; 0x24
 8005d94:	2320      	movs	r3, #32
 8005d96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d9a:	2330      	movs	r3, #48	; 0x30
 8005d9c:	f04f 0b01 	mov.w	fp, #1
 8005da0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005da4:	9503      	str	r5, [sp, #12]
 8005da6:	4637      	mov	r7, r6
 8005da8:	463d      	mov	r5, r7
 8005daa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005dae:	b10b      	cbz	r3, 8005db4 <_svfiprintf_r+0x58>
 8005db0:	2b25      	cmp	r3, #37	; 0x25
 8005db2:	d13e      	bne.n	8005e32 <_svfiprintf_r+0xd6>
 8005db4:	ebb7 0a06 	subs.w	sl, r7, r6
 8005db8:	d00b      	beq.n	8005dd2 <_svfiprintf_r+0x76>
 8005dba:	4653      	mov	r3, sl
 8005dbc:	4632      	mov	r2, r6
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	4640      	mov	r0, r8
 8005dc2:	f7ff ff70 	bl	8005ca6 <__ssputs_r>
 8005dc6:	3001      	adds	r0, #1
 8005dc8:	f000 80a4 	beq.w	8005f14 <_svfiprintf_r+0x1b8>
 8005dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dce:	4453      	add	r3, sl
 8005dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8005dd2:	783b      	ldrb	r3, [r7, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 809d 	beq.w	8005f14 <_svfiprintf_r+0x1b8>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005de0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005de4:	9304      	str	r3, [sp, #16]
 8005de6:	9307      	str	r3, [sp, #28]
 8005de8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005dec:	931a      	str	r3, [sp, #104]	; 0x68
 8005dee:	462f      	mov	r7, r5
 8005df0:	2205      	movs	r2, #5
 8005df2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005df6:	4850      	ldr	r0, [pc, #320]	; (8005f38 <_svfiprintf_r+0x1dc>)
 8005df8:	f000 fa3d 	bl	8006276 <memchr>
 8005dfc:	9b04      	ldr	r3, [sp, #16]
 8005dfe:	b9d0      	cbnz	r0, 8005e36 <_svfiprintf_r+0xda>
 8005e00:	06d9      	lsls	r1, r3, #27
 8005e02:	bf44      	itt	mi
 8005e04:	2220      	movmi	r2, #32
 8005e06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e0a:	071a      	lsls	r2, r3, #28
 8005e0c:	bf44      	itt	mi
 8005e0e:	222b      	movmi	r2, #43	; 0x2b
 8005e10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e14:	782a      	ldrb	r2, [r5, #0]
 8005e16:	2a2a      	cmp	r2, #42	; 0x2a
 8005e18:	d015      	beq.n	8005e46 <_svfiprintf_r+0xea>
 8005e1a:	462f      	mov	r7, r5
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	250a      	movs	r5, #10
 8005e20:	9a07      	ldr	r2, [sp, #28]
 8005e22:	4639      	mov	r1, r7
 8005e24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e28:	3b30      	subs	r3, #48	; 0x30
 8005e2a:	2b09      	cmp	r3, #9
 8005e2c:	d94d      	bls.n	8005eca <_svfiprintf_r+0x16e>
 8005e2e:	b1b8      	cbz	r0, 8005e60 <_svfiprintf_r+0x104>
 8005e30:	e00f      	b.n	8005e52 <_svfiprintf_r+0xf6>
 8005e32:	462f      	mov	r7, r5
 8005e34:	e7b8      	b.n	8005da8 <_svfiprintf_r+0x4c>
 8005e36:	4a40      	ldr	r2, [pc, #256]	; (8005f38 <_svfiprintf_r+0x1dc>)
 8005e38:	463d      	mov	r5, r7
 8005e3a:	1a80      	subs	r0, r0, r2
 8005e3c:	fa0b f000 	lsl.w	r0, fp, r0
 8005e40:	4318      	orrs	r0, r3
 8005e42:	9004      	str	r0, [sp, #16]
 8005e44:	e7d3      	b.n	8005dee <_svfiprintf_r+0x92>
 8005e46:	9a03      	ldr	r2, [sp, #12]
 8005e48:	1d11      	adds	r1, r2, #4
 8005e4a:	6812      	ldr	r2, [r2, #0]
 8005e4c:	9103      	str	r1, [sp, #12]
 8005e4e:	2a00      	cmp	r2, #0
 8005e50:	db01      	blt.n	8005e56 <_svfiprintf_r+0xfa>
 8005e52:	9207      	str	r2, [sp, #28]
 8005e54:	e004      	b.n	8005e60 <_svfiprintf_r+0x104>
 8005e56:	4252      	negs	r2, r2
 8005e58:	f043 0302 	orr.w	r3, r3, #2
 8005e5c:	9207      	str	r2, [sp, #28]
 8005e5e:	9304      	str	r3, [sp, #16]
 8005e60:	783b      	ldrb	r3, [r7, #0]
 8005e62:	2b2e      	cmp	r3, #46	; 0x2e
 8005e64:	d10c      	bne.n	8005e80 <_svfiprintf_r+0x124>
 8005e66:	787b      	ldrb	r3, [r7, #1]
 8005e68:	2b2a      	cmp	r3, #42	; 0x2a
 8005e6a:	d133      	bne.n	8005ed4 <_svfiprintf_r+0x178>
 8005e6c:	9b03      	ldr	r3, [sp, #12]
 8005e6e:	3702      	adds	r7, #2
 8005e70:	1d1a      	adds	r2, r3, #4
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	9203      	str	r2, [sp, #12]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	bfb8      	it	lt
 8005e7a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005e7e:	9305      	str	r3, [sp, #20]
 8005e80:	4d2e      	ldr	r5, [pc, #184]	; (8005f3c <_svfiprintf_r+0x1e0>)
 8005e82:	2203      	movs	r2, #3
 8005e84:	7839      	ldrb	r1, [r7, #0]
 8005e86:	4628      	mov	r0, r5
 8005e88:	f000 f9f5 	bl	8006276 <memchr>
 8005e8c:	b138      	cbz	r0, 8005e9e <_svfiprintf_r+0x142>
 8005e8e:	2340      	movs	r3, #64	; 0x40
 8005e90:	1b40      	subs	r0, r0, r5
 8005e92:	fa03 f000 	lsl.w	r0, r3, r0
 8005e96:	9b04      	ldr	r3, [sp, #16]
 8005e98:	3701      	adds	r7, #1
 8005e9a:	4303      	orrs	r3, r0
 8005e9c:	9304      	str	r3, [sp, #16]
 8005e9e:	7839      	ldrb	r1, [r7, #0]
 8005ea0:	2206      	movs	r2, #6
 8005ea2:	4827      	ldr	r0, [pc, #156]	; (8005f40 <_svfiprintf_r+0x1e4>)
 8005ea4:	1c7e      	adds	r6, r7, #1
 8005ea6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005eaa:	f000 f9e4 	bl	8006276 <memchr>
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	d038      	beq.n	8005f24 <_svfiprintf_r+0x1c8>
 8005eb2:	4b24      	ldr	r3, [pc, #144]	; (8005f44 <_svfiprintf_r+0x1e8>)
 8005eb4:	bb13      	cbnz	r3, 8005efc <_svfiprintf_r+0x1a0>
 8005eb6:	9b03      	ldr	r3, [sp, #12]
 8005eb8:	3307      	adds	r3, #7
 8005eba:	f023 0307 	bic.w	r3, r3, #7
 8005ebe:	3308      	adds	r3, #8
 8005ec0:	9303      	str	r3, [sp, #12]
 8005ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec4:	444b      	add	r3, r9
 8005ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec8:	e76d      	b.n	8005da6 <_svfiprintf_r+0x4a>
 8005eca:	fb05 3202 	mla	r2, r5, r2, r3
 8005ece:	2001      	movs	r0, #1
 8005ed0:	460f      	mov	r7, r1
 8005ed2:	e7a6      	b.n	8005e22 <_svfiprintf_r+0xc6>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	250a      	movs	r5, #10
 8005ed8:	4619      	mov	r1, r3
 8005eda:	3701      	adds	r7, #1
 8005edc:	9305      	str	r3, [sp, #20]
 8005ede:	4638      	mov	r0, r7
 8005ee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ee4:	3a30      	subs	r2, #48	; 0x30
 8005ee6:	2a09      	cmp	r2, #9
 8005ee8:	d903      	bls.n	8005ef2 <_svfiprintf_r+0x196>
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0c8      	beq.n	8005e80 <_svfiprintf_r+0x124>
 8005eee:	9105      	str	r1, [sp, #20]
 8005ef0:	e7c6      	b.n	8005e80 <_svfiprintf_r+0x124>
 8005ef2:	fb05 2101 	mla	r1, r5, r1, r2
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	4607      	mov	r7, r0
 8005efa:	e7f0      	b.n	8005ede <_svfiprintf_r+0x182>
 8005efc:	ab03      	add	r3, sp, #12
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	4622      	mov	r2, r4
 8005f02:	4b11      	ldr	r3, [pc, #68]	; (8005f48 <_svfiprintf_r+0x1ec>)
 8005f04:	a904      	add	r1, sp, #16
 8005f06:	4640      	mov	r0, r8
 8005f08:	f3af 8000 	nop.w
 8005f0c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005f10:	4681      	mov	r9, r0
 8005f12:	d1d6      	bne.n	8005ec2 <_svfiprintf_r+0x166>
 8005f14:	89a3      	ldrh	r3, [r4, #12]
 8005f16:	065b      	lsls	r3, r3, #25
 8005f18:	f53f af35 	bmi.w	8005d86 <_svfiprintf_r+0x2a>
 8005f1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f1e:	b01d      	add	sp, #116	; 0x74
 8005f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f24:	ab03      	add	r3, sp, #12
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	4622      	mov	r2, r4
 8005f2a:	4b07      	ldr	r3, [pc, #28]	; (8005f48 <_svfiprintf_r+0x1ec>)
 8005f2c:	a904      	add	r1, sp, #16
 8005f2e:	4640      	mov	r0, r8
 8005f30:	f000 f882 	bl	8006038 <_printf_i>
 8005f34:	e7ea      	b.n	8005f0c <_svfiprintf_r+0x1b0>
 8005f36:	bf00      	nop
 8005f38:	080066de 	.word	0x080066de
 8005f3c:	080066e4 	.word	0x080066e4
 8005f40:	080066e8 	.word	0x080066e8
 8005f44:	00000000 	.word	0x00000000
 8005f48:	08005ca7 	.word	0x08005ca7

08005f4c <_printf_common>:
 8005f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f50:	4691      	mov	r9, r2
 8005f52:	461f      	mov	r7, r3
 8005f54:	688a      	ldr	r2, [r1, #8]
 8005f56:	690b      	ldr	r3, [r1, #16]
 8005f58:	4606      	mov	r6, r0
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	bfb8      	it	lt
 8005f5e:	4613      	movlt	r3, r2
 8005f60:	f8c9 3000 	str.w	r3, [r9]
 8005f64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f68:	460c      	mov	r4, r1
 8005f6a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f6e:	b112      	cbz	r2, 8005f76 <_printf_common+0x2a>
 8005f70:	3301      	adds	r3, #1
 8005f72:	f8c9 3000 	str.w	r3, [r9]
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	0699      	lsls	r1, r3, #26
 8005f7a:	bf42      	ittt	mi
 8005f7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005f80:	3302      	addmi	r3, #2
 8005f82:	f8c9 3000 	strmi.w	r3, [r9]
 8005f86:	6825      	ldr	r5, [r4, #0]
 8005f88:	f015 0506 	ands.w	r5, r5, #6
 8005f8c:	d107      	bne.n	8005f9e <_printf_common+0x52>
 8005f8e:	f104 0a19 	add.w	sl, r4, #25
 8005f92:	68e3      	ldr	r3, [r4, #12]
 8005f94:	f8d9 2000 	ldr.w	r2, [r9]
 8005f98:	1a9b      	subs	r3, r3, r2
 8005f9a:	42ab      	cmp	r3, r5
 8005f9c:	dc29      	bgt.n	8005ff2 <_printf_common+0xa6>
 8005f9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005fa2:	6822      	ldr	r2, [r4, #0]
 8005fa4:	3300      	adds	r3, #0
 8005fa6:	bf18      	it	ne
 8005fa8:	2301      	movne	r3, #1
 8005faa:	0692      	lsls	r2, r2, #26
 8005fac:	d42e      	bmi.n	800600c <_printf_common+0xc0>
 8005fae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fb2:	4639      	mov	r1, r7
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	47c0      	blx	r8
 8005fb8:	3001      	adds	r0, #1
 8005fba:	d021      	beq.n	8006000 <_printf_common+0xb4>
 8005fbc:	6823      	ldr	r3, [r4, #0]
 8005fbe:	68e5      	ldr	r5, [r4, #12]
 8005fc0:	f003 0306 	and.w	r3, r3, #6
 8005fc4:	2b04      	cmp	r3, #4
 8005fc6:	bf18      	it	ne
 8005fc8:	2500      	movne	r5, #0
 8005fca:	f8d9 2000 	ldr.w	r2, [r9]
 8005fce:	f04f 0900 	mov.w	r9, #0
 8005fd2:	bf08      	it	eq
 8005fd4:	1aad      	subeq	r5, r5, r2
 8005fd6:	68a3      	ldr	r3, [r4, #8]
 8005fd8:	6922      	ldr	r2, [r4, #16]
 8005fda:	bf08      	it	eq
 8005fdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	bfc4      	itt	gt
 8005fe4:	1a9b      	subgt	r3, r3, r2
 8005fe6:	18ed      	addgt	r5, r5, r3
 8005fe8:	341a      	adds	r4, #26
 8005fea:	454d      	cmp	r5, r9
 8005fec:	d11a      	bne.n	8006024 <_printf_common+0xd8>
 8005fee:	2000      	movs	r0, #0
 8005ff0:	e008      	b.n	8006004 <_printf_common+0xb8>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	4652      	mov	r2, sl
 8005ff6:	4639      	mov	r1, r7
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	47c0      	blx	r8
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	d103      	bne.n	8006008 <_printf_common+0xbc>
 8006000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006008:	3501      	adds	r5, #1
 800600a:	e7c2      	b.n	8005f92 <_printf_common+0x46>
 800600c:	2030      	movs	r0, #48	; 0x30
 800600e:	18e1      	adds	r1, r4, r3
 8006010:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800601a:	4422      	add	r2, r4
 800601c:	3302      	adds	r3, #2
 800601e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006022:	e7c4      	b.n	8005fae <_printf_common+0x62>
 8006024:	2301      	movs	r3, #1
 8006026:	4622      	mov	r2, r4
 8006028:	4639      	mov	r1, r7
 800602a:	4630      	mov	r0, r6
 800602c:	47c0      	blx	r8
 800602e:	3001      	adds	r0, #1
 8006030:	d0e6      	beq.n	8006000 <_printf_common+0xb4>
 8006032:	f109 0901 	add.w	r9, r9, #1
 8006036:	e7d8      	b.n	8005fea <_printf_common+0x9e>

08006038 <_printf_i>:
 8006038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800603c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006040:	460c      	mov	r4, r1
 8006042:	7e09      	ldrb	r1, [r1, #24]
 8006044:	b085      	sub	sp, #20
 8006046:	296e      	cmp	r1, #110	; 0x6e
 8006048:	4617      	mov	r7, r2
 800604a:	4606      	mov	r6, r0
 800604c:	4698      	mov	r8, r3
 800604e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006050:	f000 80b3 	beq.w	80061ba <_printf_i+0x182>
 8006054:	d822      	bhi.n	800609c <_printf_i+0x64>
 8006056:	2963      	cmp	r1, #99	; 0x63
 8006058:	d036      	beq.n	80060c8 <_printf_i+0x90>
 800605a:	d80a      	bhi.n	8006072 <_printf_i+0x3a>
 800605c:	2900      	cmp	r1, #0
 800605e:	f000 80b9 	beq.w	80061d4 <_printf_i+0x19c>
 8006062:	2958      	cmp	r1, #88	; 0x58
 8006064:	f000 8083 	beq.w	800616e <_printf_i+0x136>
 8006068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800606c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006070:	e032      	b.n	80060d8 <_printf_i+0xa0>
 8006072:	2964      	cmp	r1, #100	; 0x64
 8006074:	d001      	beq.n	800607a <_printf_i+0x42>
 8006076:	2969      	cmp	r1, #105	; 0x69
 8006078:	d1f6      	bne.n	8006068 <_printf_i+0x30>
 800607a:	6820      	ldr	r0, [r4, #0]
 800607c:	6813      	ldr	r3, [r2, #0]
 800607e:	0605      	lsls	r5, r0, #24
 8006080:	f103 0104 	add.w	r1, r3, #4
 8006084:	d52a      	bpl.n	80060dc <_printf_i+0xa4>
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6011      	str	r1, [r2, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	da03      	bge.n	8006096 <_printf_i+0x5e>
 800608e:	222d      	movs	r2, #45	; 0x2d
 8006090:	425b      	negs	r3, r3
 8006092:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006096:	486f      	ldr	r0, [pc, #444]	; (8006254 <_printf_i+0x21c>)
 8006098:	220a      	movs	r2, #10
 800609a:	e039      	b.n	8006110 <_printf_i+0xd8>
 800609c:	2973      	cmp	r1, #115	; 0x73
 800609e:	f000 809d 	beq.w	80061dc <_printf_i+0x1a4>
 80060a2:	d808      	bhi.n	80060b6 <_printf_i+0x7e>
 80060a4:	296f      	cmp	r1, #111	; 0x6f
 80060a6:	d020      	beq.n	80060ea <_printf_i+0xb2>
 80060a8:	2970      	cmp	r1, #112	; 0x70
 80060aa:	d1dd      	bne.n	8006068 <_printf_i+0x30>
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	f043 0320 	orr.w	r3, r3, #32
 80060b2:	6023      	str	r3, [r4, #0]
 80060b4:	e003      	b.n	80060be <_printf_i+0x86>
 80060b6:	2975      	cmp	r1, #117	; 0x75
 80060b8:	d017      	beq.n	80060ea <_printf_i+0xb2>
 80060ba:	2978      	cmp	r1, #120	; 0x78
 80060bc:	d1d4      	bne.n	8006068 <_printf_i+0x30>
 80060be:	2378      	movs	r3, #120	; 0x78
 80060c0:	4865      	ldr	r0, [pc, #404]	; (8006258 <_printf_i+0x220>)
 80060c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060c6:	e055      	b.n	8006174 <_printf_i+0x13c>
 80060c8:	6813      	ldr	r3, [r2, #0]
 80060ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060ce:	1d19      	adds	r1, r3, #4
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6011      	str	r1, [r2, #0]
 80060d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060d8:	2301      	movs	r3, #1
 80060da:	e08c      	b.n	80061f6 <_printf_i+0x1be>
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060e2:	6011      	str	r1, [r2, #0]
 80060e4:	bf18      	it	ne
 80060e6:	b21b      	sxthne	r3, r3
 80060e8:	e7cf      	b.n	800608a <_printf_i+0x52>
 80060ea:	6813      	ldr	r3, [r2, #0]
 80060ec:	6825      	ldr	r5, [r4, #0]
 80060ee:	1d18      	adds	r0, r3, #4
 80060f0:	6010      	str	r0, [r2, #0]
 80060f2:	0628      	lsls	r0, r5, #24
 80060f4:	d501      	bpl.n	80060fa <_printf_i+0xc2>
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	e002      	b.n	8006100 <_printf_i+0xc8>
 80060fa:	0668      	lsls	r0, r5, #25
 80060fc:	d5fb      	bpl.n	80060f6 <_printf_i+0xbe>
 80060fe:	881b      	ldrh	r3, [r3, #0]
 8006100:	296f      	cmp	r1, #111	; 0x6f
 8006102:	bf14      	ite	ne
 8006104:	220a      	movne	r2, #10
 8006106:	2208      	moveq	r2, #8
 8006108:	4852      	ldr	r0, [pc, #328]	; (8006254 <_printf_i+0x21c>)
 800610a:	2100      	movs	r1, #0
 800610c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006110:	6865      	ldr	r5, [r4, #4]
 8006112:	2d00      	cmp	r5, #0
 8006114:	60a5      	str	r5, [r4, #8]
 8006116:	f2c0 8095 	blt.w	8006244 <_printf_i+0x20c>
 800611a:	6821      	ldr	r1, [r4, #0]
 800611c:	f021 0104 	bic.w	r1, r1, #4
 8006120:	6021      	str	r1, [r4, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d13d      	bne.n	80061a2 <_printf_i+0x16a>
 8006126:	2d00      	cmp	r5, #0
 8006128:	f040 808e 	bne.w	8006248 <_printf_i+0x210>
 800612c:	4665      	mov	r5, ip
 800612e:	2a08      	cmp	r2, #8
 8006130:	d10b      	bne.n	800614a <_printf_i+0x112>
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	07db      	lsls	r3, r3, #31
 8006136:	d508      	bpl.n	800614a <_printf_i+0x112>
 8006138:	6923      	ldr	r3, [r4, #16]
 800613a:	6862      	ldr	r2, [r4, #4]
 800613c:	429a      	cmp	r2, r3
 800613e:	bfde      	ittt	le
 8006140:	2330      	movle	r3, #48	; 0x30
 8006142:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006146:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800614a:	ebac 0305 	sub.w	r3, ip, r5
 800614e:	6123      	str	r3, [r4, #16]
 8006150:	f8cd 8000 	str.w	r8, [sp]
 8006154:	463b      	mov	r3, r7
 8006156:	aa03      	add	r2, sp, #12
 8006158:	4621      	mov	r1, r4
 800615a:	4630      	mov	r0, r6
 800615c:	f7ff fef6 	bl	8005f4c <_printf_common>
 8006160:	3001      	adds	r0, #1
 8006162:	d14d      	bne.n	8006200 <_printf_i+0x1c8>
 8006164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006168:	b005      	add	sp, #20
 800616a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800616e:	4839      	ldr	r0, [pc, #228]	; (8006254 <_printf_i+0x21c>)
 8006170:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006174:	6813      	ldr	r3, [r2, #0]
 8006176:	6821      	ldr	r1, [r4, #0]
 8006178:	1d1d      	adds	r5, r3, #4
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6015      	str	r5, [r2, #0]
 800617e:	060a      	lsls	r2, r1, #24
 8006180:	d50b      	bpl.n	800619a <_printf_i+0x162>
 8006182:	07ca      	lsls	r2, r1, #31
 8006184:	bf44      	itt	mi
 8006186:	f041 0120 	orrmi.w	r1, r1, #32
 800618a:	6021      	strmi	r1, [r4, #0]
 800618c:	b91b      	cbnz	r3, 8006196 <_printf_i+0x15e>
 800618e:	6822      	ldr	r2, [r4, #0]
 8006190:	f022 0220 	bic.w	r2, r2, #32
 8006194:	6022      	str	r2, [r4, #0]
 8006196:	2210      	movs	r2, #16
 8006198:	e7b7      	b.n	800610a <_printf_i+0xd2>
 800619a:	064d      	lsls	r5, r1, #25
 800619c:	bf48      	it	mi
 800619e:	b29b      	uxthmi	r3, r3
 80061a0:	e7ef      	b.n	8006182 <_printf_i+0x14a>
 80061a2:	4665      	mov	r5, ip
 80061a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80061a8:	fb02 3311 	mls	r3, r2, r1, r3
 80061ac:	5cc3      	ldrb	r3, [r0, r3]
 80061ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80061b2:	460b      	mov	r3, r1
 80061b4:	2900      	cmp	r1, #0
 80061b6:	d1f5      	bne.n	80061a4 <_printf_i+0x16c>
 80061b8:	e7b9      	b.n	800612e <_printf_i+0xf6>
 80061ba:	6813      	ldr	r3, [r2, #0]
 80061bc:	6825      	ldr	r5, [r4, #0]
 80061be:	1d18      	adds	r0, r3, #4
 80061c0:	6961      	ldr	r1, [r4, #20]
 80061c2:	6010      	str	r0, [r2, #0]
 80061c4:	0628      	lsls	r0, r5, #24
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	d501      	bpl.n	80061ce <_printf_i+0x196>
 80061ca:	6019      	str	r1, [r3, #0]
 80061cc:	e002      	b.n	80061d4 <_printf_i+0x19c>
 80061ce:	066a      	lsls	r2, r5, #25
 80061d0:	d5fb      	bpl.n	80061ca <_printf_i+0x192>
 80061d2:	8019      	strh	r1, [r3, #0]
 80061d4:	2300      	movs	r3, #0
 80061d6:	4665      	mov	r5, ip
 80061d8:	6123      	str	r3, [r4, #16]
 80061da:	e7b9      	b.n	8006150 <_printf_i+0x118>
 80061dc:	6813      	ldr	r3, [r2, #0]
 80061de:	1d19      	adds	r1, r3, #4
 80061e0:	6011      	str	r1, [r2, #0]
 80061e2:	681d      	ldr	r5, [r3, #0]
 80061e4:	6862      	ldr	r2, [r4, #4]
 80061e6:	2100      	movs	r1, #0
 80061e8:	4628      	mov	r0, r5
 80061ea:	f000 f844 	bl	8006276 <memchr>
 80061ee:	b108      	cbz	r0, 80061f4 <_printf_i+0x1bc>
 80061f0:	1b40      	subs	r0, r0, r5
 80061f2:	6060      	str	r0, [r4, #4]
 80061f4:	6863      	ldr	r3, [r4, #4]
 80061f6:	6123      	str	r3, [r4, #16]
 80061f8:	2300      	movs	r3, #0
 80061fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061fe:	e7a7      	b.n	8006150 <_printf_i+0x118>
 8006200:	6923      	ldr	r3, [r4, #16]
 8006202:	462a      	mov	r2, r5
 8006204:	4639      	mov	r1, r7
 8006206:	4630      	mov	r0, r6
 8006208:	47c0      	blx	r8
 800620a:	3001      	adds	r0, #1
 800620c:	d0aa      	beq.n	8006164 <_printf_i+0x12c>
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	079b      	lsls	r3, r3, #30
 8006212:	d413      	bmi.n	800623c <_printf_i+0x204>
 8006214:	68e0      	ldr	r0, [r4, #12]
 8006216:	9b03      	ldr	r3, [sp, #12]
 8006218:	4298      	cmp	r0, r3
 800621a:	bfb8      	it	lt
 800621c:	4618      	movlt	r0, r3
 800621e:	e7a3      	b.n	8006168 <_printf_i+0x130>
 8006220:	2301      	movs	r3, #1
 8006222:	464a      	mov	r2, r9
 8006224:	4639      	mov	r1, r7
 8006226:	4630      	mov	r0, r6
 8006228:	47c0      	blx	r8
 800622a:	3001      	adds	r0, #1
 800622c:	d09a      	beq.n	8006164 <_printf_i+0x12c>
 800622e:	3501      	adds	r5, #1
 8006230:	68e3      	ldr	r3, [r4, #12]
 8006232:	9a03      	ldr	r2, [sp, #12]
 8006234:	1a9b      	subs	r3, r3, r2
 8006236:	42ab      	cmp	r3, r5
 8006238:	dcf2      	bgt.n	8006220 <_printf_i+0x1e8>
 800623a:	e7eb      	b.n	8006214 <_printf_i+0x1dc>
 800623c:	2500      	movs	r5, #0
 800623e:	f104 0919 	add.w	r9, r4, #25
 8006242:	e7f5      	b.n	8006230 <_printf_i+0x1f8>
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1ac      	bne.n	80061a2 <_printf_i+0x16a>
 8006248:	7803      	ldrb	r3, [r0, #0]
 800624a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800624e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006252:	e76c      	b.n	800612e <_printf_i+0xf6>
 8006254:	080066ef 	.word	0x080066ef
 8006258:	08006700 	.word	0x08006700

0800625c <__ascii_wctomb>:
 800625c:	b149      	cbz	r1, 8006272 <__ascii_wctomb+0x16>
 800625e:	2aff      	cmp	r2, #255	; 0xff
 8006260:	bf8b      	itete	hi
 8006262:	238a      	movhi	r3, #138	; 0x8a
 8006264:	700a      	strbls	r2, [r1, #0]
 8006266:	6003      	strhi	r3, [r0, #0]
 8006268:	2001      	movls	r0, #1
 800626a:	bf88      	it	hi
 800626c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006270:	4770      	bx	lr
 8006272:	4608      	mov	r0, r1
 8006274:	4770      	bx	lr

08006276 <memchr>:
 8006276:	b510      	push	{r4, lr}
 8006278:	b2c9      	uxtb	r1, r1
 800627a:	4402      	add	r2, r0
 800627c:	4290      	cmp	r0, r2
 800627e:	4603      	mov	r3, r0
 8006280:	d101      	bne.n	8006286 <memchr+0x10>
 8006282:	2300      	movs	r3, #0
 8006284:	e003      	b.n	800628e <memchr+0x18>
 8006286:	781c      	ldrb	r4, [r3, #0]
 8006288:	3001      	adds	r0, #1
 800628a:	428c      	cmp	r4, r1
 800628c:	d1f6      	bne.n	800627c <memchr+0x6>
 800628e:	4618      	mov	r0, r3
 8006290:	bd10      	pop	{r4, pc}

08006292 <memmove>:
 8006292:	4288      	cmp	r0, r1
 8006294:	b510      	push	{r4, lr}
 8006296:	eb01 0302 	add.w	r3, r1, r2
 800629a:	d807      	bhi.n	80062ac <memmove+0x1a>
 800629c:	1e42      	subs	r2, r0, #1
 800629e:	4299      	cmp	r1, r3
 80062a0:	d00a      	beq.n	80062b8 <memmove+0x26>
 80062a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062a6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80062aa:	e7f8      	b.n	800629e <memmove+0xc>
 80062ac:	4283      	cmp	r3, r0
 80062ae:	d9f5      	bls.n	800629c <memmove+0xa>
 80062b0:	1881      	adds	r1, r0, r2
 80062b2:	1ad2      	subs	r2, r2, r3
 80062b4:	42d3      	cmn	r3, r2
 80062b6:	d100      	bne.n	80062ba <memmove+0x28>
 80062b8:	bd10      	pop	{r4, pc}
 80062ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062be:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80062c2:	e7f7      	b.n	80062b4 <memmove+0x22>

080062c4 <_free_r>:
 80062c4:	b538      	push	{r3, r4, r5, lr}
 80062c6:	4605      	mov	r5, r0
 80062c8:	2900      	cmp	r1, #0
 80062ca:	d043      	beq.n	8006354 <_free_r+0x90>
 80062cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062d0:	1f0c      	subs	r4, r1, #4
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	bfb8      	it	lt
 80062d6:	18e4      	addlt	r4, r4, r3
 80062d8:	f000 f8d0 	bl	800647c <__malloc_lock>
 80062dc:	4a1e      	ldr	r2, [pc, #120]	; (8006358 <_free_r+0x94>)
 80062de:	6813      	ldr	r3, [r2, #0]
 80062e0:	4610      	mov	r0, r2
 80062e2:	b933      	cbnz	r3, 80062f2 <_free_r+0x2e>
 80062e4:	6063      	str	r3, [r4, #4]
 80062e6:	6014      	str	r4, [r2, #0]
 80062e8:	4628      	mov	r0, r5
 80062ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062ee:	f000 b8c6 	b.w	800647e <__malloc_unlock>
 80062f2:	42a3      	cmp	r3, r4
 80062f4:	d90b      	bls.n	800630e <_free_r+0x4a>
 80062f6:	6821      	ldr	r1, [r4, #0]
 80062f8:	1862      	adds	r2, r4, r1
 80062fa:	4293      	cmp	r3, r2
 80062fc:	bf01      	itttt	eq
 80062fe:	681a      	ldreq	r2, [r3, #0]
 8006300:	685b      	ldreq	r3, [r3, #4]
 8006302:	1852      	addeq	r2, r2, r1
 8006304:	6022      	streq	r2, [r4, #0]
 8006306:	6063      	str	r3, [r4, #4]
 8006308:	6004      	str	r4, [r0, #0]
 800630a:	e7ed      	b.n	80062e8 <_free_r+0x24>
 800630c:	4613      	mov	r3, r2
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	b10a      	cbz	r2, 8006316 <_free_r+0x52>
 8006312:	42a2      	cmp	r2, r4
 8006314:	d9fa      	bls.n	800630c <_free_r+0x48>
 8006316:	6819      	ldr	r1, [r3, #0]
 8006318:	1858      	adds	r0, r3, r1
 800631a:	42a0      	cmp	r0, r4
 800631c:	d10b      	bne.n	8006336 <_free_r+0x72>
 800631e:	6820      	ldr	r0, [r4, #0]
 8006320:	4401      	add	r1, r0
 8006322:	1858      	adds	r0, r3, r1
 8006324:	4282      	cmp	r2, r0
 8006326:	6019      	str	r1, [r3, #0]
 8006328:	d1de      	bne.n	80062e8 <_free_r+0x24>
 800632a:	6810      	ldr	r0, [r2, #0]
 800632c:	6852      	ldr	r2, [r2, #4]
 800632e:	4401      	add	r1, r0
 8006330:	6019      	str	r1, [r3, #0]
 8006332:	605a      	str	r2, [r3, #4]
 8006334:	e7d8      	b.n	80062e8 <_free_r+0x24>
 8006336:	d902      	bls.n	800633e <_free_r+0x7a>
 8006338:	230c      	movs	r3, #12
 800633a:	602b      	str	r3, [r5, #0]
 800633c:	e7d4      	b.n	80062e8 <_free_r+0x24>
 800633e:	6820      	ldr	r0, [r4, #0]
 8006340:	1821      	adds	r1, r4, r0
 8006342:	428a      	cmp	r2, r1
 8006344:	bf01      	itttt	eq
 8006346:	6811      	ldreq	r1, [r2, #0]
 8006348:	6852      	ldreq	r2, [r2, #4]
 800634a:	1809      	addeq	r1, r1, r0
 800634c:	6021      	streq	r1, [r4, #0]
 800634e:	6062      	str	r2, [r4, #4]
 8006350:	605c      	str	r4, [r3, #4]
 8006352:	e7c9      	b.n	80062e8 <_free_r+0x24>
 8006354:	bd38      	pop	{r3, r4, r5, pc}
 8006356:	bf00      	nop
 8006358:	20001b74 	.word	0x20001b74

0800635c <_malloc_r>:
 800635c:	b570      	push	{r4, r5, r6, lr}
 800635e:	1ccd      	adds	r5, r1, #3
 8006360:	f025 0503 	bic.w	r5, r5, #3
 8006364:	3508      	adds	r5, #8
 8006366:	2d0c      	cmp	r5, #12
 8006368:	bf38      	it	cc
 800636a:	250c      	movcc	r5, #12
 800636c:	2d00      	cmp	r5, #0
 800636e:	4606      	mov	r6, r0
 8006370:	db01      	blt.n	8006376 <_malloc_r+0x1a>
 8006372:	42a9      	cmp	r1, r5
 8006374:	d903      	bls.n	800637e <_malloc_r+0x22>
 8006376:	230c      	movs	r3, #12
 8006378:	6033      	str	r3, [r6, #0]
 800637a:	2000      	movs	r0, #0
 800637c:	bd70      	pop	{r4, r5, r6, pc}
 800637e:	f000 f87d 	bl	800647c <__malloc_lock>
 8006382:	4a21      	ldr	r2, [pc, #132]	; (8006408 <_malloc_r+0xac>)
 8006384:	6814      	ldr	r4, [r2, #0]
 8006386:	4621      	mov	r1, r4
 8006388:	b991      	cbnz	r1, 80063b0 <_malloc_r+0x54>
 800638a:	4c20      	ldr	r4, [pc, #128]	; (800640c <_malloc_r+0xb0>)
 800638c:	6823      	ldr	r3, [r4, #0]
 800638e:	b91b      	cbnz	r3, 8006398 <_malloc_r+0x3c>
 8006390:	4630      	mov	r0, r6
 8006392:	f000 f863 	bl	800645c <_sbrk_r>
 8006396:	6020      	str	r0, [r4, #0]
 8006398:	4629      	mov	r1, r5
 800639a:	4630      	mov	r0, r6
 800639c:	f000 f85e 	bl	800645c <_sbrk_r>
 80063a0:	1c43      	adds	r3, r0, #1
 80063a2:	d124      	bne.n	80063ee <_malloc_r+0x92>
 80063a4:	230c      	movs	r3, #12
 80063a6:	4630      	mov	r0, r6
 80063a8:	6033      	str	r3, [r6, #0]
 80063aa:	f000 f868 	bl	800647e <__malloc_unlock>
 80063ae:	e7e4      	b.n	800637a <_malloc_r+0x1e>
 80063b0:	680b      	ldr	r3, [r1, #0]
 80063b2:	1b5b      	subs	r3, r3, r5
 80063b4:	d418      	bmi.n	80063e8 <_malloc_r+0x8c>
 80063b6:	2b0b      	cmp	r3, #11
 80063b8:	d90f      	bls.n	80063da <_malloc_r+0x7e>
 80063ba:	600b      	str	r3, [r1, #0]
 80063bc:	18cc      	adds	r4, r1, r3
 80063be:	50cd      	str	r5, [r1, r3]
 80063c0:	4630      	mov	r0, r6
 80063c2:	f000 f85c 	bl	800647e <__malloc_unlock>
 80063c6:	f104 000b 	add.w	r0, r4, #11
 80063ca:	1d23      	adds	r3, r4, #4
 80063cc:	f020 0007 	bic.w	r0, r0, #7
 80063d0:	1ac3      	subs	r3, r0, r3
 80063d2:	d0d3      	beq.n	800637c <_malloc_r+0x20>
 80063d4:	425a      	negs	r2, r3
 80063d6:	50e2      	str	r2, [r4, r3]
 80063d8:	e7d0      	b.n	800637c <_malloc_r+0x20>
 80063da:	684b      	ldr	r3, [r1, #4]
 80063dc:	428c      	cmp	r4, r1
 80063de:	bf16      	itet	ne
 80063e0:	6063      	strne	r3, [r4, #4]
 80063e2:	6013      	streq	r3, [r2, #0]
 80063e4:	460c      	movne	r4, r1
 80063e6:	e7eb      	b.n	80063c0 <_malloc_r+0x64>
 80063e8:	460c      	mov	r4, r1
 80063ea:	6849      	ldr	r1, [r1, #4]
 80063ec:	e7cc      	b.n	8006388 <_malloc_r+0x2c>
 80063ee:	1cc4      	adds	r4, r0, #3
 80063f0:	f024 0403 	bic.w	r4, r4, #3
 80063f4:	42a0      	cmp	r0, r4
 80063f6:	d005      	beq.n	8006404 <_malloc_r+0xa8>
 80063f8:	1a21      	subs	r1, r4, r0
 80063fa:	4630      	mov	r0, r6
 80063fc:	f000 f82e 	bl	800645c <_sbrk_r>
 8006400:	3001      	adds	r0, #1
 8006402:	d0cf      	beq.n	80063a4 <_malloc_r+0x48>
 8006404:	6025      	str	r5, [r4, #0]
 8006406:	e7db      	b.n	80063c0 <_malloc_r+0x64>
 8006408:	20001b74 	.word	0x20001b74
 800640c:	20001b78 	.word	0x20001b78

08006410 <_realloc_r>:
 8006410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006412:	4607      	mov	r7, r0
 8006414:	4614      	mov	r4, r2
 8006416:	460e      	mov	r6, r1
 8006418:	b921      	cbnz	r1, 8006424 <_realloc_r+0x14>
 800641a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800641e:	4611      	mov	r1, r2
 8006420:	f7ff bf9c 	b.w	800635c <_malloc_r>
 8006424:	b922      	cbnz	r2, 8006430 <_realloc_r+0x20>
 8006426:	f7ff ff4d 	bl	80062c4 <_free_r>
 800642a:	4625      	mov	r5, r4
 800642c:	4628      	mov	r0, r5
 800642e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006430:	f000 f826 	bl	8006480 <_malloc_usable_size_r>
 8006434:	42a0      	cmp	r0, r4
 8006436:	d20f      	bcs.n	8006458 <_realloc_r+0x48>
 8006438:	4621      	mov	r1, r4
 800643a:	4638      	mov	r0, r7
 800643c:	f7ff ff8e 	bl	800635c <_malloc_r>
 8006440:	4605      	mov	r5, r0
 8006442:	2800      	cmp	r0, #0
 8006444:	d0f2      	beq.n	800642c <_realloc_r+0x1c>
 8006446:	4631      	mov	r1, r6
 8006448:	4622      	mov	r2, r4
 800644a:	f7ff fb3d 	bl	8005ac8 <memcpy>
 800644e:	4631      	mov	r1, r6
 8006450:	4638      	mov	r0, r7
 8006452:	f7ff ff37 	bl	80062c4 <_free_r>
 8006456:	e7e9      	b.n	800642c <_realloc_r+0x1c>
 8006458:	4635      	mov	r5, r6
 800645a:	e7e7      	b.n	800642c <_realloc_r+0x1c>

0800645c <_sbrk_r>:
 800645c:	b538      	push	{r3, r4, r5, lr}
 800645e:	2300      	movs	r3, #0
 8006460:	4c05      	ldr	r4, [pc, #20]	; (8006478 <_sbrk_r+0x1c>)
 8006462:	4605      	mov	r5, r0
 8006464:	4608      	mov	r0, r1
 8006466:	6023      	str	r3, [r4, #0]
 8006468:	f7fa fcfc 	bl	8000e64 <_sbrk>
 800646c:	1c43      	adds	r3, r0, #1
 800646e:	d102      	bne.n	8006476 <_sbrk_r+0x1a>
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	b103      	cbz	r3, 8006476 <_sbrk_r+0x1a>
 8006474:	602b      	str	r3, [r5, #0]
 8006476:	bd38      	pop	{r3, r4, r5, pc}
 8006478:	20001d14 	.word	0x20001d14

0800647c <__malloc_lock>:
 800647c:	4770      	bx	lr

0800647e <__malloc_unlock>:
 800647e:	4770      	bx	lr

08006480 <_malloc_usable_size_r>:
 8006480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006484:	1f18      	subs	r0, r3, #4
 8006486:	2b00      	cmp	r3, #0
 8006488:	bfbc      	itt	lt
 800648a:	580b      	ldrlt	r3, [r1, r0]
 800648c:	18c0      	addlt	r0, r0, r3
 800648e:	4770      	bx	lr

08006490 <_init>:
 8006490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006492:	bf00      	nop
 8006494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006496:	bc08      	pop	{r3}
 8006498:	469e      	mov	lr, r3
 800649a:	4770      	bx	lr

0800649c <_fini>:
 800649c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649e:	bf00      	nop
 80064a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064a2:	bc08      	pop	{r3}
 80064a4:	469e      	mov	lr, r3
 80064a6:	4770      	bx	lr
